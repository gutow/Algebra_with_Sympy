window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "algebra_with_sympy", "modulename": "algebra_with_sympy", "kind": "module", "doc": "<h1 id=\"algebraic-equations-with-sympy\">Algebraic Equations with SymPy</h1>\n\n<p><a href=\"#introduction\">Introduction</a> | <a href=\"#controlling-the-format-of-interactive-outputs\">Output Formatting</a>\n| <a href=\"#setupinstallation\">Installation</a> |\n<a href=\"#try-in-binder\">Try Live</a> | <a href=\"#issues-or-comments\">Issues or Comments</a> |\n<a href=\"#change-log\">Change Log</a> |\n<a href=\"#licensed-under-gnu-v3-licensehttpsgnuorglicenses\">License</a>\n| <a href=\"https://github.com/gutow/Algebra_with_Sympy\">GIT Repository</a>\n| <a href=\"https://pypi.org/project/Algebra-with-SymPy/\">PyPi Link</a></p>\n\n<h2 id=\"websitedocumentation-including-apihttpsgutowgithubioalgebra_with_sympy\"><a href=\"https://gutow.github.io/Algebra_with_Sympy/\">Website/Documentation (including API)</a></h2>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>This tool defines relations that all high school and college students would\nrecognize as mathematical equations. \nThey consist of a left hand side (lhs) and a right hand side (rhs) connected by\nthe relation operator \"=\".</p>\n\n<p>This tool applies operations to both sides of the equation simultaneously, just\nas students are taught to do when \nattempting to isolate (solve for) a variable. Thus the statement <code>Equation/b</code>\nyields a new equation <code>Equation.lhs/b = Equation.rhs/b</code></p>\n\n<p>The intent is to allow using the mathematical tools in SymPy to rearrange\nequations and perform algebra\nin a stepwise fashion using as close to standard mathematical notation as \npossible. In this way more people can successfully perform \nalgebraic rearrangements without stumbling\nover missed details such as a negative sign.</p>\n\n<p>A simple example as it would appear in a <a href=\"https://jupyter.org\">Jupyter</a> \nnotebook is shown immediately below:</p>\n\n<p><img src=\"https://gutow.github.io/Algebra_with_Sympy/resources/simple_example.png\" alt=\"screenshot of simple example\" /></p>\n\n<p>The last cell illustrates how it is possible to substitute numbers with \nunits into the solved equation to calculate a numerical solution with \nproper units.</p>\n\n<p>In IPython environments (IPython and Jupyter) there is also a shorthand \nsyntax for entering equations provided through the IPython preparser. An \nequation can be specified as <code>eq1 =@ a/b = c/d</code>.</p>\n\n<p><img src=\"https://gutow.github.io/Algebra_with_Sympy/resources/short_syntax.png\" alt=\"screenshot of short syntax\" /></p>\n\n<p>If no Python name is \nspecified for the equation (no <code>eq_name</code> to the left of <code>=@</code>), the equation \nwill still be defined, but will not be easily accessible for further \ncomputation. The <code>=@</code> symbol combination was chosen to avoid conflicts with \nreserved python  symbols while minimizing impacts on syntax highlighting \nand autoformatting.</p>\n\n<p><a href=\"https://gutow.github.io/Algebra_with_Sympy/Demonstration%20of%20equation%20class.html\">More examples of the capabilities of Algebra with Sympy are \nhere</a>.</p>\n\n<p>Many math packages such as <a href=\"https://www.sagemath.org/\">SageMath</a> \nand <a href=\"http://maxima.sourceforge.net/\">Maxima</a> have similar capabilities, \nbut require more knowledge of command syntax, plus they cannot easily be \ninstalled in a generic python environment.</p>\n\n<h2 id=\"controlling-the-format-of-interactive-outputs\">Controlling the Format of Interactive Outputs</h2>\n\n<ul>\n<li>These controls impact all Sympy objects and the <code>Equation</code> class.</li>\n<li><p><strong>In graphical environments (Jupyter)</strong> you will get rendered Latex such as \n$\\frac{a}{b} = \\frac{c}{d}$ or $e^{\\frac{-x^2}{\\sigma^2}}$. To also see the \ncode representation (what can be copied and pasted for \nadditional computation) set <code>algwsym_config.output.show_code = True</code>. \nThis will print the code version (e.g. <code>Equation(a,b/c)</code>) of equations \nand sympy expression in addition to the human readable version. This code \nversion can be accessed directly by calling <code>repr()</code> on the \nequation or expression.</p></li>\n<li><p><strong>In interactive text environments (IPython and command line)</strong> The human \nreadable string version of Sympy expressions are returned (for <code>Equations</code> a \n= b rather than Equation(a,b)). This is equivalent to Calling <code>print()</code> \nor <code>str()</code> on an expression. </p>\n\n<ul>\n<li>To have the code version (can be copied and pasted as a \nPython statement) returned, set <code>algwsym_config.output.human_text = False</code>.</li>\n<li>Setting both <code>algwsym_config.output.human_text = True</code>\nand <code>algwsym_config.output.show_code = True</code>, will return both the \ncode and human readable versions.</li>\n</ul></li>\n<li><p><strong>The equation label</strong> can be turned off by setting\n<code>algwsym_config.output.label = False</code>.</p></li>\n<li><p>By default <strong>solutions output by <code>solve()</code></strong> are returned as a SymPy \n<code>FiniteSet()</code> to force typesetting of the included solutions. To get Python \nlists instead you can override this for the whole session by setting\n<code>algwsym_config.output.solve_to_list = True</code>. For a one-off, simply \nwrap the output of a solve in <code>list()</code> (e.g. <code>list(solve(...))</code>).</p></li>\n</ul>\n\n<h2 id=\"setupinstallation\">Setup/Installation</h2>\n\n<ol>\n<li>Use pip to install in your python environment: \n<code>pip install -U Algebra-with-SymPy</code></li>\n<li>To use in a running python session issue\nthe following command : <code>from algebra_with_sympy import *</code>. \nThis will also import the SymPy tools. </li>\n<li>If you want to isolate this tool from the global namespace you are \nworking with change the import statement \nto <code>import algebra_with_sympy as spa</code>, where \n<code>spa</code> stands for \"SymPy Algebra\". Then all calls would be made to <code>\nspa.funcname()</code>.</li>\n</ol>\n\n<h2 id=\"try-in-binder\">Try in binder</h2>\n\n<p><a href=\"https://mybinder.org/v2/gh/gutow/Algebra_with_Sympy.git/master/?filepath=Demonstration%20of%20equation%20class.ipynb\"><img src=\"https://mybinder.org/badge_logo.svg\" alt=\"Binder\" /></a></p>\n\n<h2 id=\"issues-or-comments\">Issues or Comments</h2>\n\n<ul>\n<li>Issues and bug reports should be <a href=\"https://github.com/gutow/Algebra_with_Sympy/issues\">filed on \ngithub</a>.</li>\n<li>Comments, questions, show and tell, etc. should go in the <a href=\"https://github.com/gutow/Algebra_with_Sympy/discussions\">project \ndiscussions</a>.</li>\n</ul>\n\n<h2 id=\"change-log\">Change Log</h2>\n\n<ul>\n<li>0.11.0dev (June 5, 2023)\n<ul>\n<li>Formatting of <code>FiniteSets</code> overridden so that the contents always\npretty-print. This removes the necessity of special flags to get \npretty output from <code>solve</code>.</li>\n<li>Sympy <code>solve()</code> now works reliably with equations and outputs \npretty-printed solutions.</li>\n<li>Added option <code>algwsym_config.output.solve_to_list = True</code> which causes \n<code>solve()</code> to return solutions sets as Python lists. Using this option \nprevents pretty-printing of the solutions produced by <code>solve()</code>.</li>\n<li><code>algwsym_config.output.show_code</code> and \n<code>algwsym_config.output.human_text</code> now work for all sympy objects, not \njust <code>Equation</code> objects. This works\nin terminal, IPython terminal and Jupyter. This is achieved by hooking \ninto the python <code>display_hook</code> and IPython <code>display_formatter</code>.</li>\n<li>Added jupyter to requirements.txt so that virtual environment builds\nwill include jupyter.</li>\n<li>The way <code>__version__</code> was handled could break pip install. Changed to\ngenerating the internal version during setup. This means the version\nis now available as <code>algwsym_version</code>.</li>\n</ul></li>\n<li>0.10.0 (Sep. 5, 2022)\n<ul>\n<li>Documentation updates and fixes.</li>\n<li>Significantly increased test coverage (~98%).</li>\n<li>Support for <code>Eqn.rewrite(Add)</code></li>\n<li>Solving (e.g. <code>solve(Eqn,x)</code>) now supported fully. Still experimental.</li>\n<li>Bug fix: latex printing now supports custom printer.</li>\n<li>Substitution into an Equation using Equations is now \nsupported (e.g. <code>eq1.subs(eq2, eq3, ...)</code>).</li>\n<li><code>algebra_with_sympy.__version__</code> is now available for version checking \nwithin python.</li>\n<li>Bug fix: preparsing for <code>=@</code> syntax no longer blocks <code>obj?</code> syntax for \ngetting docstrings in ipython.</li>\n<li>More robust determination of equation names for labeling.</li>\n</ul></li>\n<li>0.9.4 (Aug. 11, 2022)\n<ul>\n<li>Update to deal with new Sympy function <code>piecewise_exclusive</code> in v1.11.</li>\n<li>Added user warning if a function does not extend for use with <code>Equations</code> \nas expected. This also allows the package to be used even when a function \nextension does fail.</li>\n<li>Simplification of documentation preparation.</li>\n<li>Typo fixes in preparser error messages.</li>\n</ul></li>\n<li>0.9.3 (Aug. 9, 2022)\n<ul>\n<li>Added check for new enough version of IPython to use the preparser.</li>\n<li>If IPython version too old, issue warning and do not accept <code>=@</code> shorthand.</li>\n</ul></li>\n<li>0.9.2 (Jun. 5, 2022)\n<ul>\n<li><code>=@</code> shorthand syntax for defining equations in IPython compatible \nenvironments.</li>\n<li>Fixed bug where <code>root()</code> override called <code>sqrt()</code> on bare expressions.</li>\n</ul></li>\n<li>0.9.1 (Mar. 24, 2022)\n<ul>\n<li>Equations labeled with their python name, if they have one.</li>\n<li>Added flags to adjust human readable output and equation labeling.</li>\n<li>Accept equation as function argument in any position.</li>\n<li>First pass at <code>solve()</code> accepting equations.</li>\n<li>Added override of <code>root()</code> to avoid warning messages.</li>\n<li>More unit tests.</li>\n<li>First pass at documentation.</li>\n</ul></li>\n<li>0.9.0 functionality equivalent to extension of SymPy in\n<a href=\"https://github.com/sympy/sympy/pull/21333\">PR#21333</a>.</li>\n</ul>\n\n<h2 id=\"licensed-under-gnu-v3-licensehttpsgnuorglicenses\"><a href=\"https://gnu.org/licenses\">licensed under GNU V3 license</a></h2>\n\n<p>This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.</p>\n\n<p>Copyright - Algebra with Sympy Contributors 2021, 2022, 2023</p>\n\n<h1 id=\"development-notes\">Development Notes</h1>\n\n<p><a href=\"#general-notes\">General</a> | <a href=\"#constructing-the-documentation\">Make Docs</a> | \n<a href=\"#running-tests\">Running Tests</a> | \n<a href=\"#building-pypi-package\">Build PyPi Package</a>|</p>\n\n<h2 id=\"general-notes\">General Notes</h2>\n\n<ul>\n<li>Important TODOs\n<ul>\n<li>Test collect when there isn't an available _eval_collect (not sure how \nto get there).</li>\n<li>Test for _binary_op NotImplemented error (not sure how to get there).</li>\n<li>examine these more carefully (top priority: real_root, cbrt, Ynm_c).</li>\n</ul></li>\n<li>To consider\n<ul>\n<li>Change <code>Equation</code> constructor to accept <code>Equality</code>, <code>Set</code>, <code>List</code> or \n<code>lhs, rhs</code>, rather than just <code>lhs, rhs</code>.</li>\n<li>Extend <code>.subs</code> to accept <code>.subs(a=2*c, b = sin(q), ...)</code>.</li>\n<li><a href=\"https://cortexjs.io/mathlive/\">MathLive</a> on another web page as possible\ninput engine.</li>\n</ul></li>\n</ul>\n\n<h2 id=\"constructing-the-documentation\">Constructing the Documentation</h2>\n\n<ol>\n<li>Make sure pdoc is installed and updated in the virtual environment <code>pip \ninstall -U pdoc</code>.</li>\n<li>Update any <code>.md</code> files included in <code>_init_.py</code>.\n<ul>\n<li>Generally URLs should be absolute, not relative.</li>\n</ul></li>\n<li>At the root level run pdoc <code>pdoc \n--logo https://gutow.github.io/Algebra_with_Sympy/alg_w_sympy.svg\n--logo-link https://gutow.github.io/Algebra_with_Sympy/\n--footer-text \"Algebra with Sympy vX.X.X\" --math -html -o docs algebra_with_sympy</code> \nwhere <code>X.X.X</code> is the version number.</li>\n</ol>\n\n<h3 id=\"tasks-for-documentation\">Tasks for Documentation</h3>\n\n<ul>\n<li>Readme.md &amp; Development Notes.md\n<ul>\n<li>Hard code anchors so that navigation links work on pypi page.</li>\n<li>Use absolute path to github pages for more examples.</li>\n</ul></li>\n</ul>\n\n<h2 id=\"running-tests\">Running Tests</h2>\n\n<ol>\n<li>Install updated pytest in the virtual environment:\n<pre><code>pipenv shell\npip install -U pytest\n</code></pre></li>\n<li>Run standard tests:\n<code>pytest --ignore='Developer Testing' --ignore-glob='*test_preparser.py'</code>.</li>\n<li>Run preparser tests:\n<code>ipython -m pytest tests/test_preparser.py</code></li>\n<li>Run doctests:\n<code>pytest --ignore='tests' --ignore='Developer Testing' \n--ignore-glob='*old*' --doctest-modules</code></li>\n</ol>\n\n<p>You can run all the test using the dotests script: <code>./dotests.sh</code>.</p>\n\n<h2 id=\"building-pypi-package\">Building PyPi package</h2>\n\n<ol>\n<li>Make sure to update the version number in setup.py first.</li>\n<li>Install updated  setuptools and twine in the virtual environment:\n<pre><code>pipenv shell\npip install -U setuptools wheel twine\n</code></pre></li>\n<li>Build the distribution <code>python -m setup sdist bdist_wheel</code>.</li>\n<li>Test it on <code>test.pypi.org</code>.\n<ol>\n<li>Upload it (you will need an account on test.pypi.org):\n<code>python -m twine upload --repository testpypi dist/*</code>.</li>\n<li>Create a new virtual environment and test install into it:\n <pre><code>exit # to get out of the current environment\ncd &lt;somewhere&gt;\nmkdir &lt;new virtual environment&gt;\ncd &lt;new directory&gt;\npipenv shell #creates the new environment and enters it.\npip install -i https://test.pypi.org/..... # copy actual link from the\n                                           # repository on test.pypi.\n</code></pre>\nThere are often install issues because sometimes only older versions of\nsome of the required packages are available on test.pypi.org. If this\nis the only problem change the version to end in <code>rc0</code> for release\ncandidate and try it on the regular pypi.org as described below for\nreleasing on PyPi.</li>\n<li>After install test by running a jupyter notebook in the virtual \nenvironment.</li>\n</ol></li>\n</ol>\n\n<h3 id=\"releasing-on-pypi\">Releasing on PyPi</h3>\n\n<p>Proceed only if testing of the build is successful.</p>\n\n<ol>\n<li>Double check the version number in version.py.</li>\n<li>Rebuild the release: <code>python -m setup sdist bdist_wheel</code>.</li>\n<li>Upload it: <code>python -m twine upload dist/*</code></li>\n<li>Make sure it works by installing it in a clean virtual environment. This\nis the same as on test.pypi.org except without <code>-i https://test.pypy...</code>. If\nit does not work, pull the release.</li>\n</ol>\n"}, {"fullname": "algebra_with_sympy.algebraic_equation", "modulename": "algebra_with_sympy.algebraic_equation", "kind": "module", "doc": "<h1 id=\"algebraic-equations-with-sympy\">Algebraic Equations with SymPy</h1>\n\n<p>These tools define relations that all high school and college students would\nrecognize as mathematical equations. They consist of a left hand side (lhs)\nand a right hand side (rhs) connected by a relation operator such as \"=\". At\npresent the \"=\" relation operator is the only option. The relation operator may\nnot be set.</p>\n\n<p>This class should not be confused with the Boolean class <code>Equality</code>\n(abbreviated <code>Eq</code>) which specifies that the equality of two objects is\n<code>True</code>.</p>\n\n<p>This tool applies operations to both sides of the equation simultaneously, just\nas students are taught to do when attempting to isolate (solve for) a\nvariable. Thus the statement <code>Equation/b</code> yields a new equation\n<code>Equation.lhs/b = Equation.rhs/b</code></p>\n\n<p>The intent is to allow using the mathematical tools in SymPy to rearrange\nequations and perform algebra in a stepwise fashion. In this way more people\ncan successfully perform algebraic rearrangements without stumbling over\nmissed details such as a negative sign. This mimics the capabilities available\nin <a href=\"https://www.sagemath.org/\">SageMath</a> and\n<a href=\"http://maxima.sourceforge.net/\">Maxima</a>.</p>\n"}, {"fullname": "algebra_with_sympy.algebraic_equation.algwsym_config", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "algwsym_config", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "algebra_with_sympy.algebraic_equation.algwsym_config.__init__", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "algwsym_config.__init__", "kind": "function", "doc": "<p>This is a class to hold parameters that control behavior of\nthe algebra_with_sympy package.</p>\n\n<h1 id=\"settings\">Settings</h1>\n\n<h2 id=\"printing\">Printing</h2>\n\n<p>In interactive environments the default output of an equation is a\nhuman readable string with the two sides connected by an equals\nsign or a typeset equation with the two sides connected by an equals sign.\n<code>print(Eqn)</code> or <code>str(Eqn)</code> will return this human readable text version of\nthe equation as well. This is consistent with python standards, but not\nsympy, where <code>str()</code> is supposed to return something that can be\ncopy-pasted into code. If the equation has a declared name as in <code>eq1 =\nEqn(a,b/c)</code> the name will be displayed to the right of the equation in\nparentheses (eg. <code>a = b/c    (eq1)</code>). Use <code>print(repr(Eqn))</code> instead of\n<code>print(Eqn)</code> or <code>repr(Eqn)</code> instead of <code>str(Eqn)</code> to get a code\ncompatible version of the equation.</p>\n\n<p>You can adjust this behvior using some flags that impact output:</p>\n\n<ul>\n<li><code>algwsym_config.output.show_code</code> default is <code>False</code>.</li>\n<li><code>algwsym_config.output.human_text</code> default is <code>True</code>.</li>\n<li><code>algwsym_config.output.label</code> default is <code>True</code>.</li>\n</ul>\n\n<p>In interactive environments you can get both types of output by setting\nthe <code>algwsym_config.output.show_code</code> flag. If this flag is true\ncalls to <code>latex</code> and <code>str</code> will also print an additional line \"code\nversion: <code>repr(Eqn)</code>\". Thus in Jupyter you will get a line of typeset\nmathematics output preceded by the code version that can be copy-pasted.\nDefault is <code>False</code>.</p>\n\n<p>A second flag <code>algwsym_config.output.human_text</code> is useful in\ntext-based interactive environments such as command line python or\nipython. If this flag is true <code>repr</code> will return <code>str</code>. Thus the human\nreadable text will be printed as the output of a line that is an\nexpression containing an equation.\nDefault is <code>True</code>.</p>\n\n<p>Setting both of these flags to true in a command line or ipython\nenvironment will show both the code version and the human readable text.\nThese flags impact the behavior of the <code>print(Eqn)</code> statement.</p>\n\n<p>The third flag <code>algwsym_config.output.label</code> has a default value of\n<code>True</code>. Setting this to <code>False</code> suppresses the labeling of an equation\nwith its python name off to the right of the equation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "algebra_with_sympy.algebraic_equation.algwsym_config.output", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "algwsym_config.output", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "algebra_with_sympy.algebraic_equation.algwsym_config.output.__init__", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "algwsym_config.output.__init__", "kind": "function", "doc": "<p>This holds settings that impact output.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "algebra_with_sympy.algebraic_equation.algwsym_config.output.show_code", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "algwsym_config.output.show_code", "kind": "variable", "doc": "<p>If <code>True</code> code versions of the equation expression will be\noutput in interactive environments. Default = <code>False</code>.</p>\n", "default_value": "False"}, {"fullname": "algebra_with_sympy.algebraic_equation.algwsym_config.output.human_text", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "algwsym_config.output.human_text", "kind": "variable", "doc": "<p>If <code>True</code> the human readable equation expression will be\noutput in text interactive environments. Default = <code>False</code>.</p>\n", "default_value": "True"}, {"fullname": "algebra_with_sympy.algebraic_equation.algwsym_config.output.solve_to_list", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "algwsym_config.output.solve_to_list", "kind": "variable", "doc": "<p>If <code>True</code> the results of a call to <code>solve(...)</code> will return a\nPython <code>list</code> rather than a Sympy <code>FiniteSet</code>. This recovers\nbehavior for versions before 0.11.0.</p>\n\n<p>Note: setting this <code>True</code> means that expressions within the\nreturned solutions will not be pretty-printed in Jupyter and\nIPython.</p>\n", "default_value": "False"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation", "kind": "class", "doc": "<p>This class defines an equation with a left-hand-side (tlhs) and a right-\nhand-side (rhs) connected by the \"=\" operator (e.g. <code>p*V = n*R*T</code>).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This class defines relations that all high school and college students\nwould recognize as mathematical equations. At present only the \"=\" relation\noperator is recognized.</p>\n\n<p>This class is intended to allow using the mathematical tools in SymPy to\nrearrange equations and perform algebra in a stepwise fashion. In this\nway more people can successfully perform algebraic rearrangements without\nstumbling over missed details such as a negative sign.</p>\n\n<p>Create an equation with the call <code>Equation(lhs,rhs)</code>, where <code>lhs</code> and\n<code>rhs</code> are any valid Sympy expression. <code>Eqn(...)</code> is a synonym for\n<code>Equation(...)</code>.</p>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>lhs: sympy expression, <code>class Expr</code>.\nrhs: sympy expression, <code>class Expr</code>.\nkwargs:</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>NOTE: All the examples below are in vanilla python. You can get human\nreadable eqautions \"lhs = rhs\" in vanilla python by adjusting the settings\nin <code>algwsym_config</code> (see it's documentation). Output is human readable by\ndefault in IPython and Jupyter environments.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">algebra_with_sympy</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s1\">&#39;a b c x&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Equation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(a, b/c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">=</span><span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span>\n<span class=\"go\">Equation(a, b/c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">*</span><span class=\"n\">c</span>\n<span class=\"go\">Equation(a*c, b)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">*</span><span class=\"n\">t</span>\n<span class=\"go\">Equation(a*c, b)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(exp(a), exp(b/c))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">))</span>\n<span class=\"go\">Equation(a, b/c)</span>\n</code></pre>\n</div>\n\n<p>Simplification and Expansion</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span>\n<span class=\"go\">Equation(x**2 - 1, c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">Equation((x**2 - 1)/(x + 1), c/(x + 1))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">simplify</span><span class=\"p\">()</span>\n<span class=\"go\">Equation(x - 1, c/(x + 1))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"go\">Equation(x - 1, c/(x + 1))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">()</span>\n<span class=\"go\">Equation(x**2/(x + 1) - 1/(x + 1), c/(x + 1))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"go\">Equation(x**2/(x + 1) - 1/(x + 1), c/(x + 1))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">factor</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"go\">Equation((x - 1)*(x + 1), c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">factor</span><span class=\"p\">()</span>\n<span class=\"go\">Equation((x - 1)*(x + 1), c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span><span class=\"n\">c</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f2</span>\n<span class=\"go\">Equation(a*x**2 + b*x + c + x**2 - 1, a*x**2 + b*x + 2*c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">f2</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(b*x + c + x**2*(a + 1) - 1, a*x**2 + b*x + 2*c)</span>\n</code></pre>\n</div>\n\n<p>Apply operation to only one side</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">poly</span> <span class=\"o\">=</span> <span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">applyrhs</span><span class=\"p\">(</span><span class=\"n\">factor</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(a*x**2 + b*x + c*x**2, x*(c + x**2*(a + b)))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">applylhs</span><span class=\"p\">(</span><span class=\"n\">factor</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(x*(a*x + b + c*x), a*x**3 + b*x**3 + c*x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">applylhs</span><span class=\"p\">(</span><span class=\"n\">collect</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(b*x + x**2*(a + c), a*x**3 + b*x**3 + c*x)</span>\n</code></pre>\n</div>\n\n<p><code>.apply...</code> also works with user defined python functions</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">addsquare</span><span class=\"p\">(</span><span class=\"n\">eqn</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">return</span> <span class=\"n\">eqn</span><span class=\"o\">+</span><span class=\"n\">eqn</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">addsquare</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(a**2 + a, b**2/c**2 + b/c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">applyrhs</span><span class=\"p\">(</span><span class=\"n\">addsquare</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(a, b**2/c**2 + b/c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">addsquare</span><span class=\"p\">,</span> <span class=\"n\">side</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;rhs&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(a, b**2/c**2 + b/c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">applylhs</span><span class=\"p\">(</span><span class=\"n\">addsquare</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(a**2 + a, b/c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">addsquare</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(a**2 + a, b**2/c**2 + b/c)</span>\n</code></pre>\n</div>\n\n<p>Inaddition to <code>.apply...</code> there is also the less general <code>.do</code>,\n<code>.dolhs</code>, <code>.dorhs</code>, which only works for operations defined on the\n<code>Expr</code> class (e.g.<code>.collect(), .factor(), .expand()</code>, etc...).</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">dolhs</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(b*x + x**2*(a + c), a*x**3 + b*x**3 + c*x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">dorhs</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(a*x**2 + b*x + c*x**2, c*x + x**3*(a + b))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">do</span><span class=\"o\">.</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(b*x + x**2*(a + c), c*x + x**3*(a + b))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">poly</span><span class=\"o\">.</span><span class=\"n\">dorhs</span><span class=\"o\">.</span><span class=\"n\">factor</span><span class=\"p\">()</span>\n<span class=\"go\">Equation(a*x**2 + b*x + c*x**2, x*(a*x**2 + b*x**2 + c))</span>\n</code></pre>\n</div>\n\n<p><code>poly.do.exp()</code> or other sympy math functions will raise an error.</p>\n\n<p>Rearranging an equation (simple example made complicated as illustration)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">V</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s1\">&#39;p V n R T&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq1</span><span class=\"o\">=</span><span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">*</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"n\">R</span><span class=\"o\">*</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq1</span>\n<span class=\"go\">Equation(V*p, R*T*n)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq2</span> <span class=\"o\">=</span><span class=\"n\">eq1</span><span class=\"o\">/</span><span class=\"n\">V</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq2</span>\n<span class=\"go\">Equation(p, R*T*n/V)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq3</span> <span class=\"o\">=</span> <span class=\"n\">eq2</span><span class=\"o\">/</span><span class=\"n\">R</span><span class=\"o\">/</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq3</span>\n<span class=\"go\">Equation(p/(R*T), n/V)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq4</span> <span class=\"o\">=</span> <span class=\"n\">eq3</span><span class=\"o\">*</span><span class=\"n\">R</span><span class=\"o\">/</span><span class=\"n\">p</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq4</span>\n<span class=\"go\">Equation(1/T, R*n/(V*p))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">eq4</span>\n<span class=\"go\">Equation(T, V*p/(R*n))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq5</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">eq4</span> <span class=\"o\">-</span> <span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq5</span>\n<span class=\"go\">Equation(0, -T + V*p/(R*n))</span>\n</code></pre>\n</div>\n\n<p>Substitution (#'s and units)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">atm</span><span class=\"p\">,</span> <span class=\"n\">mol</span><span class=\"p\">,</span> <span class=\"n\">K</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s1\">&#39;L atm mol K&#39;</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"c1\"># units</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq2</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">({</span><span class=\"n\">R</span><span class=\"p\">:</span><span class=\"mf\">0.08206</span><span class=\"o\">*</span><span class=\"n\">L</span><span class=\"o\">*</span><span class=\"n\">atm</span><span class=\"o\">/</span><span class=\"n\">mol</span><span class=\"o\">/</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"mi\">273</span><span class=\"o\">*</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">:</span><span class=\"mf\">1.00</span><span class=\"o\">*</span><span class=\"n\">mol</span><span class=\"p\">,</span><span class=\"n\">V</span><span class=\"p\">:</span><span class=\"mf\">24.0</span><span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">})</span>\n<span class=\"go\">Equation(p, 0.9334325*atm)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq2</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">({</span><span class=\"n\">R</span><span class=\"p\">:</span><span class=\"mf\">0.08206</span><span class=\"o\">*</span><span class=\"n\">L</span><span class=\"o\">*</span><span class=\"n\">atm</span><span class=\"o\">/</span><span class=\"n\">mol</span><span class=\"o\">/</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"mi\">273</span><span class=\"o\">*</span><span class=\"n\">K</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">:</span><span class=\"mf\">1.00</span><span class=\"o\">*</span><span class=\"n\">mol</span><span class=\"p\">,</span><span class=\"n\">V</span><span class=\"p\">:</span><span class=\"mf\">24.0</span><span class=\"o\">*</span><span class=\"n\">L</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(p, 0.9334*atm)</span>\n</code></pre>\n</div>\n\n<p>Substituting an equation into another equation:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">P</span><span class=\"p\">,</span> <span class=\"n\">P1</span><span class=\"p\">,</span> <span class=\"n\">P2</span><span class=\"p\">,</span> <span class=\"n\">A1</span><span class=\"p\">,</span> <span class=\"n\">A2</span><span class=\"p\">,</span> <span class=\"n\">E1</span><span class=\"p\">,</span> <span class=\"n\">E2</span> <span class=\"o\">=</span> <span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s2\">&quot;P, P1, P2, A1, A2, E1, E2&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq1</span> <span class=\"o\">=</span> <span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">,</span> <span class=\"n\">P1</span> <span class=\"o\">+</span> <span class=\"n\">P2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq2</span> <span class=\"o\">=</span> <span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">P1</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">A1</span> <span class=\"o\">*</span> <span class=\"n\">E1</span><span class=\"p\">),</span> <span class=\"n\">P2</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">A2</span> <span class=\"o\">*</span> <span class=\"n\">E2</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">P1_val</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">eq1</span> <span class=\"o\">-</span> <span class=\"n\">P2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">swap</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">P1_val</span>\n<span class=\"go\">Equation(P1, P - P2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq2</span> <span class=\"o\">=</span> <span class=\"n\">eq2</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">P1_val</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq2</span>\n<span class=\"go\">Equation((P - P2)/(A1*E1), P2/(A2*E2))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">P2_val</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">eq2</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">P1_val</span><span class=\"p\">),</span> <span class=\"n\">P2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">P2_val</span>\n<span class=\"go\">Equation(P2, A2*E2*P/(A1*E1 + A2*E2))</span>\n</code></pre>\n</div>\n\n<p>Combining equations (Math with equations: lhs with lhs and rhs with rhs)</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span>\n<span class=\"go\">Equation(a*c, b/c**2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span>\n<span class=\"go\">Equation(a, b/c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">+</span><span class=\"n\">t</span>\n<span class=\"go\">Equation(a*c + a, b/c + b/c**2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">/</span><span class=\"n\">t</span>\n<span class=\"go\">Equation(c, 1/c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">**</span><span class=\"n\">q</span>\n<span class=\"go\">Equation(a**(a*c), (b/c)**(b/c**2))</span>\n</code></pre>\n</div>\n\n<p>Utility operations</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">reversed</span>\n<span class=\"go\">Equation(b/c, a)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">swap</span>\n<span class=\"go\">Equation(b/c, a)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">lhs</span>\n<span class=\"go\">a</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">rhs</span>\n<span class=\"go\">b/c</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">as_Boolean</span><span class=\"p\">()</span>\n<span class=\"go\">Eq(a, b/c)</span>\n</code></pre>\n</div>\n\n<p><code>.check()</code> convenience method for <code>.as_Boolean().simplify()</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Equation</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n\n<p>Differentiation\nDifferentiation is applied to both sides if the wrt variable appears on\nboth sides.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span>\n<span class=\"go\">Equation(a*c, b/c**2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(Derivative(a*c, b), c**(-2))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(a, -2*b/c**3)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">),</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(Derivative(log(a*c), b), 1/b)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(Derivative(a, c), 6*b/c**4)</span>\n</code></pre>\n</div>\n\n<p>If you specify multiple differentiation all at once the assumption\nis order of differentiation matters and the lhs will not be\nevaluated.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(Derivative(a*c, b, c), -2/c**3)</span>\n</code></pre>\n</div>\n\n<p>To overcome this specify the order of operations.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">),</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(Derivative(a, b), -2/c**3)</span>\n</code></pre>\n</div>\n\n<p>But the reverse order returns an unevaulated lhs (a may depend on b).</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">),</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(Derivative(a*c, b, c), -2/c**3)</span>\n</code></pre>\n</div>\n\n<p>Integration can only be performed on one side at a time.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">integrate</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">side</span><span class=\"o\">=</span><span class=\"s1\">&#39;rhs&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">b**2/(2*c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">integrate</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">side</span><span class=\"o\">=</span><span class=\"s1\">&#39;lhs&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">a*b*c</span>\n</code></pre>\n</div>\n\n<p>Make a pretty statement of integration from an equation</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">Integral</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">),</span><span class=\"n\">integrate</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">side</span><span class=\"o\">=</span><span class=\"s1\">&#39;rhs&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">Equation(Integral(a*c, b), b**2/(2*c))</span>\n</code></pre>\n</div>\n\n<p>Integration of each side with respect to different variables</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">dorhs</span><span class=\"o\">.</span><span class=\"n\">integrate</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dolhs</span><span class=\"o\">.</span><span class=\"n\">integrate</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(a**2*c/2, b**2/(2*c))</span>\n</code></pre>\n</div>\n\n<p>Automatic solutions using sympy solvers. THIS IS EXPERIMENTAL. Please\nreport issues at <a href=\"https://github.com/gutow/Algebra_with_Sympy/issues\">https://github.com/gutow/Algebra_with_Sympy/issues</a>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tosolv</span> <span class=\"o\">=</span> <span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">/</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">tosolv</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">FiniteSet(Equation(a, b/2 - sqrt(b**2 + 4*c)/2), Equation(a, b/2 + sqrt(b**2 + 4*c)/2))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">tosolv</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">FiniteSet(Equation(b, (a**2 - c)/a))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">tosolv</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"go\">FiniteSet(Equation(c, a**2 - a*b))</span>\n</code></pre>\n</div>\n", "bases": "sympy.core.basic.Basic, sympy.core.evalf.EvalfMixin"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.lhs", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.lhs", "kind": "variable", "doc": "<p>Returns the lhs of the equation.</p>\n"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.rhs", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.rhs", "kind": "variable", "doc": "<p>Returns the rhs of the equation.</p>\n"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.as_Boolean", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.as_Boolean", "kind": "function", "doc": "<p>Converts the equation to an Equality.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.check", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.check", "kind": "function", "doc": "<p>Forces simplification and casts as <code>Equality</code> to check validity.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>kwargs any appropriate for <code>Equality</code>.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>True, False or an unevaluated <code>Equality</code> if truth cannot be determined.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.reversed", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.reversed", "kind": "variable", "doc": "<p>Swaps the lhs and the rhs.</p>\n"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.swap", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.swap", "kind": "variable", "doc": "<p>Synonym for <code>.reversed</code></p>\n"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.apply", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.apply", "kind": "function", "doc": "<p>Apply an operation/function/method to the equation returning the\nresulting equation.</p>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>func: object\n    object to apply usually a function</p>\n\n<p>args: as necessary for the function</p>\n\n<p>side: 'both', 'lhs', 'rhs', optional\n    Specifies which side of the equation the operation will be applied\n    to. Default is 'both'.</p>\n\n<p>kwargs: as necessary for the function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">side</span><span class=\"o\">=</span><span class=\"s1\">&#39;both&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.applylhs", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.applylhs", "kind": "function", "doc": "<p>If lhs side of the equation has a defined subfunction (attribute) of\nname <code>func</code>, that will be applied instead of the global function.\nThe operation is applied to only the lhs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.applyrhs", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.applyrhs", "kind": "function", "doc": "<p>If rhs side of the equation has a defined subfunction (attribute) of\nname <code>func</code>, that will be applied instead of the global function.\nThe operation is applied to only the rhs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.subs", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.subs", "kind": "function", "doc": "<p>Substitutes old for new in an equation after sympifying args.</p>\n\n<p><code>args</code> is either:</p>\n\n<ul>\n<li>one or more arguments of type <code>Equation(old, new)</code>.</li>\n<li>two arguments, e.g. foo.subs(old, new)</li>\n<li><p>one iterable argument, e.g. foo.subs(iterable). The iterable may be:</p>\n\n<ul>\n<li>an iterable container with (old, new) pairs. In this case the\nreplacements are processed in the order given with successive\npatterns possibly affecting replacements already made.</li>\n<li>a dict or set whose key/value items correspond to old/new pairs.\nIn this case the old/new pairs will be sorted by op count and in\ncase of a tie, by number of args and the default_sort_key. The\nresulting sorted list is then processed as an iterable container\n(see previous).</li>\n</ul></li>\n</ul>\n\n<p>If the keyword <code>simultaneous</code> is True, the subexpressions will not be\nevaluated until all the substitutions have been made.</p>\n\n<p>Please, read <code>help(Expr.subs)</code> for more examples.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">algebra_with_sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Equation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq</span> <span class=\"o\">=</span> <span class=\"n\">Equation</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Substitute a single value:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(a + x, 4*c)</span>\n</code></pre>\n</div>\n\n<p>Substitute a multiple values:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">([(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)])</span>\n<span class=\"go\">Equation(x + 2, 4*c)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">({</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">})</span>\n<span class=\"go\">Equation(x + 2, 4*c)</span>\n</code></pre>\n</div>\n\n<p>Substitute an equation into another equation:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq2</span> <span class=\"o\">=</span> <span class=\"n\">Equation</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">eq2</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(4, b*c)</span>\n</code></pre>\n</div>\n\n<p>Substitute multiple equations into another equation:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq1</span> <span class=\"o\">=</span> <span class=\"n\">Equation</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq2</span> <span class=\"o\">=</span> <span class=\"n\">Equation</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq3</span> <span class=\"o\">=</span> <span class=\"n\">Equation</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq1</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">eq2</span><span class=\"p\">,</span> <span class=\"n\">eq3</span><span class=\"p\">)</span>\n<span class=\"go\">Equation(c + 9, 5*a*c*x)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.expand", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.expand", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.simplify", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.simplify", "kind": "function", "doc": "<p>See the simplify function in sympy.simplify</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.factor", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.factor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.collect", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.collect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.evalf", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.evalf", "kind": "function", "doc": "<p>Evaluate the given formula to an accuracy of <em>n</em> digits.</p>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>subs : dict, optional\n    Substitute numerical values for symbols, e.g.\n    <code>subs={x:3, y:1+pi}</code>. The substitutions must be given as a\n    dictionary.</p>\n\n<p>maxn : int, optional\n    Allow a maximum temporary working precision of maxn digits.</p>\n\n<p>chop : bool or number, optional\n    Specifies how to replace tiny real or imaginary parts in\n    subresults by exact zeros.</p>\n\n<pre><code>When ``True`` the chop value defaults to standard precision.\n\nOtherwise the chop value is used to determine the\nmagnitude of \"small\" for purposes of chopping.\n\n&gt;&gt;&gt; from sympy import N\n&gt;&gt;&gt; x = 1e-4\n&gt;&gt;&gt; N(x, chop=True)\n0.000100000000000000\n&gt;&gt;&gt; N(x, chop=1e-5)\n0.000100000000000000\n&gt;&gt;&gt; N(x, chop=1e-4)\n0\n</code></pre>\n\n<p>strict : bool, optional\n    Raise <code>PrecisionExhausted</code> if any subresult fails to\n    evaluate to full accuracy, given the available maxprec.</p>\n\n<p>quad : str, optional\n    Choose algorithm for numerical quadrature. By default,\n    tanh-sinh quadrature is used. For oscillatory\n    integrals on an infinite interval, try <code>quad='osc'</code>.</p>\n\n<p>verbose : bool, optional\n    Print debug information.</p>\n\n<h1 id=\"notes\">Notes</h1>\n\n<p>When Floats are naively substituted into an expression,\nprecision errors may adversely affect the result. For example,\nadding 1e16 (a Float) to 1 will truncate to 1e16; if 1e16 is\nthen subtracted, the result will be 0.\nThat is exactly what happens in the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mf\">1e16</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"mf\">1e16</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<p>Using the subs argument for evalf is the accurate way to\nevaluate such an expression:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"n\">subs</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"go\">1.00000000000000</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equation.n", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equation.n", "kind": "function", "doc": "<p>Evaluate the given formula to an accuracy of <em>n</em> digits.</p>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>subs : dict, optional\n    Substitute numerical values for symbols, e.g.\n    <code>subs={x:3, y:1+pi}</code>. The substitutions must be given as a\n    dictionary.</p>\n\n<p>maxn : int, optional\n    Allow a maximum temporary working precision of maxn digits.</p>\n\n<p>chop : bool or number, optional\n    Specifies how to replace tiny real or imaginary parts in\n    subresults by exact zeros.</p>\n\n<pre><code>When ``True`` the chop value defaults to standard precision.\n\nOtherwise the chop value is used to determine the\nmagnitude of \"small\" for purposes of chopping.\n\n&gt;&gt;&gt; from sympy import N\n&gt;&gt;&gt; x = 1e-4\n&gt;&gt;&gt; N(x, chop=True)\n0.000100000000000000\n&gt;&gt;&gt; N(x, chop=1e-5)\n0.000100000000000000\n&gt;&gt;&gt; N(x, chop=1e-4)\n0\n</code></pre>\n\n<p>strict : bool, optional\n    Raise <code>PrecisionExhausted</code> if any subresult fails to\n    evaluate to full accuracy, given the available maxprec.</p>\n\n<p>quad : str, optional\n    Choose algorithm for numerical quadrature. By default,\n    tanh-sinh quadrature is used. For oscillatory\n    integrals on an infinite interval, try <code>quad='osc'</code>.</p>\n\n<p>verbose : bool, optional\n    Print debug information.</p>\n\n<h1 id=\"notes\">Notes</h1>\n\n<p>When Floats are naively substituted into an expression,\nprecision errors may adversely affect the result. For example,\nadding 1e16 (a Float) to 1 will truncate to 1e16; if 1e16 is\nthen subtracted, the result will be 0.\nThat is exactly what happens in the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"mf\">1e16</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"mf\">1e16</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<p>Using the subs argument for evalf is the accurate way to\nevaluate such an expression:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"n\">subs</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"go\">1.00000000000000</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.solve", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "solve", "kind": "function", "doc": "<p>Override of sympy <code>solve()</code>.</p>\n\n<p>If passed an expression and variable(s) to solve for it behaves\nalmost the same as normal solve with <code>dict = True</code>, except that solutions\nare wrapped in a FiniteSet() to guarantee that the output will be pretty\nprinted in Jupyter like environments.</p>\n\n<p>If passed an equation or equations it returns solutions as a\n<code>FiniteSet()</code> of solutions, where each solution is represented by an\nequation or set of equations.</p>\n\n<p>To get a Python <code>list</code> of solutions (pre-0.11.0 behavior) rather than a\n<code>FiniteSet</code> issue the command <code>algwsym_config.output.solve_to_list = True</code>.\nThis also prevents pretty-printing in IPython and Jupyter.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;a b c x y&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">displayhook</span> <span class=\"o\">=</span> <span class=\"n\">__command_line_printing__</span> <span class=\"c1\"># set by default on normal initialization.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq1</span> <span class=\"o\">=</span> <span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"p\">),</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">eq2</span> <span class=\"o\">=</span> <span class=\"n\">Eqn</span><span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">),</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">((</span><span class=\"n\">eq1</span><span class=\"p\">,</span><span class=\"n\">eq2</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>Default human readable output on command line</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span>\n<span class=\"go\">{{x = -3, y = 3}, {x = -1, y = -1}, {x = 1, y = 1}, {x = 3, y = -3}}</span>\n</code></pre>\n</div>\n\n<p>To get raw output turn off by setting</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">algwsym_config</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">human_text</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span>\n<span class=\"go\">FiniteSet(FiniteSet(Equation(x, -3), Equation(y, 3)), FiniteSet(Equation(x, -1), Equation(y, -1)), FiniteSet(Equation(x, 1), Equation(y, 1)), FiniteSet(Equation(x, 3), Equation(y, -3)))</span>\n</code></pre>\n</div>\n\n<p>Pre-0.11.0 behavior where a python list of solutions is returned</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">algwsym_config</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">solve_to_list</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">solve</span><span class=\"p\">((</span><span class=\"n\">eq1</span><span class=\"p\">,</span><span class=\"n\">eq2</span><span class=\"p\">))</span>\n<span class=\"go\">[[Equation(x, -3), Equation(y, 3)], [Equation(x, -1), Equation(y, -1)], [Equation(x, 1), Equation(y, 1)], [Equation(x, 3), Equation(y, -3)]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">algwsym_config</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">solve_to_list</span> <span class=\"o\">=</span> <span class=\"kc\">False</span> <span class=\"c1\"># reset to default</span>\n</code></pre>\n</div>\n\n<p><code>algwsym_config.output.human_text = True</code> with\n<code>algwsym_config.output.how_code=True</code> shows both.\nIn Jupyter-like environments <code>show_code=True</code> yields the Raw output and\na typeset version. If <code>show_code=False</code> (the default) only the\ntypeset version is shown in Jupyter.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">algwsym_config</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">show_code</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">algwsym_config</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">human_text</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span>\n<span class=\"go\">Code version: FiniteSet(FiniteSet(Equation(x, -3), Equation(y, 3)), FiniteSet(Equation(x, -1), Equation(y, -1)), FiniteSet(Equation(x, 1), Equation(y, 1)), FiniteSet(Equation(x, 3), Equation(y, -3)))</span>\n<span class=\"go\">{{x = -3, y = 3}, {x = -1, y = -1}, {x = 1, y = 1}, {x = 3, y = -3}}</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">symbols</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">flags</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.solveset", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "solveset", "kind": "function", "doc": "<p>Very experimental override of sympy solveset, which we hope will replace\nsolve. Much is not working. It is not clear how to input a system of\nequations unless you directly select <code>linsolve</code>, etc...</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">symbols</span>, </span><span class=\"param\"><span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">Complexes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.sqrt", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "sqrt", "kind": "function", "doc": "<p>Override of sympy convenience function <code>sqrt</code>. Simply divides equations\ninto two sides if <code>arg</code> is an instance of <code>Equation</code>. This avoids an\nissue with the way sympy is delaying specialized applications of _Pow_ on\nobjects that are not basic sympy expressions.\nReturns the principal square root.</p>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>evaluate : bool, optional\n    The parameter determines if the expression should be evaluated.\n    If <code>None</code>, its value is taken from\n    <code>global_parameters.evaluate</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">sqrt</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">S</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n<span class=\"go\">x</span>\n</code></pre>\n</div>\n\n<p>Note that sqrt(x**2) does not simplify to x.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(x**2)</span>\n</code></pre>\n</div>\n\n<p>This is because the two are not equal to each other in general.\nFor example, consider x == -1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Eq</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Eq</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n\n<p>This is because sqrt computes the principal square root, so the square may\nput the argument in a different branch.  This identity does hold if x is\npositive:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">y</span>\n</code></pre>\n</div>\n\n<p>You can force this simplification by using the powdenest() function with\nthe force option set to True:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">powdenest</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(x**2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">powdenest</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">force</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">x</span>\n</code></pre>\n</div>\n\n<p>To get both branches of the square root you can use the rootof function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">rootof</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">rootof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"go\">[-sqrt(3), sqrt(3)]</span>\n</code></pre>\n</div>\n\n<p>Although <code>sqrt</code> is printed, there is no <code>sqrt</code> function so looking for\n<code>sqrt</code> in an expression will fail:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.utilities.misc</span> <span class=\"kn\">import</span> <span class=\"n\">func_name</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">func_name</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">&#39;Pow&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">has</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n\n<p>To find <code>sqrt</code> look for <code>Pow</code> with an exponent of <code>1/2</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">is_Pow</span> <span class=\"ow\">and</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">Half</span><span class=\"p\">)</span>\n<span class=\"go\">{1/sqrt(x)}</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sympy.polys.rootoftools.rootof, root, real_root</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">evaluate</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.root", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "root", "kind": "function", "doc": "<p>Override of sympy convenience function <code>root</code>. Simply divides equations\ninto two sides if <code>arg</code>  or <code>n</code> is an instance of <code>Equation</code>. This\navoids an issue with the way sympy is delaying specialized applications\nof _Pow_ on objects that are not basic sympy expressions.\nReturns the <em>k</em>-th <em>n</em>-th root of <code>arg</code>.</p>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>k : int, optional\n    Should be an integer in ${0, 1, ..., n-1}$.\n    Defaults to the principal root if $0$.</p>\n\n<p>evaluate : bool, optional\n    The parameter determines if the expression should be evaluated.\n    If <code>None</code>, its value is taken from\n    <code>global_parameters.evaluate</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">Rational</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">root</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">root</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">x**(1/3)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">root</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">x**(1/n)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">root</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">Rational</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">x**(-3/2)</span>\n</code></pre>\n</div>\n\n<p>To get the k-th n-th root, specify k:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">root</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">-(-1)**(2/3)*2**(1/3)</span>\n</code></pre>\n</div>\n\n<p>To get all n n-th roots you can use the rootof function.\nThe following examples show the roots of unity for n\nequal 2, 3 and 4:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">rootof</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">rootof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"go\">[-1, 1]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">rootof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"go\">[1, -1/2 - sqrt(3)*I/2, -1/2 + sqrt(3)*I/2]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">rootof</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">4</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"go\">[-1, 1, -I, I]</span>\n</code></pre>\n</div>\n\n<p>SymPy, like other symbolic algebra systems, returns the\ncomplex root of negative numbers. This is the principal\nroot and differs from the text-book result that one might\nbe expecting. For example, the cube root of -8 does not\ncome back as -2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">root</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">2*(-1)**(1/3)</span>\n</code></pre>\n</div>\n\n<p>The real_root function can be used to either make the principal\nresult real (or simply to return the real root directly):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">real_root</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">real_root</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span>\n<span class=\"go\">-2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">real_root</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">-2</span>\n</code></pre>\n</div>\n\n<p>Alternatively, the n//2-th n-th root of a negative number can be\ncomputed with root:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">root</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">-2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sympy.polys.rootoftools.rootof\nsympy.core.power.integer_nthroot\nsqrt, real_root</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">evaluate</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Heaviside", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Heaviside", "kind": "function", "doc": "<p>Overide of the Heaviside function as implemented in Sympy. Get a recursion\nerror if use the normal class extension of a function to do this.</p>\n\n<p>Heaviside step function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Heaviside step function has the following properties:</p>\n\n<p>1) $\\frac{d}{d x} \\theta(x) = \\delta(x)$\n2) $\\theta(x) = \\begin{cases} 0 &amp; \\text{for}\\: x &lt; 0 \\ \\frac{1}{2} &amp;\n   \\text{for}\\: x = 0 \\1 &amp; \\text{for}\\: x &gt; 0 \\end{cases}$\n3) $\\frac{d}{d x} \\max(x, 0) = \\theta(x)$</p>\n\n<p>Heaviside(x) is printed as $\\theta(x)$ with the SymPy LaTeX printer.</p>\n\n<p>The value at 0 is set differently in different fields. SymPy uses 1/2,\nwhich is a convention from electronics and signal processing, and is\nconsistent with solving improper integrals by Fourier transform and\nconvolution.</p>\n\n<p>To specify a different value of Heaviside at <code>x=0</code>, a second argument\ncan be given. Using <code>Heaviside(x, nan)</code> gives an expression that will\nevaluate to nan for x=0.</p>\n\n<p><em>Changed in version 1.9 <code>Heaviside(0)</code> now returns 1/2 (before: undefined).</em></p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Heaviside</span><span class=\"p\">,</span> <span class=\"n\">nan</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Heaviside</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Heaviside</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Heaviside</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Heaviside</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">nan</span><span class=\"p\">)</span>\n<span class=\"go\">nan</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">Heaviside</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">Heaviside</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">Heaviside</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"go\">Heaviside(x, 1) + 1</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>DiracDelta</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.collect", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "collect", "kind": "function", "doc": "<p>Override of sympy <code>collect()</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">expr</span>,</span><span class=\"param\">\t<span class=\"n\">syms</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">evaluate</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exact</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">distribute_order_term</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equality", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equality", "kind": "class", "doc": "<p>Extension of Equality class to include the ability to convert it to an\nEquation.</p>\n", "bases": "sympy.core.relational.Equality"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equality.to_Equation", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equality.to_Equation", "kind": "function", "doc": "<p>Return: recasts the Equality as an Equation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.Equality.to_Eqn", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Equality.to_Eqn", "kind": "function", "doc": "<p>Synonym for to_Equation.\nReturn: recasts the Equality as an Equation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.EqnFunction", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "EqnFunction", "kind": "class", "doc": "<p>Extension of the sympy Function class to understand equations. Each\nsympy function impacted by this extension is listed in the documentation\nthat follows.</p>\n", "bases": "sympy.core.function.Function"}, {"fullname": "algebra_with_sympy.algebraic_equation.str_to_extend_sympy_func", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "str_to_extend_sympy_func", "kind": "function", "doc": "<p>Generates the string command to execute for a sympy function to\ngain the properties of the extended EqnFunction class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.algebraic_equation.factorial", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "factorial", "kind": "class", "doc": "<p>Implementation of factorial function over nonnegative integers.\nBy convention (consistent with the gamma function and the binomial\ncoefficients), factorial of a negative integer is complex infinity.</p>\n\n<p>The factorial is very important in combinatorics where it gives\nthe number of ways in which <code>n</code> objects can be permuted. It also\narises in calculus, probability, number theory, etc.</p>\n\n<p>There is strict relation of factorial with gamma function. In\nfact <code>n! = gamma(n+1)</code> for nonnegative integers. Rewrite of this\nkind is very useful in case of combinatorial simplification.</p>\n\n<p>Computation of the factorial is done using two algorithms. For\nsmall arguments a precomputed look up table is used. However for bigger\ninput algorithm Prime-Swing is used. It is the fastest algorithm\nknown and computes <code>n!</code> via prime factorization of special class\nof numbers, called here the 'Swing Numbers'.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">factorial</span><span class=\"p\">,</span> <span class=\"n\">S</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"go\">5040</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">zoo</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">factorial(n)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">factorial(2*n)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">factorial</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">factorial(1/2)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>factorial2, RisingFactorial, FallingFactorial</p>\n", "bases": "sympy.functions.combinatorial.factorials.factorial, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.factorial2", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "factorial2", "kind": "class", "doc": "<p>The double factorial <code>n!!</code>, not to be confused with <code>(n!)!</code></p>\n\n<p>The double factorial is defined for nonnegative integers and for odd\nnegative integers as:</p>\n\n<p>$$n!! = \\begin{cases} 1 &amp; n = 0 \\n(n-2)(n-4) \\cdots 1 &amp; n\\ \\text{positive odd} \\\nn(n-2)(n-4) \\cdots 2 &amp; n\\ \\text{positive even} \\\n(n+2)!!/(n+2) &amp; n\\ \\text{negative odd} \\end{cases}$$</p>\n\n<h1 id=\"references\">References</h1>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">factorial2</span><span class=\"p\">,</span> <span class=\"n\">var</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span>\n<span class=\"go\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">factorial2</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">factorial2(n + 1)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">factorial2</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">15</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">factorial2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">factorial2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">1/3</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>factorial, RisingFactorial, FallingFactorial</p>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.factorials.factorial2, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.rf", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "rf", "kind": "class", "doc": "<p>Rising factorial (also called Pochhammer symbol <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup>) is a double valued\nfunction arising in concrete mathematics, hypergeometric functions\nand series expansions. It is defined by:</p>\n\n<p>$$\\texttt{rf(y, k)} = (x)^k = x \\cdot (x+1) \\cdots (x+k-1)$$</p>\n\n<p>where <code>x</code> can be arbitrary expression and <code>k</code> is an integer. For\nmore information check \"Concrete mathematics\" by Graham, pp. 66\nor visit <a href=\"http://mathworld.wolfram.com/RisingFactorial.html\">http://mathworld.wolfram.com/RisingFactorial.html</a> page.</p>\n\n<p>When <code>x</code> is a <code>~.Poly</code> instance of degree $\\ge 1$ with a single variable,\n<code>(x)^k = x(y) \\cdot x(y+1) \\cdots x(y+k-1)</code>, where <code>y</code> is the\nvariable of <code>x</code>. This is as described in <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">Poly</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rf</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rf</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">120</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rf</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rf</span><span class=\"p\">(</span><span class=\"n\">Poly</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">Poly(x**6 + 3*x**5 + 3*x**4 + x**3, x, domain=&#39;ZZ&#39;)</span>\n</code></pre>\n</div>\n\n<p>Rewriting is complicated unless the relationship between\nthe arguments is known, but rising factorial can\nbe rewritten in terms of gamma, factorial, binomial,\nand falling factorial.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">factorial</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">binomial</span><span class=\"p\">,</span> <span class=\"n\">gamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">rf</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">factorial</span><span class=\"p\">,</span> <span class=\"n\">binomial</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span> <span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">RisingFactorial(n, n + 2)</span>\n<span class=\"go\">FallingFactorial(2*n + 1, n + 2)</span>\n<span class=\"go\">factorial(2*n + 1)/factorial(n - 1)</span>\n<span class=\"go\">binomial(2*n + 1, n + 2)*factorial(n + 2)</span>\n<span class=\"go\">gamma(2*n + 2)/gamma(n)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>factorial, factorial2, FallingFactorial</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://en.wikipedia.org/wiki/Pochhammer_symbol\">https://en.wikipedia.org/wiki/Pochhammer_symbol</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p>Peter Paule, \"Greatest Factorial Factorization and Symbolic\nSummation\", Journal of Symbolic Computation, vol. 20, pp. 235-268,\n1995.&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.factorials.RisingFactorial, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.ff", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "ff", "kind": "class", "doc": "<p>Falling factorial (related to rising factorial) is a double valued\nfunction arising in concrete mathematics, hypergeometric functions\nand series expansions. It is defined by</p>\n\n<p>$$\\texttt{ff(x, k)} = (x)_k = x \\cdot (x-1) \\cdots (x-k+1)$$</p>\n\n<p>where <code>x</code> can be arbitrary expression and <code>k</code> is an integer. For\nmore information check \"Concrete mathematics\" by Graham, pp. 66\nor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup>.</p>\n\n<p>When <code>x</code> is a <code>~.Poly</code> instance of degree $\\ge 1$ with single variable,\n<code>(x)_k = x(y) \\cdot x(y-1) \\cdots x(y-k+1)</code>, where <code>y</code> is the\nvariable of <code>x</code>. This is as described in</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">Poly</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">120</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">Poly</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">Poly(x**4 - 2*x**3 + x**2, x, domain=&#39;ZZ&#39;)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">factorial(n)</span>\n</code></pre>\n</div>\n\n<p>Rewriting is complicated unless the relationship between\nthe arguments is known, but falling factorial can\nbe rewritten in terms of gamma, factorial and binomial\nand rising factorial.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">factorial</span><span class=\"p\">,</span> <span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"p\">,</span> <span class=\"n\">binomial</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">factorial</span><span class=\"p\">,</span> <span class=\"n\">binomial</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">RisingFactorial(3, n - 2)</span>\n<span class=\"go\">FallingFactorial(n, n - 2)</span>\n<span class=\"go\">factorial(n)/2</span>\n<span class=\"go\">binomial(n, n - 2)*factorial(n - 2)</span>\n<span class=\"go\">gamma(n + 1)/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>factorial, factorial2, RisingFactorial</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"http://mathworld.wolfram.com/FallingFactorial.html\">http://mathworld.wolfram.com/FallingFactorial.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.factorials.FallingFactorial, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.binomial", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "binomial", "kind": "class", "doc": "<p>Implementation of the binomial coefficient. It can be defined\nin two ways depending on its desired interpretation:</p>\n\n<p>$$\\binom{n}{k} = \\frac{n!}{k!(n-k)!}\\ \\text{or}\\binom{n}{k} = \\frac{(n)_k}{k!}$$</p>\n\n<p>First, in a strict combinatorial sense it defines the\nnumber of ways we can choose <code>k</code> elements from a set of\n<code>n</code> elements. In this case both arguments are nonnegative\nintegers and binomial is computed using an efficient\nalgorithm based on prime factorization.</p>\n\n<p>The other definition is generalization for arbitrary <code>n</code>,\nhowever <code>k</code> must also be nonnegative. This case is very\nuseful when evaluating summations.</p>\n\n<p>For the sake of convenience, for negative integer <code>k</code> this function\nwill return zero no matter the other argument.</p>\n\n<p>To expand the binomial when <code>n</code> is a symbol, use either\n<code>expand_func()</code> or <code>expand(func=True)</code>. The former will keep\nthe polynomial in factored form while the latter will expand the\npolynomial itself. See examples for details.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">Rational</span><span class=\"p\">,</span> <span class=\"n\">binomial</span><span class=\"p\">,</span> <span class=\"n\">expand_func</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binomial</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"go\">6435</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binomial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<p>Rows of Pascal's triangle can be generated with the binomial function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">N</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">binomial</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)])</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">[1]</span>\n<span class=\"go\">[1, 1]</span>\n<span class=\"go\">[1, 2, 1]</span>\n<span class=\"go\">[1, 3, 3, 1]</span>\n<span class=\"go\">[1, 4, 6, 4, 1]</span>\n<span class=\"go\">[1, 5, 10, 10, 5, 1]</span>\n<span class=\"go\">[1, 6, 15, 20, 15, 6, 1]</span>\n<span class=\"go\">[1, 7, 21, 35, 35, 21, 7, 1]</span>\n</code></pre>\n</div>\n\n<p>As can a given diagonal, e.g. the 4th diagonal:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">binomial</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">N</span><span class=\"p\">)]</span>\n<span class=\"go\">[1, -4, 10, -20, 35]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binomial</span><span class=\"p\">(</span><span class=\"n\">Rational</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">-5/128</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binomial</span><span class=\"p\">(</span><span class=\"n\">Rational</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">-195/128</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binomial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">binomial(n, 3)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binomial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">n**3/6 - n**2/2 + n/3</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">binomial</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">n*(n - 2)*(n - 1)/6</span>\n</code></pre>\n</div>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.factorials.binomial, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.RisingFactorial", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "RisingFactorial", "kind": "class", "doc": "<p>Rising factorial (also called Pochhammer symbol <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup>) is a double valued\nfunction arising in concrete mathematics, hypergeometric functions\nand series expansions. It is defined by:</p>\n\n<p>$$\\texttt{rf(y, k)} = (x)^k = x \\cdot (x+1) \\cdots (x+k-1)$$</p>\n\n<p>where <code>x</code> can be arbitrary expression and <code>k</code> is an integer. For\nmore information check \"Concrete mathematics\" by Graham, pp. 66\nor visit <a href=\"http://mathworld.wolfram.com/RisingFactorial.html\">http://mathworld.wolfram.com/RisingFactorial.html</a> page.</p>\n\n<p>When <code>x</code> is a <code>~.Poly</code> instance of degree $\\ge 1$ with a single variable,\n<code>(x)^k = x(y) \\cdot x(y+1) \\cdots x(y+k-1)</code>, where <code>y</code> is the\nvariable of <code>x</code>. This is as described in <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">Poly</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rf</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rf</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">120</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rf</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rf</span><span class=\"p\">(</span><span class=\"n\">Poly</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">Poly(x**6 + 3*x**5 + 3*x**4 + x**3, x, domain=&#39;ZZ&#39;)</span>\n</code></pre>\n</div>\n\n<p>Rewriting is complicated unless the relationship between\nthe arguments is known, but rising factorial can\nbe rewritten in terms of gamma, factorial, binomial,\nand falling factorial.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">factorial</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">binomial</span><span class=\"p\">,</span> <span class=\"n\">gamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">rf</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">factorial</span><span class=\"p\">,</span> <span class=\"n\">binomial</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span> <span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">RisingFactorial(n, n + 2)</span>\n<span class=\"go\">FallingFactorial(2*n + 1, n + 2)</span>\n<span class=\"go\">factorial(2*n + 1)/factorial(n - 1)</span>\n<span class=\"go\">binomial(2*n + 1, n + 2)*factorial(n + 2)</span>\n<span class=\"go\">gamma(2*n + 2)/gamma(n)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>factorial, factorial2, FallingFactorial</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://en.wikipedia.org/wiki/Pochhammer_symbol\">https://en.wikipedia.org/wiki/Pochhammer_symbol</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p>Peter Paule, \"Greatest Factorial Factorization and Symbolic\nSummation\", Journal of Symbolic Computation, vol. 20, pp. 235-268,\n1995.&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.factorials.RisingFactorial, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.FallingFactorial", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "FallingFactorial", "kind": "class", "doc": "<p>Falling factorial (related to rising factorial) is a double valued\nfunction arising in concrete mathematics, hypergeometric functions\nand series expansions. It is defined by</p>\n\n<p>$$\\texttt{ff(x, k)} = (x)_k = x \\cdot (x-1) \\cdots (x-k+1)$$</p>\n\n<p>where <code>x</code> can be arbitrary expression and <code>k</code> is an integer. For\nmore information check \"Concrete mathematics\" by Graham, pp. 66\nor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup>.</p>\n\n<p>When <code>x</code> is a <code>~.Poly</code> instance of degree $\\ge 1$ with single variable,\n<code>(x)_k = x(y) \\cdot x(y-1) \\cdots x(y-k+1)</code>, where <code>y</code> is the\nvariable of <code>x</code>. This is as described in</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">Poly</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">120</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">Poly</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">Poly(x**4 - 2*x**3 + x**2, x, domain=&#39;ZZ&#39;)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">factorial(n)</span>\n</code></pre>\n</div>\n\n<p>Rewriting is complicated unless the relationship between\nthe arguments is known, but falling factorial can\nbe rewritten in terms of gamma, factorial and binomial\nand rising factorial.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">factorial</span><span class=\"p\">,</span> <span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"p\">,</span> <span class=\"n\">binomial</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">F</span> <span class=\"o\">=</span> <span class=\"n\">ff</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">rf</span><span class=\"p\">,</span> <span class=\"n\">ff</span><span class=\"p\">,</span> <span class=\"n\">factorial</span><span class=\"p\">,</span> <span class=\"n\">binomial</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span> <span class=\"n\">F</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">RisingFactorial(3, n - 2)</span>\n<span class=\"go\">FallingFactorial(n, n - 2)</span>\n<span class=\"go\">factorial(n)/2</span>\n<span class=\"go\">binomial(n, n - 2)*factorial(n - 2)</span>\n<span class=\"go\">gamma(n + 1)/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>factorial, factorial2, RisingFactorial</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"http://mathworld.wolfram.com/FallingFactorial.html\">http://mathworld.wolfram.com/FallingFactorial.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.factorials.FallingFactorial, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.subfactorial", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "subfactorial", "kind": "class", "doc": "<p>The subfactorial counts the derangements of $n$ items and is\ndefined for non-negative integers as:</p>\n\n<p>$$!n = \\begin{cases} 1 &amp; n = 0 \\ 0 &amp; n = 1 \\(n-1)(!(n-1) + !(n-2)) &amp; n &gt; 1 \\end{cases}$$</p>\n\n<p>It can also be written as <code>int(round(n!/exp(1)))</code> but the\nrecursive definition with caching is implemented for this function.</p>\n\n<p>An interesting analytic expression is the following <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">1</a></sup></p>\n\n<p>$$!x = \\Gamma(x + 1, -1)/e$$</p>\n\n<p>which is valid for non-negative integers <code>x</code>. The above formula\nis not very useful in case of non-integers. <code>\\Gamma(x + 1, -1)</code> is\nsingle-valued only for integral arguments <code>x</code>, elsewhere on the positive\nreal axis it has an infinite number of branches none of which are real.</p>\n\n<h1 id=\"references\">References</h1>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">subfactorial</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subfactorial</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">subfactorial(n + 1)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subfactorial</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">44</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>factorial, uppergamma,\nsympy.utilities.iterables.generate_derangements</p>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-2\">\n<p><a href=\"http://mathworld.wolfram.com/Subfactorial.html\">http://mathworld.wolfram.com/Subfactorial.html</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.factorials.subfactorial, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.carmichael", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "carmichael", "kind": "class", "doc": "<p>Carmichael Numbers:</p>\n\n<p>Certain cryptographic algorithms make use of big prime numbers.\nHowever, checking whether a big number is prime is not so easy.\nRandomized prime number checking tests exist that offer a high degree of\nconfidence of accurate determination at low cost, such as the Fermat test.</p>\n\n<p>Let 'a' be a random number between $2$ and $n - 1$, where $n$ is the\nnumber whose primality we are testing. Then, $n$ is probably prime if it\nsatisfies the modular arithmetic congruence relation:</p>\n\n<p>.. math :: a^{n-1} = 1 \\pmod{n}</p>\n\n<p>(where mod refers to the modulo operation)</p>\n\n<p>If a number passes the Fermat test several times, then it is prime with a\nhigh probability.</p>\n\n<p>Unfortunately, certain composite numbers (non-primes) still pass the Fermat\ntest with every number smaller than themselves.\nThese numbers are called Carmichael numbers.</p>\n\n<p>A Carmichael number will pass a Fermat primality test to every base $b$\nrelatively prime to the number, even though it is not actually prime.\nThis makes tests based on Fermat's Little Theorem less effective than\nstrong probable prime tests such as the Baillie-PSW primality test and\nthe Miller-Rabin primality test.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">carmichael</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">carmichael</span><span class=\"o\">.</span><span class=\"n\">find_first_n_carmichaels</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">[561, 1105, 1729, 2465, 2821]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">carmichael</span><span class=\"o\">.</span><span class=\"n\">find_carmichael_numbers_in_range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">562</span><span class=\"p\">)</span>\n<span class=\"go\">[561]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">carmichael</span><span class=\"o\">.</span><span class=\"n\">find_carmichael_numbers_in_range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"go\">[561]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">carmichael</span><span class=\"o\">.</span><span class=\"n\">find_carmichael_numbers_in_range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2000</span><span class=\"p\">)</span>\n<span class=\"go\">[561, 1105, 1729]</span>\n</code></pre>\n</div>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.numbers.carmichael, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.fibonacci", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "fibonacci", "kind": "class", "doc": "<p>Fibonacci numbers / Fibonacci polynomials</p>\n\n<p>The Fibonacci numbers are the integer sequence defined by the\ninitial terms <code>F_0 = 0</code>, <code>F_1 = 1</code> and the two-term recurrence\nrelation <code>F_n = F_{n-1} + F_{n-2}</code>.  This definition\nextended to arbitrary real and complex arguments using\nthe formula</p>\n\n<p>.. math :: F_z = \\frac{\\phi^z - \\cos(\\pi z) \\phi^{-z}}{\\sqrt 5}</p>\n\n<p>The Fibonacci polynomials are defined by <code>F_1(x) = 1</code>,\n<code>F_2(x) = x</code>, and <code>F_n(x) = x*F_{n-1}(x) + F_{n-2}(x)</code> for <code>n &gt; 2</code>.\nFor all positive integers <code>n</code>, <code>F_n(1) = F_n</code>.</p>\n\n<ul>\n<li><code>fibonacci(n)</code> gives the <code>n^{th}</code> Fibonacci number, <code>F_n</code></li>\n<li><code>fibonacci(n, x)</code> gives the <code>n^{th}</code> Fibonacci polynomial in <code>x</code>, <code>F_n(x)</code></li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">fibonacci</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)]</span>\n<span class=\"go\">[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;t&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">t**4 + 3*t**2 + 1</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>bell, bernoulli, catalan, euler, harmonic, lucas, genocchi, partition, tribonacci</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.numbers.fibonacci, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.lucas", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "lucas", "kind": "class", "doc": "<p>Lucas numbers</p>\n\n<p>Lucas numbers satisfy a recurrence relation similar to that of\nthe Fibonacci sequence, in which each term is the sum of the\npreceding two. They are generated by choosing the initial\nvalues <code>L_0 = 2</code> and <code>L_1 = 1</code>.</p>\n\n<ul>\n<li><code>lucas(n)</code> gives the <code>n^{th}</code> Lucas number</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">lucas</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">lucas</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)]</span>\n<span class=\"go\">[2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 123]</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>bell, bernoulli, catalan, euler, fibonacci, harmonic, genocchi, partition, tribonacci</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.numbers.lucas, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.tribonacci", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "tribonacci", "kind": "class", "doc": "<p>Tribonacci numbers / Tribonacci polynomials</p>\n\n<p>The Tribonacci numbers are the integer sequence defined by the\ninitial terms <code>T_0 = 0</code>, <code>T_1 = 1</code>, <code>T_2 = 1</code> and the three-term\nrecurrence relation <code>T_n = T_{n-1} + T_{n-2} + T_{n-3}</code>.</p>\n\n<p>The Tribonacci polynomials are defined by <code>T_0(x) = 0</code>, <code>T_1(x) = 1</code>,\n<code>T_2(x) = x^2</code>, and <code>T_n(x) = x^2 T_{n-1}(x) + x T_{n-2}(x) + T_{n-3}(x)</code>\nfor <code>n &gt; 2</code>.  For all positive integers <code>n</code>, <code>T_n(1) = T_n</code>.</p>\n\n<ul>\n<li><code>tribonacci(n)</code> gives the <code>n^{th}</code> Tribonacci number, <code>T_n</code></li>\n<li><code>tribonacci(n, x)</code> gives the <code>n^{th}</code> Tribonacci polynomial in <code>x</code>, <code>T_n(x)</code></li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">tribonacci</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">tribonacci</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)]</span>\n<span class=\"go\">[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tribonacci</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;t&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">t**8 + 3*t**5 + 3*t**2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>bell, bernoulli, catalan, euler, fibonacci, harmonic, lucas, genocchi, partition</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.numbers.tribonacci, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.harmonic", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "harmonic", "kind": "class", "doc": "<p>Harmonic numbers</p>\n\n<p>The nth harmonic number is given by <code>\\operatorname{H}_{n} =\n1 + \\frac{1}{2} + \\frac{1}{3} + \\ldots + \\frac{1}{n}</code>.</p>\n\n<p>More generally:</p>\n\n<p>$$\\operatorname{H}_{n,m} = \\sum_{k=1}^{n} \\frac{1}{k^m}$$</p>\n\n<p>As <code>n \\rightarrow \\infty</code>, <code>\\operatorname{H}_{n,m} \\rightarrow \\zeta(m)</code>,\nthe Riemann zeta function.</p>\n\n<ul>\n<li><p><code>harmonic(n)</code> gives the nth harmonic number, <code>\\operatorname{H}_n</code></p></li>\n<li><p><code>harmonic(n, m)</code> gives the nth generalized harmonic number\nof order <code>m</code>, <code>\\operatorname{H}_{n,m}</code>, where\n<code>harmonic(n) == harmonic(n, 1)</code></p></li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">harmonic</span><span class=\"p\">,</span> <span class=\"n\">oo</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)]</span>\n<span class=\"go\">[0, 1, 3/2, 11/6, 25/12, 137/60]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)]</span>\n<span class=\"go\">[0, 1, 5/4, 49/36, 205/144, 5269/3600]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">pi**2/6</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">Sum</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;n&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">Sum</span><span class=\"p\">)</span>\n<span class=\"go\">Sum(1/_k, (_k, 1, n))</span>\n</code></pre>\n</div>\n\n<p>We can evaluate harmonic numbers for all integral and positive\nrational arguments:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">expand_func</span><span class=\"p\">,</span> <span class=\"n\">simplify</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"go\">761/280</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"go\">83711/27720</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">H</span>\n<span class=\"go\">harmonic(1/3)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">He</span> <span class=\"o\">=</span> <span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">He</span>\n<span class=\"go\">-log(6) - sqrt(3)*pi/6 + 2*Sum(log(sin(_k*pi/3))*cos(2*_k*pi/3), (_k, 1, 1))</span>\n<span class=\"go\">                       + 3*Sum(1/(3*_k + 1), (_k, 0, 0))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">He</span><span class=\"o\">.</span><span class=\"n\">doit</span><span class=\"p\">()</span>\n<span class=\"go\">-log(6) - sqrt(3)*pi/6 - log(sqrt(3)/2) + 3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">H</span> <span class=\"o\">=</span> <span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"o\">/</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">He</span> <span class=\"o\">=</span> <span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">doit</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">He</span>\n<span class=\"go\">log(sin(2*pi/7)**(2*cos(16*pi/7))/(14*sin(pi/7)**(2*cos(pi/7))*cos(pi/14)**(2*sin(pi/14)))) + pi*tan(pi/14)/2 + 30247/9900</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">He</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"go\">1.983697455232980674869851942390639915940</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"o\">/</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"go\">1.983697455232980674869851942390639915940</span>\n</code></pre>\n</div>\n\n<p>We can rewrite harmonic numbers in terms of polygamma functions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">digamma</span><span class=\"p\">,</span> <span class=\"n\">polygamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;m&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">digamma</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(0, n + 1) + EulerGamma</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(0, n + 1) + EulerGamma</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(2, n + 1)/2 - polygamma(2, 1)/2</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**m*(polygamma(m - 1, 1) - polygamma(m - 1, n + 1))/factorial(m - 1)</span>\n</code></pre>\n</div>\n\n<p>Integer offsets in the argument can be pulled out:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">expand_func</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"go\">harmonic(n) + 1/(n + 4) + 1/(n + 3) + 1/(n + 2) + 1/(n + 1)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"go\">harmonic(n) - 1/(n - 1) - 1/(n - 2) - 1/(n - 3) - 1/n</span>\n</code></pre>\n</div>\n\n<p>Some limits can be computed as well:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">limit</span><span class=\"p\">,</span> <span class=\"n\">oo</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">pi**2/6</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-polygamma(2, 1)/2</span>\n</code></pre>\n</div>\n\n<p>However we cannot compute the general relation yet:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"n\">harmonic</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">harmonic(oo, m)</span>\n</code></pre>\n</div>\n\n<p>which equals <code>zeta(m)</code> for <code>m &gt; 1</code>.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>bell, bernoulli, catalan, euler, fibonacci, lucas, genocchi, partition, tribonacci</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.numbers.harmonic, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.bernoulli", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "bernoulli", "kind": "class", "doc": "<p>Bernoulli numbers / Bernoulli polynomials</p>\n\n<p>The Bernoulli numbers are a sequence of rational numbers\ndefined by <code>B_0 = 1</code> and the recursive relation (<code>n &gt; 0</code>):</p>\n\n<p>.. math :: 0 = \\sum_{k=0}^n \\binom{n+1}{k} B_k</p>\n\n<p>They are also commonly defined by their exponential generating\nfunction, which is <code>\\frac{x}{e^x - 1}</code>. For odd indices &gt; 1, the\nBernoulli numbers are zero.</p>\n\n<p>The Bernoulli polynomials satisfy the analogous formula:</p>\n\n<p>.. math :: B_n(x) = \\sum_{k=0}^n \\binom{n}{k} B_k x^{n-k}</p>\n\n<p>Bernoulli numbers and Bernoulli polynomials are related as\n<code>B_n(0) = B_n</code>.</p>\n\n<p>We compute Bernoulli numbers using Ramanujan's formula:</p>\n\n<p>.. math :: B_n = \\frac{A(n) - S(n)}{\\binom{n+3}{n}}</p>\n\n<p>where:</p>\n\n<p>.. math :: A(n) = \\begin{cases} \\frac{n+3}{3} &amp;\n    n \\equiv 0\\ \\text{or}\\ 2 \\pmod{6} \\\n    -\\frac{n+3}{6} &amp; n \\equiv 4 \\pmod{6} \\end{cases}</p>\n\n<p>and:</p>\n\n<p>.. math :: S(n) = \\sum_{k=1}^{[n/6]} \\binom{n+3}{n-6k} B_{n-6k}</p>\n\n<p>This formula is similar to the sum given in the definition, but\ncuts 2/3 of the terms. For Bernoulli polynomials, we use the\nformula in the definition.</p>\n\n<ul>\n<li><code>bernoulli(n)</code> gives the nth Bernoulli number, <code>B_n</code></li>\n<li><code>bernoulli(n, x)</code> gives the nth Bernoulli polynomial in <code>x</code>, <code>B_n(x)</code></li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">bernoulli</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">bernoulli</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)]</span>\n<span class=\"go\">[1, -1/2, 1/6, 0, -1/30, 0, 1/42, 0, -1/30, 0, 5/66]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bernoulli</span><span class=\"p\">(</span><span class=\"mi\">1000001</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>bell, catalan, euler, fibonacci, harmonic, lucas, genocchi, partition, tribonacci</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.numbers.bernoulli, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.bell", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "bell", "kind": "class", "doc": "<p>Bell numbers / Bell polynomials</p>\n\n<p>The Bell numbers satisfy <code>B_0 = 1</code> and</p>\n\n<p>$$B_n = \\sum_{k=0}^{n-1} \\binom{n-1}{k} B_k.$$</p>\n\n<p>They are also given by:</p>\n\n<p>$$B_n = \\frac{1}{e} \\sum_{k=0}^{\\infty} \\frac{k^n}{k!}.$$</p>\n\n<p>The Bell polynomials are given by <code>B_0(x) = 1</code> and</p>\n\n<p>$$B_n(x) = x \\sum_{k=1}^{n-1} \\binom{n-1}{k-1} B_{k-1}(x).$$</p>\n\n<p>The second kind of Bell polynomials (are sometimes called \"partial\" Bell\npolynomials or incomplete Bell polynomials) are defined as</p>\n\n<p>$$B_{n,k}(x_1, x_2,\\dotsc x_{n-k+1}) =\\sum_{j_1+j_2+j_2+\\dotsb=k \\atop j_1+2j_2+3j_2+\\dotsb=n}\n    \\frac{n!}{j_1!j_2!\\dotsb j_{n-k+1}!}\n    \\left(\\frac{x_1}{1!} \\right)^{j_1}\n    \\left(\\frac{x_2}{2!} \\right)^{j_2} \\dotsb\n    \\left(\\frac{x_{n-k+1}}{(n-k+1)!} \\right) ^{j_{n-k+1}}.$$</p>\n\n<ul>\n<li><code>bell(n)</code> gives the <code>n^{th}</code> Bell number, <code>B_n</code>.</li>\n<li><code>bell(n, x)</code> gives the <code>n^{th}</code> Bell polynomial, <code>B_n(x)</code>.</li>\n<li><code>bell(n, k, (x1, x2, ...))</code> gives Bell polynomials of the second kind,\n<code>B_{n,k}(x_1, x_2, \\dotsc, x_{n-k+1})</code>.</li>\n</ul>\n\n<h1 id=\"notes\">Notes</h1>\n\n<p>Not to be confused with Bernoulli numbers and Bernoulli polynomials,\nwhich use the same notation.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">bell</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">symbols</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">bell</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)]</span>\n<span class=\"go\">[1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bell</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">846749014511809332450147</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bell</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;t&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">t**4 + 6*t**3 + 7*t**2 + t</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bell</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;x:6&#39;</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n<span class=\"go\">6*x1*x5 + 15*x2*x4 + 10*x3**2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>bernoulli, catalan, euler, fibonacci, harmonic, lucas, genocchi, partition, tribonacci</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.numbers.bell, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.euler", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "euler", "kind": "class", "doc": "<p>Euler numbers / Euler polynomials</p>\n\n<p>The Euler numbers are given by:</p>\n\n<p>$$E_{2n} = I \\sum_{k=1}^{2n+1} \\sum_{j=0}^k \\binom{k}{j}\\frac{(-1)^j (k-2j)^{2n+1}}{2^k I^k k}$$</p>\n\n<p>$$E_{2n+1} = 0$$</p>\n\n<p>Euler numbers and Euler polynomials are related by</p>\n\n<p>$$E_n = 2^n E_n\\left(\\frac{1}{2}\\right).$$</p>\n\n<p>We compute symbolic Euler polynomials using <sup class=\"footnote-ref\" id=\"fnref-5\"><a href=\"#fn-5\">1</a></sup></p>\n\n<p>$$E_n(x) = \\sum_{k=0}^n \\binom{n}{k} \\frac{E_k}{2^k}\\left(x - \\frac{1}{2}\\right)^{n-k}.$$</p>\n\n<p>However, numerical evaluation of the Euler polynomial is computed\nmore efficiently (and more accurately) using the mpmath library.</p>\n\n<ul>\n<li><code>euler(n)</code> gives the <code>n^{th}</code> Euler number, <code>E_n</code>.</li>\n<li><code>euler(n, x)</code> gives the <code>n^{th}</code> Euler polynomial, <code>E_n(x)</code>.</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">euler</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">S</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">euler</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)]</span>\n<span class=\"go\">[1, 0, -1, 0, 5, 0, -61, 0, 1385, 0]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;n&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">euler</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">euler(3*n)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">euler</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">euler(n, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">euler</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">euler</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">x - 1/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">euler</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">x**2 - x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">euler</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">x**3 - 3*x**2/2 + 1/4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">euler</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">x**4 - 2*x**3 + x</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">euler</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">Half</span><span class=\"p\">)</span>\n<span class=\"go\">2702765/4096</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">euler</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"go\">2702765</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>bell, bernoulli, catalan, fibonacci, harmonic, lucas, genocchi, partition, tribonacci</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-5\">\n<p><a href=\"http://dlmf.nist.gov/24.2#ii\">http://dlmf.nist.gov/24.2#ii</a>&#160;<a href=\"#fnref-5\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.numbers.euler, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.catalan", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "catalan", "kind": "class", "doc": "<p>Catalan numbers</p>\n\n<p>The <code>n^{th}</code> catalan number is given by:</p>\n\n<p>.. math :: C_n = \\frac{1}{n+1} \\binom{2n}{n}</p>\n\n<ul>\n<li><code>catalan(n)</code> gives the <code>n^{th}</code> Catalan number, <code>C_n</code></li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">binomial</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"p\">,</span> <span class=\"n\">hyper</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">catalan</span><span class=\"p\">,</span> <span class=\"n\">diff</span><span class=\"p\">,</span> <span class=\"n\">combsimp</span><span class=\"p\">,</span> <span class=\"n\">Rational</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">catalan</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)]</span>\n<span class=\"go\">[1, 2, 5, 14, 42, 132, 429, 1430, 4862]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;n&quot;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">catalan</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">catalan(n)</span>\n</code></pre>\n</div>\n\n<p>Catalan numbers can be transformed into several other, identical\nexpressions involving other mathematical functions</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">catalan</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">binomial</span><span class=\"p\">)</span>\n<span class=\"go\">binomial(2*n, n)/(n + 1)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">catalan</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">gamma</span><span class=\"p\">)</span>\n<span class=\"go\">4**n*gamma(n + 1/2)/(sqrt(pi)*gamma(n + 2))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">catalan</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">hyper</span><span class=\"p\">)</span>\n<span class=\"go\">hyper((1 - n, -n), (2,), 1)</span>\n</code></pre>\n</div>\n\n<p>For some non-integer values of n we can get closed form\nexpressions by rewriting in terms of gamma functions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">catalan</span><span class=\"p\">(</span><span class=\"n\">Rational</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">gamma</span><span class=\"p\">)</span>\n<span class=\"go\">8/(3*pi)</span>\n</code></pre>\n</div>\n\n<p>We can differentiate the Catalan numbers C(n) interpreted as a\ncontinuous real function in n:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">catalan</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">(polygamma(0, n + 1/2) - polygamma(0, n + 2) + log(4))*catalan(n)</span>\n</code></pre>\n</div>\n\n<p>As a more advanced example consider the following ratio\nbetween consecutive numbers:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">combsimp</span><span class=\"p\">((</span><span class=\"n\">catalan</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">catalan</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">binomial</span><span class=\"p\">))</span>\n<span class=\"go\">2*(2*n + 1)/(n + 2)</span>\n</code></pre>\n</div>\n\n<p>The Catalan numbers can be generalized to complex numbers:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">catalan</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">gamma</span><span class=\"p\">)</span>\n<span class=\"go\">4**I*gamma(1/2 + I)/(sqrt(pi)*gamma(2 + I))</span>\n</code></pre>\n</div>\n\n<p>and evaluated with arbitrary precision:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">catalan</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"go\">0.39764993382373624267 - 0.020884341620842555705*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>bell, bernoulli, euler, fibonacci, harmonic, lucas, genocchi, partition, tribonacci\nsympy.functions.combinatorial.factorials.binomial</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.numbers.catalan, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.genocchi", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "genocchi", "kind": "class", "doc": "<p>Genocchi numbers</p>\n\n<p>The Genocchi numbers are a sequence of integers <code>G_n</code> that satisfy the\nrelation:</p>\n\n<p>$$\\frac{2t}{e^t + 1} = \\sum_{n=1}^\\infty \\frac{G_n t^n}{n!}$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">genocchi</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">genocchi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)]</span>\n<span class=\"go\">[1, -1, 0, 1, 0, -3, 0, 17]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">genocchi</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>bell, bernoulli, catalan, euler, fibonacci, harmonic, lucas, partition, tribonacci</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.numbers.genocchi, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.partition", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "partition", "kind": "class", "doc": "<p>Partition numbers</p>\n\n<p>The Partition numbers are a sequence of integers <code>p_n</code> that represent the\nnumber of distinct ways of representing <code>n</code> as a sum of natural numbers\n(with order irrelevant). The generating function for <code>p_n</code> is given by:</p>\n\n<p>$$\\sum_{n=0}^\\infty p_n x^n = \\prod_{k=1}^\\infty (1 - x^k)^{-1}$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">partition</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)]</span>\n<span class=\"go\">[1, 1, 2, 3, 5, 7, 11, 15, 22]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">negative</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>bell, bernoulli, catalan, euler, fibonacci, harmonic, lucas, genocchi, tribonacci</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.combinatorial.numbers.partition, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.Rem", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Rem", "kind": "class", "doc": "<p>Returns the remainder when <code>p</code> is divided by <code>q</code> where <code>p</code> is finite\nand <code>q</code> is not equal to zero. The result, <code>p - int(p/q)*q</code>, has the same sign\nas the divisor.</p>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>p : Expr\n    Dividend.</p>\n\n<p>q : Expr\n    Divisor.</p>\n\n<h1 id=\"notes\">Notes</h1>\n\n<p><code>Rem</code> corresponds to the <code>%</code> operator in C.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Rem</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Rem</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">Rem(x**3, y)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Rem</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">({</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">})</span>\n<span class=\"go\">-2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Mod</p>\n", "bases": "sympy.functions.elementary.miscellaneous.Rem, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.re", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "re", "kind": "class", "doc": "<p>Returns real part of expression. This function performs only\nelementary analysis and so it will fail to decompose properly\nmore complicated expressions. If completely simplified result\nis needed then use <code>Basic.as_real_imag()</code> or perform complex\nexpansion on instance of this function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">re</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"p\">,</span> <span class=\"n\">symbols</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;x y&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">E</span><span class=\"p\">)</span>\n<span class=\"go\">2*E</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span> <span class=\"o\">+</span> <span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"go\">17</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">I</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">re</span><span class=\"p\">(</span><span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"n\">I</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">7</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>arg : Expr\n    Real or complex expression.</p>\n\n<h1 id=\"returns\">Returns</h1>\n\n<p>expr : Expr\n    Real part of expression.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>im</p>\n", "bases": "sympy.functions.elementary.complexes.re, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.im", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "im", "kind": "class", "doc": "<p>Returns imaginary part of expression. This function performs only\nelementary analysis and so it will fail to decompose properly more\ncomplicated expressions. If completely simplified result is needed then\nuse <code>Basic.as_real_imag()</code> or perform complex expansion on instance of\nthis function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">re</span><span class=\"p\">,</span> <span class=\"n\">im</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">im</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">E</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">im</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span> <span class=\"o\">+</span> <span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">im</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">re(x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">im</span><span class=\"p\">(</span><span class=\"n\">re</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">im(y)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">im</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>arg : Expr\n    Real or complex expression.</p>\n\n<h1 id=\"returns\">Returns</h1>\n\n<p>expr : Expr\n    Imaginary part of expression.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>re</p>\n", "bases": "sympy.functions.elementary.complexes.im, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.sign", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "sign", "kind": "class", "doc": "<p>Returns the complex sign of an expression:</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>If the expression is real the sign will be:</p>\n\n<pre><code>* $1$ if expression is positive\n* $0$ if expression is equal to zero\n* $-1$ if expression is negative\n</code></pre>\n\n<p>If the expression is imaginary the sign will be:</p>\n\n<pre><code>* $I$ if im(expression) is positive\n* $-I$ if im(expression) is negative\n</code></pre>\n\n<p>Otherwise an unevaluated expression will be returned. When evaluated, the\nresult (in general) will be <code>cos(arg(expr)) + I*sin(arg(expr))</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">sign</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">-I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">sign(1 + I)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">()</span>\n<span class=\"go\">0.707106781186548 + 0.707106781186548*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>arg : Expr\n    Real or imaginary expression.</p>\n\n<h1 id=\"returns\">Returns</h1>\n\n<p>expr : Expr\n    Complex sign of expression.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Abs, conjugate</p>\n", "bases": "sympy.functions.elementary.complexes.sign, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.Abs", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Abs", "kind": "class", "doc": "<p>Return the absolute value of the argument.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This is an extension of the built-in function <code>abs()</code> to accept symbolic\nvalues.  If you pass a SymPy expression to the built-in <code>abs()</code>, it will\npass it automatically to <code>Abs()</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Abs</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Abs</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Abs</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">Abs(x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Abs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">x**2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># The Python built-in</span>\n<span class=\"go\">Abs(x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Abs</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(9*x**2 + 4)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Abs</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">8</span>\n</code></pre>\n</div>\n\n<p>Note that the Python built-in will return either an Expr or int depending on\nthe argument::</p>\n\n<pre><code>&gt;&gt;&gt; type(abs(-1))\n&lt;... 'int'&gt;\n&gt;&gt;&gt; type(abs(S.NegativeOne))\n&lt;class 'sympy.core.numbers.One'&gt;\n</code></pre>\n\n<p>Abs will always return a SymPy object.</p>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>arg : Expr\n    Real or complex expression.</p>\n\n<h1 id=\"returns\">Returns</h1>\n\n<p>expr : Expr\n    Absolute value returned can be an expression or integer depending on\n    input arg.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sign, conjugate</p>\n", "bases": "sympy.functions.elementary.complexes.Abs, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.conjugate", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "conjugate", "kind": "class", "doc": "<p>Returns the <em>complex conjugate</em> <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> of an argument.\nIn mathematics, the complex conjugate of a complex number\nis given by changing the sign of the imaginary part.</p>\n\n<p>Thus, the conjugate of the complex number\n\\( a + ib \\) (where $a$ and $b$ are real numbers) is \\( a - ib \\)</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">-I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">3 - 2*I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"mi\">5</span> <span class=\"o\">-</span> <span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">5 + I</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>arg : Expr\n    Real or complex expression.</p>\n\n<h1 id=\"returns\">Returns</h1>\n\n<p>arg : Expr\n    Complex conjugate of arg as real, imaginary or mixed expression.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sign, Abs</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://en.wikipedia.org/wiki/Complex_conjugation\">https://en.wikipedia.org/wiki/Complex_conjugation</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.complexes.conjugate, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.arg", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "arg", "kind": "class", "doc": "<p>Returns the argument (in radians) of a complex number. The argument is\nevaluated in consistent convention with <code>atan2</code> where the branch-cut is\ntaken along the negative real axis and <code>arg(z)</code> is in the interval\n$(-\\pi,\\pi]$. For a positive number, the argument is always 0; the\nargument of a negative number is $\\pi$; and the argument of 0\nis undefined and returns <code>nan</code>. So the <code>arg</code> function will never nest\ngreater than 3 levels since at the 4th application, the result must be\nnan; for a real number, nan is returned on the 3rd application.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">sqrt</span><span class=\"p\">,</span> <span class=\"n\">Dummy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"mf\">2.0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">pi/4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">pi/6</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">atan(3/4)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"mf\">0.8</span> <span class=\"o\">+</span> <span class=\"mf\">0.6</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">0.643501108793284</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))))</span>\n<span class=\"go\">nan</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">real</span> <span class=\"o\">=</span> <span class=\"n\">Dummy</span><span class=\"p\">(</span><span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">(</span><span class=\"n\">real</span><span class=\"p\">)))</span>\n<span class=\"go\">nan</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>arg : Expr\n    Real or complex expression.</p>\n\n<h1 id=\"returns\">Returns</h1>\n\n<p>value : Expr\n    Returns arc tangent of arg measured in radians.</p>\n", "bases": "sympy.functions.elementary.complexes.arg, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.polar_lift", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "polar_lift", "kind": "class", "doc": "<p>Lift argument to the Riemann surface of the logarithm, using the\nstandard branch.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">polar_lift</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span> <span class=\"n\">polar</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polar_lift</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">4*exp_polar(0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polar_lift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">4*exp_polar(I*pi)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polar_lift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">exp_polar(-I*pi/2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polar_lift</span><span class=\"p\">(</span><span class=\"n\">I</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">polar_lift(2 + I)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polar_lift</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">4*polar_lift(x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polar_lift</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"go\">4*p</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>arg : Expr\n    Real or complex expression.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sympy.functions.elementary.exponential.exp_polar\nperiodic_argument</p>\n", "bases": "sympy.functions.elementary.complexes.polar_lift, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.periodic_argument", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "periodic_argument", "kind": "class", "doc": "<p>Represent the argument on a quotient of the Riemann surface of the\nlogarithm. That is, given a period $P$, always return a value in\n$(-P/2, P/2]$, by using $\\exp(PI) = 1$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">exp_polar</span><span class=\"p\">,</span> <span class=\"n\">periodic_argument</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">periodic_argument</span><span class=\"p\">(</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">periodic_argument</span><span class=\"p\">(</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">),</span> <span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">exp_polar</span><span class=\"p\">,</span> <span class=\"n\">periodic_argument</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">periodic_argument</span><span class=\"p\">(</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">),</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">periodic_argument</span><span class=\"p\">(</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">-pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">periodic_argument</span><span class=\"p\">(</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">),</span> <span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>ar : Expr\n    A polar number.</p>\n\n<p>period : Expr\n    The period $P$.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sympy.functions.elementary.exponential.exp_polar\npolar_lift : Lift argument to the Riemann surface of the logarithm\nprincipal_branch</p>\n", "bases": "sympy.functions.elementary.complexes.periodic_argument, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.principal_branch", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "principal_branch", "kind": "class", "doc": "<p>Represent a polar number reduced to its principal branch on a quotient\nof the Riemann surface of the logarithm.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This is a function of two arguments. The first argument is a polar\nnumber <code>z</code>, and the second one a positive real number or infinity, <code>p</code>.\nThe result is <code>z mod exp_polar(I*p)</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">exp_polar</span><span class=\"p\">,</span> <span class=\"n\">principal_branch</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">principal_branch</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">z</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">principal_branch</span><span class=\"p\">(</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">3*exp_polar(0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">principal_branch</span><span class=\"p\">(</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">3*principal_branch(z, 2*pi)</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>x : Expr\n    A polar number.</p>\n\n<p>period : Expr\n    Positive real number or infinity.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sympy.functions.elementary.exponential.exp_polar\npolar_lift : Lift argument to the Riemann surface of the logarithm\nperiodic_argument</p>\n", "bases": "sympy.functions.elementary.complexes.principal_branch, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.transpose", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "transpose", "kind": "class", "doc": "<p>Linear map transposition.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">transpose</span><span class=\"p\">,</span> <span class=\"n\">Matrix</span><span class=\"p\">,</span> <span class=\"n\">MatrixSymbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">MatrixSymbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"go\">A.T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">MatrixSymbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"go\">B.T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">*</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"go\">B.T*A.T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">Matrix</span><span class=\"p\">([[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">M</span>\n<span class=\"go\">Matrix([</span>\n<span class=\"go\">[ 4,  5],</span>\n<span class=\"go\">[ 2,  1],</span>\n<span class=\"go\">[90, 12]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"go\">Matrix([</span>\n<span class=\"go\">[4, 2, 90],</span>\n<span class=\"go\">[5, 1, 12]])</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>arg : Matrix\n     Matrix or matrix expression to take the transpose of.</p>\n\n<h1 id=\"returns\">Returns</h1>\n\n<p>value : Matrix\n    Transpose of arg.</p>\n", "bases": "sympy.functions.elementary.complexes.transpose, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.adjoint", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "adjoint", "kind": "class", "doc": "<p>Conjugate transpose or Hermite conjugation.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">adjoint</span><span class=\"p\">,</span> <span class=\"n\">MatrixSymbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">MatrixSymbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">adjoint</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"go\">Adjoint(A)</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>arg : Matrix\n    Matrix or matrix expression to take the adjoint of.</p>\n\n<h1 id=\"returns\">Returns</h1>\n\n<p>value : Matrix\n    Represents the conjugate transpose or Hermite\n    conjugation of arg.</p>\n", "bases": "sympy.functions.elementary.complexes.adjoint, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.sin", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "sin", "kind": "class", "doc": "<p>The sine function.</p>\n\n<p>Returns the sine of x (measured in radians).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function will evaluate automatically in the\ncase $x/\\pi$ is some rational number <sup class=\"footnote-ref\" id=\"fnref-4\"><a href=\"#fn-4\">1</a></sup>.  For example,\nif $x$ is a multiple of $\\pi$, $\\pi/2$, $\\pi/3$, $\\pi/4$, and $\\pi/6$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*x*cos(x**2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"go\">1/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"go\">-sqrt(2)/4 + sqrt(6)/4</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>csc, cos, sec, tan, cot\nasin, acsc, acos, asec, atan, acot, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-4\">\n<p><a href=\"http://mathworld.wolfram.com/TrigonometryAngles.html\">http://mathworld.wolfram.com/TrigonometryAngles.html</a>&#160;<a href=\"#fnref-4\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.sin, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.cos", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "cos", "kind": "class", "doc": "<p>The cosine function.</p>\n\n<p>Returns the cosine of x (measured in radians).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>See <code>sin()</code> for notes about automatic evaluation.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">cos</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-2*x*sin(x**2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">-1/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(2)/4 + sqrt(6)/4</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, csc, sec, tan, cot\nasin, acsc, acos, asec, atan, acot, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.cos, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.tan", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "tan", "kind": "class", "doc": "<p>The tangent function.</p>\n\n<p>Returns the tangent of x (measured in radians).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>See <code>sin</code> for notes about automatic evaluation.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">tan</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tan</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*x*(tan(x**2)**2 + 1)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tan</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tan</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">()</span>\n<span class=\"go\">-1 + sqrt(2)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, csc, cos, sec, cot\nasin, acsc, acos, asec, atan, acot, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.tan, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.sec", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "sec", "kind": "class", "doc": "<p>The secant function.</p>\n\n<p>Returns the secant of x (measured in radians).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>See <code>sin</code> for notes about automatic evaluation.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">sec</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sec</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*x*tan(x**2)*sec(x**2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sec</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, csc, cos, tan, cot\nasin, acsc, acos, asec, atan, acot, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.sec, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.csc", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "csc", "kind": "class", "doc": "<p>The cosecant function.</p>\n\n<p>Returns the cosecant of x (measured in radians).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>See <code>sin()</code> for notes about automatic evaluation.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">csc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">csc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-2*x*cot(x**2)*csc(x**2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">csc</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, cos, sec, tan, cot\nasin, acsc, acos, asec, atan, acot, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.csc, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.cot", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "cot", "kind": "class", "doc": "<p>The cotangent function.</p>\n\n<p>Returns the cotangent of x (measured in radians).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>See <code>sin</code> for notes about automatic evaluation.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">cot</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*x*(-cot(x**2)**2 - 1)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cot</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">/</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(3) + 2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, csc, cos, sec, tan\nasin, acsc, acos, asec, atan, acot, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.cot, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.sinc", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "sinc", "kind": "class", "doc": "<p>Represents an unnormalized sinc function:</p>\n\n<p>$$\\operatorname{sinc}(x) =\n\\begin{cases}\n  \\frac{\\sin x}{x} &amp; \\qquad x \\neq 0 \\\n  1 &amp; \\qquad x = 0\n\\end{cases}$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">sinc</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">jn</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sinc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">sinc(x)</span>\n</code></pre>\n</div>\n\n<ul>\n<li>Automated Evaluation</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sinc</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sinc</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<ul>\n<li>Differentiation</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sinc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">()</span>\n<span class=\"go\">cos(x)/x - sin(x)/x**2</span>\n</code></pre>\n</div>\n\n<ul>\n<li>Series Expansion</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sinc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">()</span>\n<span class=\"go\">1 - x**2/6 + x**4/120 + O(x**6)</span>\n</code></pre>\n</div>\n\n<ul>\n<li>As zero'th order spherical Bessel Function</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sinc</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">jn</span><span class=\"p\">)</span>\n<span class=\"go\">jn(0, x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See also</h1>\n\n<p>sin</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.sinc, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.asin", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "asin", "kind": "class", "doc": "<p>The inverse sine function.</p>\n\n<p>Returns the arcsine of x in radians.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p><code>asin(x)</code> will evaluate automatically in the cases\n$x \\in {\\infty, -\\infty, 0, 1, -1}$ and for some instances when the\nresult is a rational multiple of $\\pi$ (see the <code>eval</code> class method).</p>\n\n<p>A purely imaginary argument will lead to an asinh expression.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">asin</span><span class=\"p\">,</span> <span class=\"n\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asin</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asin</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">-pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asin</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo*I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asin</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-oo*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, csc, cos, sec, tan, cot\nacsc, acos, asec, atan, acot, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.asin, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.acos", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "acos", "kind": "class", "doc": "<p>The inverse cosine function.</p>\n\n<p>Returns the arc cosine of x (measured in radians).</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p><code>acos(x)</code> will evaluate automatically in the cases\n$x \\in {\\infty, -\\infty, 0, 1, -1}$ and for some instances when\nthe result is a rational multiple of $\\pi$ (see the eval class method).</p>\n\n<p><code>acos(zoo)</code> evaluates to <code>zoo</code>\n(see note in <code>sympy.functions.elementary.trigonometric.asec</code>)</p>\n\n<p>A purely imaginary argument will be rewritten to asinh.</p>\n\n<h1 id=\"examples-2\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">acos</span><span class=\"p\">,</span> <span class=\"n\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acos</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acos</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, csc, cos, sec, tan, cot\nasin, acsc, asec, atan, acot, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.acos, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.atan", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "atan", "kind": "class", "doc": "<p>The inverse tangent function.</p>\n\n<p>Returns the arc tangent of x (measured in radians).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p><code>atan(x)</code> will evaluate automatically in the cases\n$x \\in {\\infty, -\\infty, 0, 1, -1}$ and for some instances when the\nresult is a rational multiple of $\\pi$ (see the eval class method).</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">atan</span><span class=\"p\">,</span> <span class=\"n\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">pi/4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, csc, cos, sec, tan, cot\nasin, acsc, acos, asec, acot, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.atan, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.asec", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "asec", "kind": "class", "doc": "<p>The inverse secant function.</p>\n\n<p>Returns the arc secant of x (measured in radians).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p><code>asec(x)</code> will evaluate automatically in the cases\n$x \\in {\\infty, -\\infty, 0, 1, -1}$ and for some instances when the\nresult is a rational multiple of $\\pi$ (see the eval class method).</p>\n\n<p><code>asec(x)</code> has branch cut in the interval $[-1, 1]$. For complex arguments,\nit can be defined <sup class=\"footnote-ref\" id=\"fnref-4\"><a href=\"#fn-4\">1</a></sup> as</p>\n\n<p>$$\\operatorname{sec^{-1}}(z) = -i\\frac{\\log\\left(\\sqrt{1 - z^2} + 1\\right)}{z}$$</p>\n\n<p>At <code>x = 0</code>, for positive branch cut, the limit evaluates to <code>zoo</code>. For\nnegative branch cut, the limit</p>\n\n<p>$$\\lim_{z \\to 0}-i\\frac{\\log\\left(-\\sqrt{1 - z^2} + 1\\right)}{z}$$</p>\n\n<p>simplifies to \\( -i\\log\\left(z/2 + O\\left(z^3\\right)\\right) \\) which\nultimately evaluates to <code>zoo</code>.</p>\n\n<p>As <code>acos(x) = asec(1/x)</code>, a similar argument can be given for\n<code>acos(x)</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">asec</span><span class=\"p\">,</span> <span class=\"n\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asec</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asec</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asec</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">zoo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asec</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, csc, cos, sec, tan, cot\nasin, acsc, acos, atan, acot, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-4\">\n<p><a href=\"http://reference.wolfram.com/language/ref/ArcSec.html\">http://reference.wolfram.com/language/ref/ArcSec.html</a>&#160;<a href=\"#fnref-4\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.asec, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.acsc", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "acsc", "kind": "class", "doc": "<p>The inverse cosecant function.</p>\n\n<p>Returns the arc cosecant of x (measured in radians).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p><code>acsc(x)</code> will evaluate automatically in the cases\n$x \\in {\\infty, -\\infty, 0, 1, -1}$` and for some instances when the\nresult is a rational multiple of $\\pi$ (see the <code>eval</code> class method).</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">acsc</span><span class=\"p\">,</span> <span class=\"n\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acsc</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acsc</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">-pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acsc</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acsc</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">acsc</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acsc</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">zoo</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, csc, cos, sec, tan, cot\nasin, acos, asec, atan, acot, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.acsc, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.acot", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "acot", "kind": "class", "doc": "<p>The inverse cotangent function.</p>\n\n<p>Returns the arc cotangent of x (measured in radians).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p><code>acot(x)</code> will evaluate automatically in the cases\n$x \\in {\\infty, -\\infty, \\tilde{\\infty}, 0, 1, -1}$\nand for some instances when the result is a rational multiple of $\\pi$\n(see the eval class method).</p>\n\n<p>A purely imaginary argument will lead to an <code>acoth</code> expression.</p>\n\n<p><code>acot(x)</code> has a branch cut along $(-i, i)$, hence it is discontinuous\nat 0. Its range for real $x$ is $(-\\frac{\\pi}{2}, \\frac{\\pi}{2}]$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">acot</span><span class=\"p\">,</span> <span class=\"n\">sqrt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acot</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">pi/4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acot</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">-5*pi/12</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, csc, cos, sec, tan, cot\nasin, acsc, acos, asec, atan, atan2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.acot, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.atan2", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "atan2", "kind": "class", "doc": "<p>The function <code>atan2(y, x)</code> computes <code>\\operatorname{atan}(y/x)</code> taking\ntwo arguments <code>y</code> and <code>x</code>.  Signs of both <code>y</code> and <code>x</code> are considered to\ndetermine the appropriate quadrant of <code>\\operatorname{atan}(y/x)</code>.\nThe range is <code>(-\\pi, \\pi]</code>. The complete definition reads as follows:</p>\n\n<p>$$\\operatorname{atan2}(y, x) =\n\\begin{cases}\n  \\arctan\\left(\\frac y x\\right) &amp; \\qquad x &gt; 0 \\\n  \\arctan\\left(\\frac y x\\right) + \\pi&amp; \\qquad y \\ge 0, x &lt; 0 \\\n  \\arctan\\left(\\frac y x\\right) - \\pi&amp; \\qquad y &lt; 0, x &lt; 0 \\\n  +\\frac{\\pi}{2} &amp; \\qquad y &gt; 0, x = 0 \\\n  -\\frac{\\pi}{2} &amp; \\qquad y &lt; 0, x = 0 \\\n  \\text{undefined} &amp; \\qquad y = 0, x = 0\n\\end{cases}$$</p>\n\n<p>Attention: Note the role reversal of both arguments. The <code>y</code>-coordinate\nis the first argument and the <code>x</code>-coordinate the second.</p>\n\n<p>If either <code>x</code> or <code>y</code> is complex:</p>\n\n<p>$$\\operatorname{atan2}(y, x) =\n    -i\\log\\left(\\frac{x + iy}{\\sqrt{x^2 + y^2}}\\right)$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Going counter-clock wise around the origin we find the\nfollowing angles:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">atan2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">pi/4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">3*pi/4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">-3*pi/4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">-pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">-pi/4</span>\n</code></pre>\n</div>\n\n<p>which are all correct. Compare this to the results of the ordinary\n<code>\\operatorname{atan}</code> function for the point <code>(x, y) = (-1, 1)</code></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">atan</span><span class=\"p\">,</span> <span class=\"n\">S</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">-pi/4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">3*pi/4</span>\n</code></pre>\n</div>\n\n<p>where only the <code>\\operatorname{atan2}</code> function reurns what we expect.\nWe can differentiate the function with respect to both arguments:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-y/(x**2 + y**2)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">x/(x**2 + y**2)</span>\n</code></pre>\n</div>\n\n<p>We can express the <code>\\operatorname{atan2}</code> function in terms of\ncomplex logarithms:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">log</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"p\">)</span>\n<span class=\"go\">-I*log((x + I*y)/sqrt(x**2 + y**2))</span>\n</code></pre>\n</div>\n\n<p>and in terms of <code>\\operatorname(atan)</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">atan</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atan2</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">atan</span><span class=\"p\">)</span>\n<span class=\"go\">Piecewise((2*atan(y/(x + sqrt(x**2 + y**2))), Ne(y, 0)), (pi, re(x) &lt; 0), (0, Ne(x, 0)), (nan, True))</span>\n</code></pre>\n</div>\n\n<p>but note that this form is undefined on the negative real axis.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sin, csc, cos, sec, tan, cot\nasin, acsc, acos, asec, atan, acot</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.trigonometric.atan2, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.exp_polar", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "exp_polar", "kind": "class", "doc": "<p>Represent a <em>polar number</em> (see g-function Sphinx documentation).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p><code>exp_polar</code> represents the function\n<code>Exp: \\mathbb{C} \\rightarrow \\mathcal{S}</code>, sending the complex number\n<code>z = a + bi</code> to the polar number <code>r = exp(a), \\theta = b</code>. It is one of\nthe main functions to construct polar numbers.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">exp_polar</span><span class=\"p\">,</span> <span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">exp</span>\n</code></pre>\n</div>\n\n<p>The main difference is that polar numbers do not \"wrap around\" at <code>2 \\pi</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">exp_polar(2*I*pi)</span>\n</code></pre>\n</div>\n\n<p>apart from that they behave mostly like classical complex numbers:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">exp_polar(5)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sympy.simplify.powsimp.powsimp\npolar_lift\nperiodic_argument\nprincipal_branch</p>\n", "bases": "sympy.functions.elementary.exponential.exp_polar, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.exp", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "exp", "kind": "class", "doc": "<p>The exponential function, \\( e^x \\).</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">exp</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">exp(x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">exp(x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>arg : Expr</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>log</p>\n", "bases": "sympy.functions.elementary.exponential.exp, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.ln", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "ln", "kind": "class", "doc": "<p>The natural logarithm function <code>\\ln(x)</code> or <code>\\log(x)</code>.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>Logarithms are taken with the natural base, <code>e</code>. To get\na logarithm of a different base <code>b</code>, use <code>log(x, b)</code>,\nwhich is essentially short-hand for <code>log(x)/log(b)</code>.</p>\n\n<p><code>log</code> represents the principal branch of the natural\nlogarithm. As such it has a branch cut along the negative\nreal axis and returns values having a complex argument in\n<code>(-\\pi, \\pi]</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">sqrt</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">-log(3)/log(2) + 3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">log(2) + 2*I*pi/3</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>exp</p>\n", "bases": "sympy.functions.elementary.exponential.log, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.log", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "log", "kind": "class", "doc": "<p>The natural logarithm function <code>\\ln(x)</code> or <code>\\log(x)</code>.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>Logarithms are taken with the natural base, <code>e</code>. To get\na logarithm of a different base <code>b</code>, use <code>log(x, b)</code>,\nwhich is essentially short-hand for <code>log(x)/log(b)</code>.</p>\n\n<p><code>log</code> represents the principal branch of the natural\nlogarithm. As such it has a branch cut along the negative\nreal axis and returns values having a complex argument in\n<code>(-\\pi, \\pi]</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">sqrt</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">-log(3)/log(2) + 3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">log(2) + 2*I*pi/3</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>exp</p>\n", "bases": "sympy.functions.elementary.exponential.log, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.LambertW", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "LambertW", "kind": "class", "doc": "<p>The Lambert W function $W(z)$ is defined as the inverse\nfunction of $w \\exp(w)$ <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup>.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>In other words, the value of $W(z)$ is such that $z = W(z) \\exp(W(z))$\nfor any complex number $z$.  The Lambert W function is a multivalued\nfunction with infinitely many branches $W_k(z)$, indexed by\n$k \\in \\mathbb{Z}$.  Each branch gives a different solution $w$\nof the equation $z = w \\exp(w)$.</p>\n\n<p>The Lambert W function has two partially real branches: the\nprincipal branch ($k = 0$) is real for real $z &gt; -1/e$, and the\n$k = -1$ branch is real for $-1/e &lt; z &lt; 0$. All branches except\n$k = 0$ have a logarithmic singularity at $z = 0$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">LambertW</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">LambertW</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">)</span>\n<span class=\"go\">0.635564016364870</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">LambertW</span><span class=\"p\">(</span><span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">()</span>\n<span class=\"go\">-1.34747534407696 - 4.41624341514535*I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">LambertW</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_real</span>\n<span class=\"go\">False</span>\n</code></pre>\n</div>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://en.wikipedia.org/wiki/Lambert_W_function\">https://en.wikipedia.org/wiki/Lambert_W_function</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.exponential.LambertW, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.sinh", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "sinh", "kind": "class", "doc": "<p><code>sinh(x)</code> is the hyperbolic sine of <code>x</code>.</p>\n\n<p>The hyperbolic sine function is $\\frac{e^x - e^{-x}}{2}$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">sinh</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sinh</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">sinh(x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>cosh, tanh, asinh</p>\n", "bases": "sympy.functions.elementary.hyperbolic.sinh, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.cosh", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "cosh", "kind": "class", "doc": "<p><code>cosh(x)</code> is the hyperbolic cosine of <code>x</code>.</p>\n\n<p>The hyperbolic cosine function is $\\frac{e^x + e^{-x}}{2}$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">cosh</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cosh</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">cosh(x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sinh, tanh, acosh</p>\n", "bases": "sympy.functions.elementary.hyperbolic.cosh, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.tanh", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "tanh", "kind": "class", "doc": "<p><code>tanh(x)</code> is the hyperbolic tangent of <code>x</code>.</p>\n\n<p>The hyperbolic tangent function is $\\frac{\\sinh(x)}{\\cosh(x)}$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">tanh</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">tanh</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">tanh(x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sinh, cosh, atanh</p>\n", "bases": "sympy.functions.elementary.hyperbolic.tanh, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.coth", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "coth", "kind": "class", "doc": "<p><code>coth(x)</code> is the hyperbolic cotangent of <code>x</code>.</p>\n\n<p>The hyperbolic cotangent function is $\\frac{\\cosh(x)}{\\sinh(x)}$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">coth</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">coth</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">coth(x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sinh, cosh, acoth</p>\n", "bases": "sympy.functions.elementary.hyperbolic.coth, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.sech", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "sech", "kind": "class", "doc": "<p><code>sech(x)</code> is the hyperbolic secant of <code>x</code>.</p>\n\n<p>The hyperbolic secant function is $\\frac{2}{e^x + e^{-x}}$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">sech</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sech</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">sech(x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sinh, cosh, tanh, coth, csch, asinh, acosh</p>\n", "bases": "sympy.functions.elementary.hyperbolic.sech, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.csch", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "csch", "kind": "class", "doc": "<p><code>csch(x)</code> is the hyperbolic cosecant of <code>x</code>.</p>\n\n<p>The hyperbolic cosecant function is $\\frac{2}{e^x - e^{-x}}$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">csch</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">csch</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">csch(x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sinh, cosh, tanh, sech, asinh, acosh</p>\n", "bases": "sympy.functions.elementary.hyperbolic.csch, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.asinh", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "asinh", "kind": "class", "doc": "<p><code>asinh(x)</code> is the inverse hyperbolic sine of <code>x</code>.</p>\n\n<p>The inverse hyperbolic sine function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">asinh</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asinh</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1/sqrt(x**2 + 1)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asinh</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">log(1 + sqrt(2))</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>acosh, atanh, sinh</p>\n", "bases": "sympy.functions.elementary.hyperbolic.asinh, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.acosh", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "acosh", "kind": "class", "doc": "<p><code>acosh(x)</code> is the inverse hyperbolic cosine of <code>x</code>.</p>\n\n<p>The inverse hyperbolic cosine function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">acosh</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acosh</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1/(sqrt(x - 1)*sqrt(x + 1))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acosh</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>asinh, atanh, cosh</p>\n", "bases": "sympy.functions.elementary.hyperbolic.acosh, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.atanh", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "atanh", "kind": "class", "doc": "<p><code>atanh(x)</code> is the inverse hyperbolic tangent of <code>x</code>.</p>\n\n<p>The inverse hyperbolic tangent function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">atanh</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">atanh</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1/(1 - x**2)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>asinh, acosh, tanh</p>\n", "bases": "sympy.functions.elementary.hyperbolic.atanh, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.acoth", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "acoth", "kind": "class", "doc": "<p><code>acoth(x)</code> is the inverse hyperbolic cotangent of <code>x</code>.</p>\n\n<p>The inverse hyperbolic cotangent function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">acoth</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acoth</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1/(1 - x**2)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>asinh, acosh, coth</p>\n", "bases": "sympy.functions.elementary.hyperbolic.acoth, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.asech", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "asech", "kind": "class", "doc": "<p><code>asech(x)</code> is the inverse hyperbolic secant of <code>x</code>.</p>\n\n<p>The inverse hyperbolic secant function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">asech</span><span class=\"p\">,</span> <span class=\"n\">sqrt</span><span class=\"p\">,</span> <span class=\"n\">S</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asech</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-1/(x*sqrt(1 - x**2))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asech</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asech</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asech</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">I*pi/3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asech</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">3*I*pi/4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">asech</span><span class=\"p\">((</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"go\">I*pi/12</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>asinh, atanh, cosh, acoth</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.hyperbolic.asech, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.acsch", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "acsch", "kind": "class", "doc": "<p><code>acsch(x)</code> is the inverse hyperbolic cosecant of <code>x</code>.</p>\n\n<p>The inverse hyperbolic cosecant function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">acsch</span><span class=\"p\">,</span> <span class=\"n\">sqrt</span><span class=\"p\">,</span> <span class=\"n\">S</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acsch</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-1/(x**2*sqrt(1 + x**(-2)))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acsch</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acsch</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">log(1 + sqrt(2))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acsch</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">ImaginaryUnit</span><span class=\"p\">)</span>\n<span class=\"go\">-I*pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acsch</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">ImaginaryUnit</span><span class=\"p\">)</span>\n<span class=\"go\">I*pi/6</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">acsch</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"o\">.</span><span class=\"n\">ImaginaryUnit</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"go\">-5*I*pi/12</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>asinh</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.hyperbolic.acsch, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.floor", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "floor", "kind": "class", "doc": "<p>Floor is a univariate function which returns the largest integer\nvalue not greater than its argument. This implementation\ngeneralizes floor to complex numbers by taking the floor of the\nreal and imaginary parts separately.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">floor</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">Float</span><span class=\"p\">,</span> <span class=\"n\">Rational</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"go\">17</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">Rational</span><span class=\"p\">(</span><span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">E</span><span class=\"p\">)</span>\n<span class=\"go\">5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">Float</span><span class=\"p\">(</span><span class=\"mf\">0.567</span><span class=\"p\">))</span>\n<span class=\"go\">-1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">-I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">floor</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">2 + 2*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sympy.functions.elementary.integers.ceiling</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.integers.floor, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.ceiling", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "ceiling", "kind": "class", "doc": "<p>Ceiling is a univariate function which returns the smallest integer\nvalue not less than its argument. This implementation\ngeneralizes ceiling to complex numbers by taking the ceiling of the\nreal and imaginary parts separately.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">ceiling</span><span class=\"p\">,</span> <span class=\"n\">E</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">Float</span><span class=\"p\">,</span> <span class=\"n\">Rational</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ceiling</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"go\">17</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ceiling</span><span class=\"p\">(</span><span class=\"n\">Rational</span><span class=\"p\">(</span><span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ceiling</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">E</span><span class=\"p\">)</span>\n<span class=\"go\">6</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ceiling</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">Float</span><span class=\"p\">(</span><span class=\"mf\">0.567</span><span class=\"p\">))</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ceiling</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ceiling</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">3 + 3*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sympy.functions.elementary.integers.floor</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.integers.ceiling, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.frac", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "frac", "kind": "class", "doc": "<p>Represents the fractional part of x</p>\n\n<p>For real numbers it is defined <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> as</p>\n\n<p>$$x - \\left\\lfloor{x}\\right\\rfloor$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"n\">Rational</span><span class=\"p\">,</span> <span class=\"n\">floor</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">frac</span><span class=\"p\">(</span><span class=\"n\">Rational</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">1/3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">frac</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">Rational</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">2/3</span>\n</code></pre>\n</div>\n\n<p>returns zero for integer arguments</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">frac</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<p>rewrite as floor</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">frac</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">floor</span><span class=\"p\">)</span>\n<span class=\"go\">x - floor(x)</span>\n</code></pre>\n</div>\n\n<p>for complex arguments</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;t&#39;</span><span class=\"p\">,</span> <span class=\"n\">real</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">frac</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"go\">I*frac(r) + frac(t)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>sympy.functions.elementary.integers.floor\nsympy.functions.elementary.integers.ceiling</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://en.wikipedia.org/wiki/Fractional_part\">https://en.wikipedia.org/wiki/Fractional_part</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "bases": "sympy.functions.elementary.integers.frac, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.erf", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "erf", "kind": "class", "doc": "<p>The Gauss error function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined as:</p>\n\n<p>.. math ::\n    \\mathrm{erf}(x) = \\frac{2}{\\sqrt{\\pi}} \\int_0^x e^{-t^2} \\mathrm{d}t.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">erf</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo*I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-oo*I</span>\n</code></pre>\n</div>\n\n<p>In general one can pull out factors of -1 and $I$ from the argument:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">-erf(z)</span>\n</code></pre>\n</div>\n\n<p>The error function obeys the mirror symmetry:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">erf</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">erf(conjugate(z))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $z$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">erf</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">2*exp(-z**2)/sqrt(pi)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the error function to arbitrary precision\non the whole complex plane:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">0.999999984582742099719981147840</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">-1296959.73071763923152794095062*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>erfc: Complementary error function.\nerfi: Imaginary error function.\nerf2: Two-argument error function.\nerfinv: Inverse error function.\nerfcinv: Inverse Complementary error function.\nerf2inv: Inverse two-argument error function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.erf, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.erfc", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "erfc", "kind": "class", "doc": "<p>Complementary Error Function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The function is defined as:</p>\n\n<p>.. math ::\n    \\mathrm{erfc}(x) = \\frac{2}{\\sqrt{\\pi}} \\int_x^\\infty e^{-t^2} \\mathrm{d}t</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">erfc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfc</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfc</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfc</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfc</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-oo*I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfc</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo*I</span>\n</code></pre>\n</div>\n\n<p>The error function obeys the mirror symmetry:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">erfc</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">erfc(conjugate(z))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $z$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">erfc</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">-2*exp(-z**2)/sqrt(pi)</span>\n</code></pre>\n</div>\n\n<p>It also follows</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfc</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">2 - erfc(z)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the complementary error function to arbitrary\nprecision on the whole complex plane:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfc</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">0.0000000154172579002800188521596734869</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfc</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">1.0 - 1296959.73071763923152794095062*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>erf: Gaussian error function.\nerfi: Imaginary error function.\nerf2: Two-argument error function.\nerfinv: Inverse error function.\nerfcinv: Inverse Complementary error function.\nerf2inv: Inverse two-argument error function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.erfc, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.erfi", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "erfi", "kind": "class", "doc": "<p>Imaginary error function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The function erfi is defined as:</p>\n\n<p>.. math ::\n    \\mathrm{erfi}(x) = \\frac{2}{\\sqrt{\\pi}} \\int_0^x e^{t^2} \\mathrm{d}t</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">erfi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfi</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfi</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfi</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfi</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfi</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-I</span>\n</code></pre>\n</div>\n\n<p>In general one can pull out factors of -1 and $I$ from the argument:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfi</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">-erfi(z)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">erfi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">erfi(conjugate(z))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $z$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">erfi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">2*exp(z**2)/sqrt(pi)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the imaginary error function to arbitrary\nprecision on the whole complex plane:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfi</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">18.5648024145755525987042919132</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfi</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">-0.995322265018952734162069256367*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>erf: Gaussian error function.\nerfc: Complementary error function.\nerf2: Two-argument error function.\nerfinv: Inverse error function.\nerfcinv: Inverse Complementary error function.\nerf2inv: Inverse two-argument error function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.erfi, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.erf2", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "erf2", "kind": "class", "doc": "<p>Two-argument error function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined as:</p>\n\n<p>.. math ::\n    \\mathrm{erf2}(x, y) = \\frac{2}{\\sqrt{\\pi}} \\int_x^y e^{-t^2} \\mathrm{d}t</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">erf2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">1 - erf(x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-erf(x) - 1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">erf(y) - 1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">erf(y) + 1</span>\n</code></pre>\n</div>\n\n<p>In general one can pull out factors of -1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">-erf2(x, y)</span>\n</code></pre>\n</div>\n\n<p>The error function obeys the mirror symmetry:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">erf2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"go\">erf2(conjugate(x), conjugate(y))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $x$, $y$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">erf2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-2*exp(-x**2)/sqrt(pi)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">erf2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">2*exp(-y**2)/sqrt(pi)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>erf: Gaussian error function.\nerfc: Complementary error function.\nerfi: Imaginary error function.\nerfinv: Inverse error function.\nerfcinv: Inverse Complementary error function.\nerf2inv: Inverse two-argument error function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.erf2, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.erfinv", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "erfinv", "kind": "class", "doc": "<p>Inverse Error Function. The erfinv function is defined as:</p>\n\n<p>.. math ::\n    \\mathrm{erf}(x) = y \\quad \\Rightarrow \\quad \\mathrm{erfinv}(y) = x</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">erfinv</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfinv</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfinv</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $x$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">erfinv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(pi)*exp(erfinv(x)**2)/2</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the inverse error function to arbitrary\nprecision on [-1, 1]:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfinv</span><span class=\"p\">(</span><span class=\"mf\">0.2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">0.179143454621291692285822705344</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>erf: Gaussian error function.\nerfc: Complementary error function.\nerfi: Imaginary error function.\nerf2: Two-argument error function.\nerfcinv: Inverse Complementary error function.\nerf2inv: Inverse two-argument error function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.erfinv, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.erfcinv", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "erfcinv", "kind": "class", "doc": "<p>Inverse Complementary Error Function. The erfcinv function is defined as:</p>\n\n<p>.. math ::\n    \\mathrm{erfc}(x) = y \\quad \\Rightarrow \\quad \\mathrm{erfcinv}(y) = x</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">erfcinv</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfcinv</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erfcinv</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $x$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">erfcinv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-sqrt(pi)*exp(erfcinv(x)**2)/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>erf: Gaussian error function.\nerfc: Complementary error function.\nerfi: Imaginary error function.\nerf2: Two-argument error function.\nerfinv: Inverse error function.\nerf2inv: Inverse two-argument error function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.erfcinv, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.erf2inv", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "erf2inv", "kind": "class", "doc": "<p>Two-argument Inverse error function. The erf2inv function is defined as:</p>\n\n<p>.. math ::\n    \\mathrm{erf2}(x, w) = y \\quad \\Rightarrow \\quad \\mathrm{erf2inv}(x, y) = w</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">erf2inv</span><span class=\"p\">,</span> <span class=\"n\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2inv</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2inv</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2inv</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2inv</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">erfinv(y)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">erf2inv</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">erfcinv(-y)</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $x$ and $y$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">erf2inv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">exp(-x**2 + erf2inv(x, y)**2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">erf2inv</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(pi)*exp(erf2inv(x, y)**2)/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>erf: Gaussian error function.\nerfc: Complementary error function.\nerfi: Imaginary error function.\nerf2: Two-argument error function.\nerfinv: Inverse error function.\nerfcinv: Inverse complementary error function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.erf2inv, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.Ei", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Ei", "kind": "class", "doc": "<p>The classical exponential integral.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>For use in SymPy, this function is defined as</p>\n\n<p>$$\\operatorname{Ei}(x) = \\sum_{n=1}^\\infty \\frac{x^n}{n\\, n!}+ \\log(x) + \\gamma,$$</p>\n\n<p>where $\\gamma$ is the Euler-Mascheroni constant.</p>\n\n<p>If $x$ is a polar number, this defines an analytic function on the\nRiemann surface of the logarithm. Otherwise this defines an analytic\nfunction in the cut plane $\\mathbb{C} \\setminus (-\\infty, 0]$.</p>\n\n<p><strong>Background</strong></p>\n\n<p>The name exponential integral comes from the following statement:</p>\n\n<p>$$\\operatorname{Ei}(x) = \\int_{-\\infty}^x \\frac{e^t}{t} \\mathrm{d}t$$</p>\n\n<p>If the integral is interpreted as a Cauchy principal value, this statement\nholds for $x &gt; 0$ and $\\operatorname{Ei}(x)$ as defined above.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Ei</span><span class=\"p\">,</span> <span class=\"n\">polar_lift</span><span class=\"p\">,</span> <span class=\"n\">exp_polar</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ei</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">Ei(-1)</span>\n</code></pre>\n</div>\n\n<p>This yields a real value:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ei</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">(</span><span class=\"n\">chop</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">-0.219383934395520</span>\n</code></pre>\n</div>\n\n<p>On the other hand the analytic continuation is not real:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ei</span><span class=\"p\">(</span><span class=\"n\">polar_lift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">(</span><span class=\"n\">chop</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">-0.21938393439552 + 3.14159265358979*I</span>\n</code></pre>\n</div>\n\n<p>The exponential integral has a logarithmic branch point at the origin:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ei</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">*</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">))</span>\n<span class=\"go\">Ei(x) + 2*I*pi</span>\n</code></pre>\n</div>\n\n<p>Differentiation is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ei</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">exp(x)/x</span>\n</code></pre>\n</div>\n\n<p>The exponential integral is related to many other special functions.\nFor example:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">expint</span><span class=\"p\">,</span> <span class=\"n\">Shi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ei</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">expint</span><span class=\"p\">)</span>\n<span class=\"go\">-expint(1, x*exp_polar(I*pi)) - I*pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ei</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">Shi</span><span class=\"p\">)</span>\n<span class=\"go\">Chi(x) + Shi(x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>expint: Generalised exponential integral.\nE1: Special case of the generalised exponential integral.\nli: Logarithmic integral.\nLi: Offset logarithmic integral.\nSi: Sine integral.\nCi: Cosine integral.\nShi: Hyperbolic sine integral.\nChi: Hyperbolic cosine integral.\nuppergamma: Upper incomplete gamma function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.Ei, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.expint", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "expint", "kind": "class", "doc": "<p>Generalized exponential integral.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined as</p>\n\n<p>$$\\operatorname{E}_\\nu(z) = z^{\\nu - 1} \\Gamma(1 - \\nu, z),$$</p>\n\n<p>where $\\Gamma(1 - \\nu, z)$ is the upper incomplete gamma function\n(<code>uppergamma</code>).</p>\n\n<p>Hence for $z$ with positive real part we have</p>\n\n<p>$$\\operatorname{E}_\\nu(z)=   \\int_1^\\infty \\frac{e^{-zt}}{t^\\nu} \\mathrm{d}t,$$</p>\n\n<p>which explains the name.</p>\n\n<p>The representation as an incomplete gamma function provides an analytic\ncontinuation for $\\operatorname{E}_\\nu(z)$. If $\\nu$ is a\nnon-positive integer, the exponential integral is thus an unbranched\nfunction of $z$, otherwise there is a branch point at the origin.\nRefer to the incomplete gamma function documentation for details of the\nbranching behavior.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">expint</span><span class=\"p\">,</span> <span class=\"n\">S</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>Differentiation is supported. Differentiation with respect to $z$ further\nexplains the name: for integral orders, the exponential integral is an\niterated integral of the exponential function.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expint</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">-expint(nu - 1, z)</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $\\nu$ has no classical expression:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expint</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">)</span>\n<span class=\"go\">-z**(nu - 1)*meijerg(((), (1, 1)), ((0, 0, 1 - nu), ()), z)</span>\n</code></pre>\n</div>\n\n<p>At non-postive integer orders, the exponential integral reduces to the\nexponential function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">exp(-z)/z</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expint</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">exp(-z)/z + exp(-z)/z**2</span>\n</code></pre>\n</div>\n\n<p>At half-integers it reduces to error functions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expint</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(pi)*erfc(sqrt(z))/sqrt(z)</span>\n</code></pre>\n</div>\n\n<p>At positive integer orders it can be rewritten in terms of exponentials\nand <code>expint(1, z)</code>. Use <code>expand_func()</code> to do this:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">expand_func</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">expint</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">z**4*expint(1, z)/24 + (-z**3 + z**2 - 2*z + 6)*exp(-z)/24</span>\n</code></pre>\n</div>\n\n<p>The generalised exponential integral is essentially equivalent to the\nincomplete gamma function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">uppergamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expint</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">uppergamma</span><span class=\"p\">)</span>\n<span class=\"go\">z**(nu - 1)*uppergamma(1 - nu, z)</span>\n</code></pre>\n</div>\n\n<p>As such it is branched at the origin:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">exp_polar</span><span class=\"p\">,</span> <span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expint</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">))</span>\n<span class=\"go\">I*pi*z**3/3 + expint(4, z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expint</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">))</span>\n<span class=\"go\">z**(nu - 1)*(exp(2*I*pi*nu) - 1)*gamma(1 - nu) + expint(nu, z)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Ei: Another related function called exponential integral.\nE1: The classical case, returns expint(1, z).\nli: Logarithmic integral.\nLi: Offset logarithmic integral.\nSi: Sine integral.\nCi: Cosine integral.\nShi: Hyperbolic sine integral.\nChi: Hyperbolic cosine integral.\nuppergamma</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.expint, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.li", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "li", "kind": "class", "doc": "<p>The classical logarithmic integral.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>For use in SymPy, this function is defined as</p>\n\n<p>$$\\operatorname{li}(x) = \\int_0^x \\frac{1}{\\log(t)} \\mathrm{d}t \\,.$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">li</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">-oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $z$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">1/log(z)</span>\n</code></pre>\n</div>\n\n<p>Defining the <code>li</code> function via an integral:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">integrate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">integrate</span><span class=\"p\">(</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">z*li(z) - Ei(2*log(z))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">integrate</span><span class=\"p\">(</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">z*li(z) - Ei(2*log(z))</span>\n</code></pre>\n</div>\n\n<p>The logarithmic integral can also be defined in terms of <code>Ei</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Ei</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">Ei</span><span class=\"p\">)</span>\n<span class=\"go\">Ei(log(z))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">Ei</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">1/log(z)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the logarithmic integral to arbitrary precision\non the whole complex plane (except the singular points):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">1.04516378011749278484458888919</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">1.0652795784357498247001125598 + 3.08346052231061726610939702133*I</span>\n</code></pre>\n</div>\n\n<p>We can even compute Soldner's constant by the help of mpmath:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">mpmath</span> <span class=\"kn\">import</span> <span class=\"n\">findroot</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">findroot</span><span class=\"p\">(</span><span class=\"n\">li</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">1.45136923488338</span>\n</code></pre>\n</div>\n\n<p>Further transformations include rewriting <code>li</code> in terms of\nthe trigonometric integrals <code>Si</code>, <code>Ci</code>, <code>Shi</code> and <code>Chi</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Si</span><span class=\"p\">,</span> <span class=\"n\">Ci</span><span class=\"p\">,</span> <span class=\"n\">Shi</span><span class=\"p\">,</span> <span class=\"n\">Chi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">Si</span><span class=\"p\">)</span>\n<span class=\"go\">-log(I*log(z)) - log(1/log(z))/2 + log(log(z))/2 + Ci(I*log(z)) + Shi(log(z))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">Ci</span><span class=\"p\">)</span>\n<span class=\"go\">-log(I*log(z)) - log(1/log(z))/2 + log(log(z))/2 + Ci(I*log(z)) + Shi(log(z))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">Shi</span><span class=\"p\">)</span>\n<span class=\"go\">-log(1/log(z))/2 + log(log(z))/2 + Chi(log(z)) - Shi(log(z))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">li</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">Chi</span><span class=\"p\">)</span>\n<span class=\"go\">-log(1/log(z))/2 + log(log(z))/2 + Chi(log(z)) - Shi(log(z))</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Li: Offset logarithmic integral.\nEi: Exponential integral.\nexpint: Generalised exponential integral.\nE1: Special case of the generalised exponential integral.\nSi: Sine integral.\nCi: Cosine integral.\nShi: Hyperbolic sine integral.\nChi: Hyperbolic cosine integral.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.li, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.Li", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Li", "kind": "class", "doc": "<p>The offset logarithmic integral.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>For use in SymPy, this function is defined as</p>\n\n<p>$$\\operatorname{Li}(x) = \\operatorname{li}(x) - \\operatorname{li}(2)$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Li</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>The following special value is known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Li</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $z$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">Li</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">1/log(z)</span>\n</code></pre>\n</div>\n\n<p>The shifted logarithmic integral can be written in terms of $li(z)$:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">li</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Li</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">li</span><span class=\"p\">)</span>\n<span class=\"go\">li(z) - li(2)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the logarithmic integral to arbitrary precision\non the whole complex plane (except the singular points):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Li</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Li</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">1.92242131492155809316615998938</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>li: Logarithmic integral.\nEi: Exponential integral.\nexpint: Generalised exponential integral.\nE1: Special case of the generalised exponential integral.\nSi: Sine integral.\nCi: Cosine integral.\nShi: Hyperbolic sine integral.\nChi: Hyperbolic cosine integral.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.Li, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.Si", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Si", "kind": "class", "doc": "<p>Sine integral.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined by</p>\n\n<p>$$\\operatorname{Si}(z) = \\int_0^z \\frac{\\sin{t}}{t} \\mathrm{d}t.$$</p>\n\n<p>It is an entire function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Si</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>The sine integral is an antiderivative of $sin(z)/z$:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Si</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">sin(z)/z</span>\n</code></pre>\n</div>\n\n<p>It is unbranched:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">exp_polar</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Si</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">))</span>\n<span class=\"go\">Si(z)</span>\n</code></pre>\n</div>\n\n<p>Sine integral behaves much like ordinary sine under multiplication by <code>I</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Si</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">I*Shi(z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Si</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">-Si(z)</span>\n</code></pre>\n</div>\n\n<p>It can also be expressed in terms of exponential integrals, but beware\nthat the latter is branched:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">expint</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Si</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">expint</span><span class=\"p\">)</span>\n<span class=\"go\">-I*(-expint(1, z*exp_polar(-I*pi/2))/2 +</span>\n<span class=\"go\">     expint(1, z*exp_polar(I*pi/2))/2) + pi/2</span>\n</code></pre>\n</div>\n\n<p>It can be rewritten in the form of sinc function (by definition):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">sinc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Si</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">sinc</span><span class=\"p\">)</span>\n<span class=\"go\">Integral(sinc(t), (t, 0, z))</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Ci: Cosine integral.\nShi: Hyperbolic sine integral.\nChi: Hyperbolic cosine integral.\nEi: Exponential integral.\nexpint: Generalised exponential integral.\nsinc: unnormalized sinc function\nE1: Special case of the generalised exponential integral.\nli: Logarithmic integral.\nLi: Offset logarithmic integral.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.Si, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.Ci", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Ci", "kind": "class", "doc": "<p>Cosine integral.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined for positive $x$ by</p>\n\n<p>$$\\operatorname{Ci}(x) = \\gamma + \\log{x}+ \\int_0^x \\frac{\\cos{t} - 1}{t} \\mathrm{d}t\n= -\\int_x^\\infty \\frac{\\cos{t}}{t} \\mathrm{d}t,$$</p>\n\n<p>where $\\gamma$ is the Euler-Mascheroni constant.</p>\n\n<p>We have</p>\n\n<p>$$\\operatorname{Ci}(z) =-\\frac{\\operatorname{E}_1\\left(e^{i\\pi/2} z\\right)\n       + \\operatorname{E}_1\\left(e^{-i \\pi/2} z\\right)}{2}$$</p>\n\n<p>which holds for all polar $z$ and thus provides an analytic\ncontinuation to the Riemann surface of the logarithm.</p>\n\n<p>The formula also holds as stated\nfor $z \\in \\mathbb{C}$ with $\\Re(z) &gt; 0$.\nBy lifting to the principal branch, we obtain an analytic function on the\ncut complex plane.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Ci</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>The cosine integral is a primitive of $\\cos(z)/z$:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ci</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">cos(z)/z</span>\n</code></pre>\n</div>\n\n<p>It has a logarithmic branch point at the origin:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">exp_polar</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ci</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">))</span>\n<span class=\"go\">Ci(z) + 2*I*pi</span>\n</code></pre>\n</div>\n\n<p>The cosine integral behaves somewhat like ordinary $\\cos$ under\nmultiplication by $i$:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">polar_lift</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ci</span><span class=\"p\">(</span><span class=\"n\">polar_lift</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">Chi(z) + I*pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ci</span><span class=\"p\">(</span><span class=\"n\">polar_lift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">Ci(z) + I*pi</span>\n</code></pre>\n</div>\n\n<p>It can also be expressed in terms of exponential integrals:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">expint</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ci</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">expint</span><span class=\"p\">)</span>\n<span class=\"go\">-expint(1, z*exp_polar(-I*pi/2))/2 - expint(1, z*exp_polar(I*pi/2))/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Si: Sine integral.\nShi: Hyperbolic sine integral.\nChi: Hyperbolic cosine integral.\nEi: Exponential integral.\nexpint: Generalised exponential integral.\nE1: Special case of the generalised exponential integral.\nli: Logarithmic integral.\nLi: Offset logarithmic integral.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.Ci, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.Shi", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Shi", "kind": "class", "doc": "<p>Sinh integral.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined by</p>\n\n<p>$$\\operatorname{Shi}(z) = \\int_0^z \\frac{\\sinh{t}}{t} \\mathrm{d}t.$$</p>\n\n<p>It is an entire function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Shi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>The Sinh integral is a primitive of $\\sinh(z)/z$:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Shi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">sinh(z)/z</span>\n</code></pre>\n</div>\n\n<p>It is unbranched:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">exp_polar</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Shi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">))</span>\n<span class=\"go\">Shi(z)</span>\n</code></pre>\n</div>\n\n<p>The $\\sinh$ integral behaves much like ordinary $\\sinh$ under\nmultiplication by $i$:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Shi</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">I*Si(z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Shi</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">-Shi(z)</span>\n</code></pre>\n</div>\n\n<p>It can also be expressed in terms of exponential integrals, but beware\nthat the latter is branched:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">expint</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Shi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">expint</span><span class=\"p\">)</span>\n<span class=\"go\">expint(1, z)/2 - expint(1, z*exp_polar(I*pi))/2 - I*pi/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Si: Sine integral.\nCi: Cosine integral.\nChi: Hyperbolic cosine integral.\nEi: Exponential integral.\nexpint: Generalised exponential integral.\nE1: Special case of the generalised exponential integral.\nli: Logarithmic integral.\nLi: Offset logarithmic integral.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.Shi, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.Chi", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Chi", "kind": "class", "doc": "<p>Cosh integral.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined for positive $x$ by</p>\n\n<p>$$\\operatorname{Chi}(x) = \\gamma + \\log{x}+ \\int_0^x \\frac{\\cosh{t} - 1}{t} \\mathrm{d}t,$$</p>\n\n<p>where $\\gamma$ is the Euler-Mascheroni constant.</p>\n\n<p>We have</p>\n\n<p>$$\\operatorname{Chi}(z) = \\operatorname{Ci}\\left(e^{i \\pi/2}z\\right)- i\\frac{\\pi}{2},$$</p>\n\n<p>which holds for all polar $z$ and thus provides an analytic\ncontinuation to the Riemann surface of the logarithm.\nBy lifting to the principal branch we obtain an analytic function on the\ncut complex plane.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Chi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>The $\\cosh$ integral is a primitive of $\\cosh(z)/z$:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Chi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">cosh(z)/z</span>\n</code></pre>\n</div>\n\n<p>It has a logarithmic branch point at the origin:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">exp_polar</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Chi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">*</span><span class=\"n\">exp_polar</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">pi</span><span class=\"p\">))</span>\n<span class=\"go\">Chi(z) + 2*I*pi</span>\n</code></pre>\n</div>\n\n<p>The $\\cosh$ integral behaves somewhat like ordinary $\\cosh$ under\nmultiplication by $i$:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">polar_lift</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Chi</span><span class=\"p\">(</span><span class=\"n\">polar_lift</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">Ci(z) + I*pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Chi</span><span class=\"p\">(</span><span class=\"n\">polar_lift</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">Chi(z) + I*pi</span>\n</code></pre>\n</div>\n\n<p>It can also be expressed in terms of exponential integrals:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">expint</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Chi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">expint</span><span class=\"p\">)</span>\n<span class=\"go\">-expint(1, z)/2 - expint(1, z*exp_polar(I*pi))/2 - I*pi/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Si: Sine integral.\nCi: Cosine integral.\nShi: Hyperbolic sine integral.\nEi: Exponential integral.\nexpint: Generalised exponential integral.\nE1: Special case of the generalised exponential integral.\nli: Logarithmic integral.\nLi: Offset logarithmic integral.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.Chi, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.fresnels", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "fresnels", "kind": "class", "doc": "<p>Fresnel integral S.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined by</p>\n\n<p>$$\\operatorname{S}(z) = \\int_0^z \\sin{\\frac{\\pi}{2} t^2} \\mathrm{d}t.$$</p>\n\n<p>It is an entire function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">fresnels</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnels</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnels</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">1/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnels</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-1/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnels</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-I/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnels</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">I/2</span>\n</code></pre>\n</div>\n\n<p>In general one can pull out factors of -1 and $i$ from the argument:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnels</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">-fresnels(z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnels</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">-I*fresnels(z)</span>\n</code></pre>\n</div>\n\n<p>The Fresnel S integral obeys the mirror symmetry\n$\\overline{S(z)} = S(\\bar{z})$:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">fresnels</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">fresnels(conjugate(z))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $z$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">fresnels</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">sin(pi*z**2/2)</span>\n</code></pre>\n</div>\n\n<p>Defining the Fresnel functions via an integral:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">integrate</span><span class=\"p\">,</span> <span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"n\">expand_func</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">integrate</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">3*fresnels(z)*gamma(3/4)/(4*gamma(7/4))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">integrate</span><span class=\"p\">(</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">fresnels(z)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the Fresnel integral to arbitrary precision\non the whole complex plane:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnels</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">0.343415678363698242195300815958</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnels</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">0.343415678363698242195300815958*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>fresnelc: Fresnel cosine integral.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.fresnels, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.fresnelc", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "fresnelc", "kind": "class", "doc": "<p>Fresnel integral C.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined by</p>\n\n<p>$$\\operatorname{C}(z) = \\int_0^z \\cos{\\frac{\\pi}{2} t^2} \\mathrm{d}t.$$</p>\n\n<p>It is an entire function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">fresnelc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnelc</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnelc</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">1/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnelc</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-1/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnelc</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">I/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnelc</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">-I/2</span>\n</code></pre>\n</div>\n\n<p>In general one can pull out factors of -1 and $i$ from the argument:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnelc</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">-fresnelc(z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnelc</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">I*fresnelc(z)</span>\n</code></pre>\n</div>\n\n<p>The Fresnel C integral obeys the mirror symmetry\n$\\overline{C(z)} = C(\\bar{z})$:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">fresnelc</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">fresnelc(conjugate(z))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $z$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">fresnelc</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">cos(pi*z**2/2)</span>\n</code></pre>\n</div>\n\n<p>Defining the Fresnel functions via an integral:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">integrate</span><span class=\"p\">,</span> <span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"n\">cos</span><span class=\"p\">,</span> <span class=\"n\">expand_func</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">integrate</span><span class=\"p\">(</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">fresnelc(z)*gamma(1/4)/(4*gamma(5/4))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">integrate</span><span class=\"p\">(</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">fresnelc(z)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the Fresnel integral to arbitrary precision\non the whole complex plane:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnelc</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">0.488253406075340754500223503357</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fresnelc</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">-0.488253406075340754500223503357*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>fresnels: Fresnel sine integral.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.error_functions.fresnelc, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.gamma", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "gamma", "kind": "class", "doc": "<p>The gamma function</p>\n\n<p>$$\\Gamma(x) := \\int^{\\infty}_{0} t^{x-1} e^{-t} \\mathrm{d}t.$$</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The <code>gamma</code> function implements the function which passes through the\nvalues of the factorial function (i.e., $\\Gamma(n) = (n - 1)!$ when n is\nan integer). More generally, $\\Gamma(z)$ is defined in the whole complex\nplane except at the negative integers where there are simple poles.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span><span class=\"p\">,</span> <span class=\"n\">gamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gamma</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gamma</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">6</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gamma</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(pi)/2</span>\n</code></pre>\n</div>\n\n<p>The <code>gamma</code> function obeys the mirror symmetry:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">gamma</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">gamma(conjugate(x))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $x$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">gamma</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">gamma(x)*polygamma(0, x)</span>\n</code></pre>\n</div>\n\n<p>Series expansion is also supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">series</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"n\">gamma</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">1/x - EulerGamma + x*(EulerGamma**2/2 + pi**2/12) + x**2*(-EulerGamma*pi**2/12 + polygamma(2, 1)/6 - EulerGamma**3/6) + O(x**3)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the <code>gamma</code> function to arbitrary precision\non the whole complex plane:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gamma</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"go\">2.288037795340032417959588909060233922890</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gamma</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"go\">0.49801566811835604271 - 0.15494982830181068512*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>lowergamma: Lower incomplete gamma function.\nuppergamma: Upper incomplete gamma function.\npolygamma: Polygamma function.\nloggamma: Log Gamma function.\ndigamma: Digamma function.\ntrigamma: Trigamma function.\nbeta: Euler Beta function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.gamma_functions.gamma, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.lowergamma", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "lowergamma", "kind": "class", "doc": "<p>The lower incomplete gamma function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>It can be defined as the meromorphic continuation of</p>\n\n<p>$$\\gamma(s, x) := \\int_0^x t^{s-1} e^{-t} \\mathrm{d}t = \\Gamma(s) - \\Gamma(s, x).$$</p>\n\n<p>This can be shown to be the same as</p>\n\n<p>$$\\gamma(s, x) = \\frac{x^s}{s} {}_1F_1\\left({s \\atop s+1} \\middle| -x\\right),$$</p>\n\n<p>where ${}_1F_1$ is the (confluent) hypergeometric function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">lowergamma</span><span class=\"p\">,</span> <span class=\"n\">S</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lowergamma</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">lowergamma(s, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lowergamma</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-2*(x**2/2 + x + 1)*exp(-x) + 2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lowergamma</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-2*sqrt(pi)*erf(sqrt(x)) - 2*exp(-x)/sqrt(x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>gamma: Gamma function.\nuppergamma: Upper incomplete gamma function.\npolygamma: Polygamma function.\nloggamma: Log Gamma function.\ndigamma: Digamma function.\ntrigamma: Trigamma function.\nbeta: Euler Beta function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.gamma_functions.lowergamma, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.uppergamma", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "uppergamma", "kind": "class", "doc": "<p>The upper incomplete gamma function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>It can be defined as the meromorphic continuation of</p>\n\n<p>$$\\Gamma(s, x) := \\int_x^\\infty t^{s-1} e^{-t} \\mathrm{d}t = \\Gamma(s) - \\gamma(s, x).$$</p>\n\n<p>where $\\gamma(s, x)$ is the lower incomplete gamma function,\n<code>lowergamma</code>. This can be shown to be the same as</p>\n\n<p>$$\\Gamma(s, x) = \\Gamma(s) - \\frac{x^s}{s} {}_1F_1\\left({s \\atop s+1} \\middle| -x\\right),$$</p>\n\n<p>where ${}_1F_1$ is the (confluent) hypergeometric function.</p>\n\n<p>The upper incomplete gamma function is also essentially equivalent to the\ngeneralized exponential integral:</p>\n\n<p>$$\\operatorname{E}_{n}(x) = \\int_{1}^{\\infty}{\\frac{e^{-xt}}{t^n} \\, dt} = x^{n-1}\\Gamma(1-n,x).$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">uppergamma</span><span class=\"p\">,</span> <span class=\"n\">S</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uppergamma</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">uppergamma(s, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uppergamma</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*(x**2/2 + x + 1)*exp(-x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uppergamma</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-2*sqrt(pi)*erfc(sqrt(x)) + 2*exp(-x)/sqrt(x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">uppergamma</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">expint(3, x)/x**2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>gamma: Gamma function.\nlowergamma: Lower incomplete gamma function.\npolygamma: Polygamma function.\nloggamma: Log Gamma function.\ndigamma: Digamma function.\ntrigamma: Trigamma function.\nbeta: Euler Beta function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.gamma_functions.uppergamma, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.polygamma", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "polygamma", "kind": "class", "doc": "<p>The function <code>polygamma(n, z)</code> returns <code>log(gamma(z)).diff(n + 1)</code>.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>It is a meromorphic function on $\\mathbb{C}$ and defined as the $(n+1)$-th\nderivative of the logarithm of the gamma function:</p>\n\n<p>$$\\psi^{(n)} (z) := \\frac{\\mathrm{d}^{n+1}}{\\mathrm{d} z^{n+1}} \\log\\Gamma(z).$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">polygamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">-EulerGamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">-2*log(2) - EulerGamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"go\">-log(3) - sqrt(3)*pi/6 - EulerGamma - log(sqrt(3))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"go\">-pi/2 - log(4) - log(2) - EulerGamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">1 - EulerGamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">)</span>\n<span class=\"go\">19093197/5173168 - EulerGamma</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">oo</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">I</span><span class=\"o\">*</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $x$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(1, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(2, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(3, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(2, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(3, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(3, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(4, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;n&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(n + 1, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(n + 2, x)</span>\n</code></pre>\n</div>\n\n<p>We can rewrite <code>polygamma</code> functions in terms of harmonic numbers:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">harmonic</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">harmonic</span><span class=\"p\">)</span>\n<span class=\"go\">harmonic(x - 1) - EulerGamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">harmonic</span><span class=\"p\">)</span>\n<span class=\"go\">2*harmonic(x - 1, 3) - 2*zeta(3)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ni</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;n&quot;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polygamma</span><span class=\"p\">(</span><span class=\"n\">ni</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">harmonic</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**(n + 1)*(-harmonic(x - 1, n + 1) + zeta(n + 1))*factorial(n)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>gamma: Gamma function.\nlowergamma: Lower incomplete gamma function.\nuppergamma: Upper incomplete gamma function.\nloggamma: Log Gamma function.\ndigamma: Digamma function.\ntrigamma: Trigamma function.\nbeta: Euler Beta function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.gamma_functions.polygamma, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.loggamma", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "loggamma", "kind": "class", "doc": "<p>The <code>loggamma</code> function implements the logarithm of the\ngamma function (i.e., $\\log\\Gamma(x)$).</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Several special values are known. For numerical integral\narguments we have:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">loggamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">log(2)</span>\n</code></pre>\n</div>\n\n<p>And for symbolic values:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;n&quot;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">log(gamma(n))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n</code></pre>\n</div>\n\n<p>For half-integral values:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">S</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">log(3*sqrt(pi)/4)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">log(2**(1 - n)*sqrt(pi)*gamma(n)/gamma(n/2 + 1/2))</span>\n</code></pre>\n</div>\n\n<p>And general rational arguments:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">expand_func</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">doit</span><span class=\"p\">()</span>\n<span class=\"go\">-5*log(3) + loggamma(1/3) + log(4) + log(7) + log(10) + log(13)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">19</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">doit</span><span class=\"p\">()</span>\n<span class=\"go\">-4*log(4) + loggamma(3/4) + log(3) + log(7) + log(11) + log(15)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span> <span class=\"o\">=</span> <span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">23</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">doit</span><span class=\"p\">()</span>\n<span class=\"go\">-3*log(7) + log(2) + loggamma(2/7) + log(9) + log(16)</span>\n</code></pre>\n</div>\n\n<p>The <code>loggamma</code> function has the following limits towards infinity:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">zoo</span>\n</code></pre>\n</div>\n\n<p>The <code>loggamma</code> function obeys the mirror symmetry\nif $x \\in \\mathbb{C} \\setminus {-\\infty, 0}$:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">loggamma(conjugate(x))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $x$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(0, x)</span>\n</code></pre>\n</div>\n\n<p>Series expansion is also supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">series</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n<span class=\"go\">-log(x) - EulerGamma*x + pi**2*x**2/12 + x**3*polygamma(2, 1)/6 + O(x**4)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the <code>gamma</code> function to arbitrary precision\non the whole complex plane:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"go\">3.17805383034794561964694160130</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">loggamma</span><span class=\"p\">(</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"go\">-0.65092319930185633889 - 1.8724366472624298171*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>gamma: Gamma function.\nlowergamma: Lower incomplete gamma function.\nuppergamma: Upper incomplete gamma function.\npolygamma: Polygamma function.\ndigamma: Digamma function.\ntrigamma: Trigamma function.\nbeta: Euler Beta function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.gamma_functions.loggamma, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.digamma", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "digamma", "kind": "class", "doc": "<p>The <code>digamma</code> function is the first derivative of the <code>loggamma</code>\nfunction</p>\n\n<p>$$\\psi(x) := \\frac{\\mathrm{d}}{\\mathrm{d} z} \\log\\Gamma(z)\n        = \\frac{\\Gamma'(z)}{\\Gamma(z) }.$$</p>\n\n<p>In this case, <code>digamma(z) = polygamma(0, z)</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">digamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">digamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">zoo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;z&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">digamma</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(0, z)</span>\n</code></pre>\n</div>\n\n<p>To retain <code>digamma</code> as it is:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">digamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">evaluate</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">digamma(0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">digamma</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">evaluate</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">digamma(z)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>gamma: Gamma function.\nlowergamma: Lower incomplete gamma function.\nuppergamma: Upper incomplete gamma function.\npolygamma: Polygamma function.\nloggamma: Log Gamma function.\ntrigamma: Trigamma function.\nbeta: Euler Beta function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.gamma_functions.digamma, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.trigamma", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "trigamma", "kind": "class", "doc": "<p>The <code>trigamma</code> function is the second derivative of the <code>loggamma</code>\nfunction</p>\n\n<p>$$\\psi^{(1)}(z) := \\frac{\\mathrm{d}^{2}}{\\mathrm{d} z^{2}} \\log\\Gamma(z).$$</p>\n\n<p>In this case, <code>trigamma(z) = polygamma(1, z)</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">trigamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trigamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">zoo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;z&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trigamma</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">polygamma(1, z)</span>\n</code></pre>\n</div>\n\n<p>To retain <code>trigamma</code> as it is:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trigamma</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">evaluate</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">trigamma(0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trigamma</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">evaluate</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">trigamma(z)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>gamma: Gamma function.\nlowergamma: Lower incomplete gamma function.\nuppergamma: Upper incomplete gamma function.\npolygamma: Polygamma function.\nloggamma: Log Gamma function.\ndigamma: Digamma function.\nbeta: Euler Beta function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.gamma_functions.trigamma, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.multigamma", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "multigamma", "kind": "class", "doc": "<p>The multivariate gamma function is a generalization of the gamma function</p>\n\n<p>$$\\Gamma_p(z) = \\pi^{p(p-1)/4}\\prod_{k=1}^p \\Gamma[z + (1 - k)/2].$$</p>\n\n<p>In a special case, <code>multigamma(x, 1) = gamma(x)</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">multigamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">multigamma</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"go\">pi**(p*(p - 1)/4)*Product(gamma(-_k/2 + x + 1/2), (_k, 1, p))</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">multigamma</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">multigamma</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">6</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">multigamma</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(pi)/2</span>\n</code></pre>\n</div>\n\n<p>Writing <code>multigamma</code> in terms of the <code>gamma</code> function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">multigamma</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">gamma(x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">multigamma</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(pi)*gamma(x)*gamma(x - 1/2)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">multigamma</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">pi**(3/2)*gamma(x)*gamma(x - 1)*gamma(x - 1/2)</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>p : order or dimension of the multivariate gamma function</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>gamma, lowergamma, uppergamma, polygamma, loggamma, digamma, trigamma,\nbeta</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.gamma_functions.multigamma, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.dirichlet_eta", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "dirichlet_eta", "kind": "class", "doc": "<p>Dirichlet eta function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>For $\\operatorname{Re}(s) &gt; 0$, this function is defined as</p>\n\n<p>$$\\eta(s) = \\sum_{n=1}^\\infty \\frac{(-1)^{n-1}}{n^s}.$$</p>\n\n<p>It admits a unique analytic continuation to all of $\\mathbb{C}$.\nIt is an entire, unbranched function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>The Dirichlet eta function is closely related to the Riemann zeta function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">dirichlet_eta</span><span class=\"p\">,</span> <span class=\"n\">zeta</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">s</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dirichlet_eta</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">zeta</span><span class=\"p\">)</span>\n<span class=\"go\">(1 - 2**(1 - s))*zeta(s)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>zeta</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.zeta_functions.dirichlet_eta, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.zeta", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "zeta", "kind": "class", "doc": "<p>Hurwitz zeta function (or Riemann zeta function).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>For $\\operatorname{Re}(a) &gt; 0$ and $\\operatorname{Re}(s) &gt; 1$, this\nfunction is defined as</p>\n\n<p>$$\\zeta(s, a) = \\sum_{n=0}^\\infty \\frac{1}{(n + a)^s},$$</p>\n\n<p>where the standard choice of argument for $n + a$ is used. For fixed\n$a$ with $\\operatorname{Re}(a) &gt; 0$ the Hurwitz zeta function admits a\nmeromorphic continuation to all of $\\mathbb{C}$, it is an unbranched\nfunction with a simple pole at $s = 1$.</p>\n\n<p>Analytic continuation to other $a$ is possible under some circumstances,\nbut this is not typically done.</p>\n\n<p>The Hurwitz zeta function is a special case of the Lerch transcendent:</p>\n\n<p>$$\\zeta(s, a) = \\Phi(1, s, a).$$</p>\n\n<p>This formula defines an analytic continuation for all possible values of\n$s$ and $a$ (also $\\operatorname{Re}(a) &lt; 0$), see the documentation of\n<code>lerchphi</code> for a description of the branching behavior.</p>\n\n<p>If no value is passed for $a$, by this function assumes a default value\nof $a = 1$, yielding the Riemann zeta function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>For $a = 1$ the Hurwitz zeta function reduces to the famous Riemann\nzeta function:</p>\n\n<p>$$\\zeta(s, 1) = \\zeta(s) = \\sum_{n=1}^\\infty \\frac{1}{n^s}.$$</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">zeta</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">s</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zeta</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">zeta(s)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zeta</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"go\">zeta(s)</span>\n</code></pre>\n</div>\n\n<p>The Riemann zeta function can also be expressed using the Dirichlet eta\nfunction:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">dirichlet_eta</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zeta</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">dirichlet_eta</span><span class=\"p\">)</span>\n<span class=\"go\">dirichlet_eta(s)/(1 - 2**(1 - s))</span>\n</code></pre>\n</div>\n\n<p>The Riemann zeta function at positive even integer and negative odd integer\nvalues is related to the Bernoulli numbers:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zeta</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">pi**2/6</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zeta</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">pi**4/90</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zeta</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">-1/12</span>\n</code></pre>\n</div>\n\n<p>The specific formulae are:</p>\n\n<p>$$\\zeta(2n) = (-1)^{n+1} \\frac{B_{2n} (2\\pi)^{2n}}{2(2n)!}$$</p>\n\n<p>$$\\zeta(-n) = -\\frac{B_{n+1}}{n+1}$$</p>\n\n<p>At negative even integers the Riemann zeta function is zero:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zeta</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<p>No closed-form expressions are known at positive odd integers, but\nnumerical evaluation is possible:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zeta</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">()</span>\n<span class=\"go\">1.20205690315959</span>\n</code></pre>\n</div>\n\n<p>The derivative of $\\zeta(s, a)$ with respect to $a$ can be computed:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">a</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zeta</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">-s*zeta(s + 1, a)</span>\n</code></pre>\n</div>\n\n<p>However the derivative with respect to $s$ has no useful closed form\nexpression:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zeta</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"go\">Derivative(zeta(s, a), s)</span>\n</code></pre>\n</div>\n\n<p>The Hurwitz zeta function can be expressed in terms of the Lerch\ntranscendent, <code>~.lerchphi</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">lerchphi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zeta</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">lerchphi</span><span class=\"p\">)</span>\n<span class=\"go\">lerchphi(1, s, a)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>dirichlet_eta, lerchphi, polylog</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.zeta_functions.zeta, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.lerchphi", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "lerchphi", "kind": "class", "doc": "<p>Lerch transcendent (Lerch phi function).</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>For $\\operatorname{Re}(a) &gt; 0$, $|z| &lt; 1$ and $s \\in \\mathbb{C}$, the\nLerch transcendent is defined as</p>\n\n<p>.. math :: \\Phi(z, s, a) = \\sum_{n=0}^\\infty \\frac{z^n}{(n + a)^s},</p>\n\n<p>where the standard branch of the argument is used for $n + a$,\nand by analytic continuation for other values of the parameters.</p>\n\n<p>A commonly used related function is the Lerch zeta function, defined by</p>\n\n<p>$$L(q, s, a) = \\Phi(e^{2\\pi i q}, s, a).$$</p>\n\n<p><strong>Analytic Continuation and Branching Behavior</strong></p>\n\n<p>It can be shown that</p>\n\n<p>$$\\Phi(z, s, a) = z\\Phi(z, s, a+1) + a^{-s}.$$</p>\n\n<p>This provides the analytic continuation to $\\operatorname{Re}(a) \\le 0$.</p>\n\n<p>Assume now $\\operatorname{Re}(a) &gt; 0$. The integral representation</p>\n\n<p>$$\\Phi_0(z, s, a) = \\int_0^\\infty \\frac{t^{s-1} e^{-at}}{1 - ze^{-t}}\\frac{\\mathrm{d}t}{\\Gamma(s)}$$</p>\n\n<p>provides an analytic continuation to $\\mathbb{C} - [1, \\infty)$.\nFinally, for $x \\in (1, \\infty)$ we find</p>\n\n<p>$$\\lim_{\\epsilon \\to 0^+} \\Phi_0(x + i\\epsilon, s, a)-\\lim_{\\epsilon \\to 0^+} \\Phi_0(x - i\\epsilon, s, a)\n= \\frac{2\\pi i \\log^{s-1}{x}}{x^a \\Gamma(s)},$$</p>\n\n<p>using the standard branch for both $\\log{x}$ and\n$\\log{\\log{x}}$ (a branch of $\\log{\\log{x}}$ is needed to\nevaluate $\\log{x}^{s-1}$).\nThis concludes the analytic continuation. The Lerch transcendent is thus\nbranched at $z \\in {0, 1, \\infty}$ and\n$a \\in \\mathbb{Z}_{\\le 0}$. For fixed $z, a$ outside these\nbranch points, it is an entire function of $s$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>The Lerch transcendent is a fairly general function, for this reason it does\nnot automatically evaluate to simpler functions. Use <code>expand_func()</code> to\nachieve this.</p>\n\n<p>If $z=1$, the Lerch transcendent reduces to the Hurwitz zeta function:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">lerchphi</span><span class=\"p\">,</span> <span class=\"n\">expand_func</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">a</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">lerchphi</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"go\">zeta(s, a)</span>\n</code></pre>\n</div>\n\n<p>More generally, if $z$ is a root of unity, the Lerch transcendent\nreduces to a sum of Hurwitz zeta functions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">lerchphi</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"go\">zeta(s, a/2)/2**s - zeta(s, a/2 + 1/2)/2**s</span>\n</code></pre>\n</div>\n\n<p>If $a=1$, the Lerch transcendent reduces to the polylogarithm:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">lerchphi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"go\">polylog(s, z)/z</span>\n</code></pre>\n</div>\n\n<p>More generally, if $a$ is rational, the Lerch transcendent reduces\nto a sum of polylogarithms:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">S</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">lerchphi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">2**(s - 1)*(polylog(s, sqrt(z))/sqrt(z) -</span>\n<span class=\"go\">            polylog(s, sqrt(z)*exp_polar(I*pi))/sqrt(z))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">lerchphi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">-2**s/z + 2**(s - 1)*(polylog(s, sqrt(z))/sqrt(z) -</span>\n<span class=\"go\">                      polylog(s, sqrt(z)*exp_polar(I*pi))/sqrt(z))/z</span>\n</code></pre>\n</div>\n\n<p>The derivatives with respect to $z$ and $a$ can be computed in\nclosed form:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lerchphi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">(-a*lerchphi(z, s, a) + lerchphi(z, s - 1, a))/z</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lerchphi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">-s*lerchphi(z, s + 1, a)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>polylog, zeta</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.zeta_functions.lerchphi, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.polylog", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "polylog", "kind": "class", "doc": "<p>Polylogarithm function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>For $|z| &lt; 1$ and $s \\in \\mathbb{C}$, the polylogarithm is\ndefined by</p>\n\n<p>$$\\operatorname{Li}_s(z) = \\sum_{n=1}^\\infty \\frac{z^n}{n^s},$$</p>\n\n<p>where the standard branch of the argument is used for $n$. It admits\nan analytic continuation which is branched at $z=1$ (notably not on the\nsheet of initial definition), $z=0$ and $z=\\infty$.</p>\n\n<p>The name polylogarithm comes from the fact that for $s=1$, the\npolylogarithm is related to the ordinary logarithm (see examples), and that</p>\n\n<p>$$\\operatorname{Li}_{s+1}(z) =\\int_0^z \\frac{\\operatorname{Li}_s(t)}{t} \\mathrm{d}t.$$</p>\n\n<p>The polylogarithm is a special case of the Lerch transcendent:</p>\n\n<p>$$\\operatorname{Li}_{s}(z) = z \\Phi(z, s, 1).$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>For $z \\in {0, 1, -1}$, the polylogarithm is automatically expressed\nusing other functions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">polylog</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">s</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polylog</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polylog</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">zeta(s)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polylog</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">-dirichlet_eta(s)</span>\n</code></pre>\n</div>\n\n<p>If $s$ is a negative integer, $0$ or $1$, the polylogarithm can be\nexpressed using elementary functions. This can be done using\n<code>expand_func()</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">expand_func</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">polylog</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">-log(1 - z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">polylog</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">z/(1 - z)</span>\n</code></pre>\n</div>\n\n<p>The derivative with respect to $z$ can be computed in closed form:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polylog</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">polylog(s - 1, z)/z</span>\n</code></pre>\n</div>\n\n<p>The polylogarithm can be expressed in terms of the lerch transcendent:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">lerchphi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">polylog</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">lerchphi</span><span class=\"p\">)</span>\n<span class=\"go\">z*lerchphi(z, s, 1)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>zeta, lerchphi</p>\n", "bases": "sympy.functions.special.zeta_functions.polylog, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.stieltjes", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "stieltjes", "kind": "class", "doc": "<p>Represents Stieltjes constants, $\\gamma_{k}$ that occur in\nLaurent Series expansion of the Riemann zeta function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">stieltjes</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stieltjes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">stieltjes(n)</span>\n</code></pre>\n</div>\n\n<p>The zero'th stieltjes constant:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stieltjes</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">EulerGamma</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stieltjes</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">EulerGamma</span>\n</code></pre>\n</div>\n\n<p>For generalized stieltjes constants:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stieltjes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n<span class=\"go\">stieltjes(n, m)</span>\n</code></pre>\n</div>\n\n<p>Constants are only defined for integers &gt;= 0:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stieltjes</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">zoo</span>\n</code></pre>\n</div>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.zeta_functions.stieltjes, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.LeviCivita", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "LeviCivita", "kind": "class", "doc": "<p>Represent the Levi-Civita symbol.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>For even permutations of indices it returns 1, for odd permutations -1, and\nfor everything else (a repeated index) it returns 0.</p>\n\n<p>Thus it represents an alternating pseudotensor.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">LeviCivita</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">LeviCivita</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">LeviCivita</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">-1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">LeviCivita</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">LeviCivita</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n<span class=\"go\">LeviCivita(i, j, k)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">LeviCivita</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Eijk</p>\n", "bases": "sympy.functions.special.tensor_functions.LeviCivita, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.KroneckerDelta", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "KroneckerDelta", "kind": "class", "doc": "<p>The discrete, or Kronecker, delta function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>A function that takes in two integers $i$ and $j$. It returns $0$ if $i$\nand $j$ are not equal, or it returns $1$ if $i$ and $j$ are equal.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>An example with integer indices:</p>\n\n<pre><code>&gt;&gt;&gt; from sympy import KroneckerDelta\n&gt;&gt;&gt; KroneckerDelta(1, 2)\n0\n&gt;&gt;&gt; KroneckerDelta(3, 3)\n1\n</code></pre>\n\n<p>Symbolic indices:</p>\n\n<pre><code>&gt;&gt;&gt; from sympy.abc import i, j, k\n&gt;&gt;&gt; KroneckerDelta(i, j)\nKroneckerDelta(i, j)\n&gt;&gt;&gt; KroneckerDelta(i, i)\n1\n&gt;&gt;&gt; KroneckerDelta(i, i + 1)\n0\n&gt;&gt;&gt; KroneckerDelta(i, i + 1 + k)\nKroneckerDelta(i, i + k + 1)\n</code></pre>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>i : Number, Symbol\n    The first index of the delta function.\nj : Number, Symbol\n    The second index of the delta function.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>eval\nDiracDelta</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.tensor_functions.KroneckerDelta, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.SingularityFunction", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "SingularityFunction", "kind": "class", "doc": "<p>Singularity functions are a class of discontinuous functions.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>Singularity functions take a variable, an offset, and an exponent as\narguments. These functions are represented using Macaulay brackets as:</p>\n\n<p>SingularityFunction(x, a, n) := <x - a>^n</p>\n\n<p>The singularity function will automatically evaluate to\n<code>Derivative(DiracDelta(x - a), x, -n - 1)</code> if <code>n &lt; 0</code>\nand <code>(x - a)**n*Heaviside(x - a)</code> if <code>n &gt;= 0</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">SingularityFunction</span><span class=\"p\">,</span> <span class=\"n\">diff</span><span class=\"p\">,</span> <span class=\"n\">Piecewise</span><span class=\"p\">,</span> <span class=\"n\">DiracDelta</span><span class=\"p\">,</span> <span class=\"n\">Heaviside</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">SingularityFunction(x, a, n)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">nonnegative</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">(y + 10)**n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"n\">negative</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">243</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">4*SingularityFunction(x, 1, 3) + 5*SingularityFunction(x, 1, 4)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">SingularityFunction(x, 4, -2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">Piecewise</span><span class=\"p\">)</span>\n<span class=\"go\">Piecewise(((x - 4)**5, x &gt; 4), (0, True))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"n\">positive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"n\">nonnegative</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">({</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span><span class=\"p\">})</span>\n<span class=\"go\">(y + 10)**n</span>\n</code></pre>\n</div>\n\n<p>The methods <code>rewrite(DiracDelta)</code>, <code>rewrite(Heaviside)</code>, and\n<code>rewrite('HeavisideDiracDelta')</code> returns the same output. One can use any\nof these methods according to their choice.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">SingularityFunction</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">Heaviside</span><span class=\"p\">)</span>\n<span class=\"go\">(x - 4)**5*Heaviside(x - 4) + DiracDelta(x + 3) - DiracDelta(x, 1)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">DiracDelta</span><span class=\"p\">)</span>\n<span class=\"go\">(x - 4)**5*Heaviside(x - 4) + DiracDelta(x + 3) - DiracDelta(x, 1)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"s1\">&#39;HeavisideDiracDelta&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">(x - 4)**5*Heaviside(x - 4) + DiracDelta(x + 3) - DiracDelta(x, 1)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>DiracDelta, Heaviside</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.singularity_functions.SingularityFunction, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.DiracDelta", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "DiracDelta", "kind": "class", "doc": "<p>The DiracDelta function and its derivatives.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>DiracDelta is not an ordinary function. It can be rigorously defined either\nas a distribution or as a measure.</p>\n\n<p>DiracDelta only makes sense in definite integrals, and in particular,\nintegrals of the form <code>Integral(f(x)*DiracDelta(x - x0), (x, a, b))</code>,\nwhere it equals <code>f(x0)</code> if <code>a &lt;= x0 &lt;= b</code> and <code>0</code> otherwise. Formally,\nDiracDelta acts in some ways like a function that is <code>0</code> everywhere except\nat <code>0</code>, but in many ways it also does not. It can often be useful to treat\nDiracDelta in formal ways, building up and manipulating expressions with\ndelta functions (which may eventually be integrated), but care must be taken\nto not treat it as a real function. SymPy's <code>oo</code> is similar. It only\ntruly makes sense formally in certain contexts (such as integration limits),\nbut SymPy allows its use everywhere, and it tries to be consistent with\noperations on it (like <code>1/oo</code>), but it is easy to get into trouble and get\nwrong results if <code>oo</code> is treated too much like a number. Similarly, if\nDiracDelta is treated too much like a function, it is easy to get wrong or\nnonsensical results.</p>\n\n<p>DiracDelta function has the following properties:</p>\n\n<p>1) $\\frac{d}{d x} \\theta(x) = \\delta(x)$\n2) $\\int_{-\\infty}^\\infty \\delta(x - a)f(x)\\, dx = f(a)$ and $\\int_{a-\n   \\epsilon}^{a+\\epsilon} \\delta(x - a)f(x)\\, dx = f(a)$\n3) $\\delta(x) = 0$ for all $x \\neq 0$\n4) $\\delta(g(x)) = \\sum_i \\frac{\\delta(x - x_i)}{\\|g'(x_i)\\|}$ where $x_i$\n   are the roots of $g$\n5) $\\delta(-x) = \\delta(x)$</p>\n\n<p>Derivatives of <code>k</code>-th order of DiracDelta have the following properties:</p>\n\n<p>6) $\\delta(x, k) = 0$ for all $x \\neq 0$\n7) $\\delta(-x, k) = -\\delta(x, k)$ for odd $k$\n8) $\\delta(-x, k) = \\delta(x, k)$ for even $k$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">DiracDelta</span><span class=\"p\">,</span> <span class=\"n\">diff</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DiracDelta</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">DiracDelta(x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DiracDelta</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DiracDelta</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DiracDelta</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DiracDelta</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">subs</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">DiracDelta(0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">DiracDelta</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">DiracDelta(x, 1)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">DiracDelta</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">DiracDelta(x - 1, 2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">DiracDelta</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">2*(2*x**2*DiracDelta(x**2 - 1, 2) + DiracDelta(x**2 - 1, 1))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DiracDelta</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_simple</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DiracDelta</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_simple</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DiracDelta</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">diracdelta</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">wrt</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">DiracDelta(x - 1)/(2*Abs(y)) + DiracDelta(x + 1)/(2*Abs(y))</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Heaviside\nsympy.simplify.simplify.simplify, is_simple\nsympy.functions.special.tensor_functions.KroneckerDelta</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.delta_functions.DiracDelta, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.besselj", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "besselj", "kind": "class", "doc": "<p>Bessel function of the first kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Bessel $J$ function of order $\\nu$ is defined to be the function\nsatisfying Bessel's differential equation</p>\n\n<p>.. math ::\n    z^2 \\frac{\\mathrm{d}^2 w}{\\mathrm{d}z^2}\n    + z \\frac{\\mathrm{d}w}{\\mathrm{d}z} + (z^2 - \\nu^2) w = 0,</p>\n\n<p>with Laurent expansion</p>\n\n<p>.. math ::\n    J_\\nu(z) = z^\\nu \\left(\\frac{1}{\\Gamma(\\nu + 1) 2^\\nu} + O(z^2) \\right),</p>\n\n<p>if $\\nu$ is not a negative integer. If $\\nu=-n \\in \\mathbb{Z}_{&lt;0}$\n<em>is</em> a negative integer, then the definition is</p>\n\n<p>.. math ::\n    J_{-n}(z) = (-1)^n J_n(z).</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Create a Bessel function object:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">besselj</span><span class=\"p\">,</span> <span class=\"n\">jn</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">besselj</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Differentiate it:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">besselj(n - 1, z)/2 - besselj(n + 1, z)/2</span>\n</code></pre>\n</div>\n\n<p>Rewrite in terms of spherical Bessel functions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">jn</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(2)*sqrt(z)*jn(n - 1/2, z)/sqrt(pi)</span>\n</code></pre>\n</div>\n\n<p>Access the parameter and argument:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">order</span>\n<span class=\"go\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">argument</span>\n<span class=\"go\">z</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>bessely, besseli, besselk</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.besselj, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.bessely", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "bessely", "kind": "class", "doc": "<p>Bessel function of the second kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Bessel $Y$ function of order $\\nu$ is defined as</p>\n\n<p>.. math ::\n    Y_\\nu(z) = \\lim_{\\mu \\to \\nu} \\frac{J_\\mu(z) \\cos(\\pi \\mu)\n                                        - J_{-\\mu}(z)}{\\sin(\\pi \\mu)},</p>\n\n<p>where $J_\\mu(z)$ is the Bessel function of the first kind.</p>\n\n<p>It is a solution to Bessel's equation, and linearly independent from\n$J_\\nu$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">bessely</span><span class=\"p\">,</span> <span class=\"n\">yn</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">bessely</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">bessely(n - 1, z)/2 - bessely(n + 1, z)/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">yn</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(2)*sqrt(z)*yn(n - 1/2, z)/sqrt(pi)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>besselj, besseli, besselk</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.bessely, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.besseli", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "besseli", "kind": "class", "doc": "<p>Modified Bessel function of the first kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Bessel $I$ function is a solution to the modified Bessel equation</p>\n\n<p>.. math ::\n    z^2 \\frac{\\mathrm{d}^2 w}{\\mathrm{d}z^2}\n    + z \\frac{\\mathrm{d}w}{\\mathrm{d}z} + (z^2 + \\nu^2)^2 w = 0.</p>\n\n<p>It can be defined as</p>\n\n<p>.. math ::\n    I_\\nu(z) = i^{-\\nu} J_\\nu(iz),</p>\n\n<p>where $J_\\nu(z)$ is the Bessel function of the first kind.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">besseli</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">besseli</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">besseli(n - 1, z)/2 + besseli(n + 1, z)/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>besselj, bessely, besselk</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.besseli, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.besselk", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "besselk", "kind": "class", "doc": "<p>Modified Bessel function of the second kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Bessel $K$ function of order $\\nu$ is defined as</p>\n\n<p>.. math ::\n    K_\\nu(z) = \\lim_{\\mu \\to \\nu} \\frac{\\pi}{2}\n               \\frac{I_{-\\mu}(z) -I_\\mu(z)}{\\sin(\\pi \\mu)},</p>\n\n<p>where $I_\\mu(z)$ is the modified Bessel function of the first kind.</p>\n\n<p>It is a solution of the modified Bessel equation, and linearly independent\nfrom $Y_\\nu$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">besselk</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">besselk</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">-besselk(n - 1, z)/2 - besselk(n + 1, z)/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>besselj, besseli, bessely</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.besselk, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.hankel1", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "hankel1", "kind": "class", "doc": "<p>Hankel function of the first kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined as</p>\n\n<p>.. math ::\n    H_\\nu^{(1)} = J_\\nu(z) + iY_\\nu(z),</p>\n\n<p>where $J_\\nu(z)$ is the Bessel function of the first kind, and\n$Y_\\nu(z)$ is the Bessel function of the second kind.</p>\n\n<p>It is a solution to Bessel's equation.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">hankel1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hankel1</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">hankel1(n - 1, z)/2 - hankel1(n + 1, z)/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>hankel2, besselj, bessely</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.hankel1, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.hankel2", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "hankel2", "kind": "class", "doc": "<p>Hankel function of the second kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined as</p>\n\n<p>.. math ::\n    H_\\nu^{(2)} = J_\\nu(z) - iY_\\nu(z),</p>\n\n<p>where $J_\\nu(z)$ is the Bessel function of the first kind, and\n$Y_\\nu(z)$ is the Bessel function of the second kind.</p>\n\n<p>It is a solution to Bessel's equation, and linearly independent from\n$H_\\nu^{(1)}$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">hankel2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hankel2</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">hankel2(n - 1, z)/2 - hankel2(n + 1, z)/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>hankel1, besselj, bessely</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.hankel2, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.jn", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "jn", "kind": "class", "doc": "<p>Spherical Bessel function of the first kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is a solution to the spherical Bessel equation</p>\n\n<p>.. math ::\n    z^2 \\frac{\\mathrm{d}^2 w}{\\mathrm{d}z^2}\n      + 2z \\frac{\\mathrm{d}w}{\\mathrm{d}z} + (z^2 - \\nu(\\nu + 1)) w = 0.</p>\n\n<p>It can be defined as</p>\n\n<p>.. math ::\n    j_\\nu(z) = \\sqrt{\\frac{\\pi}{2z}} J_{\\nu + \\frac{1}{2}}(z),</p>\n\n<p>where $J_\\nu(z)$ is the Bessel function of the first kind.</p>\n\n<p>The spherical Bessel functions of integral order are\ncalculated using the formula:</p>\n\n<p>$$j_n(z) = f_n(z) \\sin{z} + (-1)^{n+1} f_{-n-1}(z) \\cos{z},$$</p>\n\n<p>where the coefficients $f_n(z)$ are available as\n<code>sympy.polys.orthopolys.spherical_bessel_fn()</code>.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">jn</span><span class=\"p\">,</span> <span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"n\">cos</span><span class=\"p\">,</span> <span class=\"n\">expand_func</span><span class=\"p\">,</span> <span class=\"n\">besselj</span><span class=\"p\">,</span> <span class=\"n\">bessely</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;z&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nu</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;nu&quot;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">jn</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"go\">sin(z)/z</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">jn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">z</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">z</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">jn</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">(-6/z**2 + 15/z**4)*sin(z) + (1/z - 15/z**3)*cos(z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jn</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">besselj</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(2)*sqrt(pi)*sqrt(1/z)*besselj(nu + 1/2, z)/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jn</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">bessely</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**nu*sqrt(2)*sqrt(pi)*sqrt(1/z)*bessely(-nu - 1/2, z)/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mf\">5.2</span><span class=\"o\">+</span><span class=\"mf\">0.3</span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"go\">0.099419756723640344491 - 0.054525080242173562897*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>besselj, bessely, besselk, yn</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.jn, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.yn", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "yn", "kind": "class", "doc": "<p>Spherical Bessel function of the second kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is another solution to the spherical Bessel equation, and\nlinearly independent from $j_n$. It can be defined as</p>\n\n<p>.. math ::\n    y_\\nu(z) = \\sqrt{\\frac{\\pi}{2z}} Y_{\\nu + \\frac{1}{2}}(z),</p>\n\n<p>where $Y_\\nu(z)$ is the Bessel function of the second kind.</p>\n\n<p>For integral orders $n$, $y_n$ is calculated using the formula:</p>\n\n<p>$$y_n(z) = (-1)^{n+1} j_{-n-1}(z)$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">yn</span><span class=\"p\">,</span> <span class=\"n\">sin</span><span class=\"p\">,</span> <span class=\"n\">cos</span><span class=\"p\">,</span> <span class=\"n\">expand_func</span><span class=\"p\">,</span> <span class=\"n\">besselj</span><span class=\"p\">,</span> <span class=\"n\">bessely</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;z&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nu</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;nu&quot;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">yn</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"go\">-cos(z)/z</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">yn</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">z</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">z</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">yn</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">besselj</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**(nu + 1)*sqrt(2)*sqrt(pi)*sqrt(1/z)*besselj(-nu - 1/2, z)/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">yn</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">bessely</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(2)*sqrt(pi)*sqrt(1/z)*bessely(nu + 1/2, z)/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">yn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mf\">5.2</span><span class=\"o\">+</span><span class=\"mf\">0.3</span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"go\">0.18525034196069722536 + 0.014895573969924817587*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>besselj, bessely, besselk, jn</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.yn, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.hn1", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "hn1", "kind": "class", "doc": "<p>Spherical Hankel function of the first kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined as</p>\n\n<p>$$h_\\nu^(1)(z) = j_\\nu(z) + i y_\\nu(z),$$</p>\n\n<p>where $j_\\nu(z)$ and $y_\\nu(z)$ are the spherical\nBessel function of the first and second kinds.</p>\n\n<p>For integral orders $n$, $h_n^(1)$ is calculated using the formula:</p>\n\n<p>$$h_n^(1)(z) = j_{n}(z) + i (-1)^{n+1} j_{-n-1}(z)$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">hn1</span><span class=\"p\">,</span> <span class=\"n\">hankel1</span><span class=\"p\">,</span> <span class=\"n\">expand_func</span><span class=\"p\">,</span> <span class=\"n\">yn</span><span class=\"p\">,</span> <span class=\"n\">jn</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;z&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nu</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;nu&quot;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">hn1</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"go\">jn(nu, z) + I*yn(nu, z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">hn1</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"go\">sin(z)/z - I*cos(z)/z</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">hn1</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"go\">-I*sin(z)/z - cos(z)/z + sin(z)/z**2 - I*cos(z)/z**2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hn1</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">jn</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**(nu + 1)*I*jn(-nu - 1, z) + jn(nu, z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hn1</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">yn</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**nu*yn(-nu - 1, z) + I*yn(nu, z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hn1</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">hankel1</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(2)*sqrt(pi)*sqrt(1/z)*hankel1(nu, z)/2</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>hn2, jn, yn, hankel1, hankel2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.hn1, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.hn2", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "hn2", "kind": "class", "doc": "<p>Spherical Hankel function of the second kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is defined as</p>\n\n<p>$$h_\\nu^(2)(z) = j_\\nu(z) - i y_\\nu(z),$$</p>\n\n<p>where $j_\\nu(z)$ and $y_\\nu(z)$ are the spherical\nBessel function of the first and second kinds.</p>\n\n<p>For integral orders $n$, $h_n^(2)$ is calculated using the formula:</p>\n\n<p>$$h_n^(2)(z) = j_{n} - i (-1)^{n+1} j_{-n-1}(z)$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">hn2</span><span class=\"p\">,</span> <span class=\"n\">hankel2</span><span class=\"p\">,</span> <span class=\"n\">expand_func</span><span class=\"p\">,</span> <span class=\"n\">jn</span><span class=\"p\">,</span> <span class=\"n\">yn</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;z&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nu</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;nu&quot;</span><span class=\"p\">,</span> <span class=\"n\">integer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">hn2</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"go\">jn(nu, z) - I*yn(nu, z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">hn2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"go\">sin(z)/z + I*cos(z)/z</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">hn2</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)))</span>\n<span class=\"go\">I*sin(z)/z - cos(z)/z + sin(z)/z**2 + I*cos(z)/z**2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hn2</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">hankel2</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(2)*sqrt(pi)*sqrt(1/z)*hankel2(nu, z)/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hn2</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">jn</span><span class=\"p\">)</span>\n<span class=\"go\">-(-1)**(nu + 1)*I*jn(-nu - 1, z) + jn(nu, z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hn2</span><span class=\"p\">(</span><span class=\"n\">nu</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">yn</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**nu*yn(-nu - 1, z) - I*yn(nu, z)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>hn1, jn, yn, hankel1, hankel2</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.hn2, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.airyai", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "airyai", "kind": "class", "doc": "<p>The Airy function $\\operatorname{Ai}$ of the first kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Airy function $\\operatorname{Ai}(z)$ is defined to be the function\nsatisfying Airy's differential equation</p>\n\n<p>$$\\frac{\\mathrm{d}^2 w(z)}{\\mathrm{d}z^2} - z w(z) = 0.$$</p>\n\n<p>Equivalently, for real $z$</p>\n\n<p>$$\\operatorname{Ai}(z) := \\frac{1}{\\pi}\n\\int_0^\\infty \\cos\\left(\\frac{t^3}{3} + z t\\right) \\mathrm{d}t.$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Create an Airy function object:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">airyai</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airyai</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">airyai(z)</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airyai</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">3**(1/3)/(3*gamma(2/3))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airyai</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airyai</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<p>The Airy function obeys the mirror symmetry:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">airyai</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">airyai(conjugate(z))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $z$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">airyai</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">airyaiprime(z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">airyai</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">z*airyai(z)</span>\n</code></pre>\n</div>\n\n<p>Series expansion is also supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">series</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"n\">airyai</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">3**(5/6)*gamma(1/3)/(6*pi) - 3**(1/6)*z*gamma(2/3)/(2*pi) + O(z**3)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the Airy function to arbitrary precision\non the whole complex plane:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airyai</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"go\">0.22740742820168557599192443603787379946077222541710</span>\n</code></pre>\n</div>\n\n<p>Rewrite $\\operatorname{Ai}(z)$ in terms of hypergeometric functions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">hyper</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airyai</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">hyper</span><span class=\"p\">)</span>\n<span class=\"go\">-3**(2/3)*z*hyper((), (4/3,), z**3/9)/(3*gamma(1/3)) + 3**(1/3)*hyper((), (2/3,), z**3/9)/(3*gamma(2/3))</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>airybi: Airy function of the second kind.\nairyaiprime: Derivative of the Airy function of the first kind.\nairybiprime: Derivative of the Airy function of the second kind.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.airyai, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.airybi", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "airybi", "kind": "class", "doc": "<p>The Airy function $\\operatorname{Bi}$ of the second kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Airy function $\\operatorname{Bi}(z)$ is defined to be the function\nsatisfying Airy's differential equation</p>\n\n<p>$$\\frac{\\mathrm{d}^2 w(z)}{\\mathrm{d}z^2} - z w(z) = 0.$$</p>\n\n<p>Equivalently, for real $z$</p>\n\n<p>$$\\operatorname{Bi}(z) := \\frac{1}{\\pi}\n         \\int_0^\\infty\n           \\exp\\left(-\\frac{t^3}{3} + z t\\right)\n           + \\sin\\left(\\frac{t^3}{3} + z t\\right) \\mathrm{d}t.$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Create an Airy function object:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">airybi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">airybi(z)</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybi</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">3**(5/6)/(3*gamma(2/3))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybi</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybi</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<p>The Airy function obeys the mirror symmetry:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">airybi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">airybi(conjugate(z))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $z$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">airybi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">airybiprime(z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">airybi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">z*airybi(z)</span>\n</code></pre>\n</div>\n\n<p>Series expansion is also supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">series</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"n\">airybi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">3**(1/3)*gamma(1/3)/(2*pi) + 3**(2/3)*z*gamma(2/3)/(2*pi) + O(z**3)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the Airy function to arbitrary precision\non the whole complex plane:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybi</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"go\">-0.41230258795639848808323405461146104203453483447240</span>\n</code></pre>\n</div>\n\n<p>Rewrite $\\operatorname{Bi}(z)$ in terms of hypergeometric functions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">hyper</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybi</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">hyper</span><span class=\"p\">)</span>\n<span class=\"go\">3**(1/6)*z*hyper((), (4/3,), z**3/9)/gamma(1/3) + 3**(5/6)*hyper((), (2/3,), z**3/9)/(3*gamma(2/3))</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>airyai: Airy function of the first kind.\nairyaiprime: Derivative of the Airy function of the first kind.\nairybiprime: Derivative of the Airy function of the second kind.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.airybi, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.airyaiprime", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "airyaiprime", "kind": "class", "doc": "<p>The derivative $\\operatorname{Ai}^\\prime$ of the Airy function of the first\nkind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Airy function $\\operatorname{Ai}^\\prime(z)$ is defined to be the\nfunction</p>\n\n<p>$$\\operatorname{Ai}^\\prime(z) := \\frac{\\mathrm{d} \\operatorname{Ai}(z)}{\\mathrm{d} z}.$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Create an Airy function object:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">airyaiprime</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airyaiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">airyaiprime(z)</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airyaiprime</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">-3**(2/3)/(3*gamma(1/3))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airyaiprime</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<p>The Airy function obeys the mirror symmetry:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">airyaiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">airyaiprime(conjugate(z))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $z$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">airyaiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">z*airyai(z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">airyaiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">z*airyaiprime(z) + airyai(z)</span>\n</code></pre>\n</div>\n\n<p>Series expansion is also supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">series</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"n\">airyaiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">-3**(2/3)/(3*gamma(1/3)) + 3**(1/3)*z**2/(6*gamma(2/3)) + O(z**3)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the Airy function to arbitrary precision\non the whole complex plane:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airyaiprime</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"go\">0.61825902074169104140626429133247528291577794512415</span>\n</code></pre>\n</div>\n\n<p>Rewrite $\\operatorname{Ai}^\\prime(z)$ in terms of hypergeometric functions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">hyper</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airyaiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">hyper</span><span class=\"p\">)</span>\n<span class=\"go\">3**(1/3)*z**2*hyper((), (5/3,), z**3/9)/(6*gamma(2/3)) - 3**(2/3)*hyper((), (1/3,), z**3/9)/(3*gamma(1/3))</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>airyai: Airy function of the first kind.\nairybi: Airy function of the second kind.\nairybiprime: Derivative of the Airy function of the second kind.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.airyaiprime, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.airybiprime", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "airybiprime", "kind": "class", "doc": "<p>The derivative $\\operatorname{Bi}^\\prime$ of the Airy function of the first\nkind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Airy function $\\operatorname{Bi}^\\prime(z)$ is defined to be the\nfunction</p>\n\n<p>$$\\operatorname{Bi}^\\prime(z) := \\frac{\\mathrm{d} \\operatorname{Bi}(z)}{\\mathrm{d} z}.$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>Create an Airy function object:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">airybiprime</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">airybiprime(z)</span>\n</code></pre>\n</div>\n\n<p>Several special values are known:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybiprime</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">3**(1/6)/gamma(1/3)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybiprime</span><span class=\"p\">(</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">oo</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybiprime</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">oo</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n\n<p>The Airy function obeys the mirror symmetry:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">airybiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">))</span>\n<span class=\"go\">airybiprime(conjugate(z))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $z$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">airybiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">z*airybi(z)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">airybiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">z*airybiprime(z) + airybi(z)</span>\n</code></pre>\n</div>\n\n<p>Series expansion is also supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">series</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"n\">airybiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">3**(1/6)/gamma(1/3) + 3**(5/6)*z**2/(6*gamma(2/3)) + O(z**3)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the Airy function to arbitrary precision\non the whole complex plane:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybiprime</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"go\">0.27879516692116952268509756941098324140300059345163</span>\n</code></pre>\n</div>\n\n<p>Rewrite $\\operatorname{Bi}^\\prime(z)$ in terms of hypergeometric functions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">hyper</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">airybiprime</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">hyper</span><span class=\"p\">)</span>\n<span class=\"go\">3**(5/6)*z**2*hyper((), (5/3,), z**3/9)/(6*gamma(2/3)) + 3**(1/6)*hyper((), (1/3,), z**3/9)/gamma(1/3)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>airyai: Airy function of the first kind.\nairybi: Airy function of the second kind.\nairyaiprime: Derivative of the Airy function of the first kind.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.airybiprime, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.marcumq", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "marcumq", "kind": "class", "doc": "<p>The Marcum Q-function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Marcum Q-function is defined by the meromorphic continuation of</p>\n\n<p>$$Q_m(a, b) = a^{- m + 1} \\int_{b}^{\\infty} x^{m} e^{- \\frac{a^{2}}{2} - \\frac{x^{2}}{2}} I_{m - 1}\\left(a x\\right)\\, dx$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">marcumq</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">marcumq</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">marcumq(m, a, b)</span>\n</code></pre>\n</div>\n\n<p>Special values:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">marcumq</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">uppergamma(m, b**2/2)/gamma(m)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">marcumq</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">marcumq</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">1 - exp(-a**2/2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">marcumq</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">1/2 + exp(-a**2)*besseli(0, a**2)/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">marcumq</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">1/2 + exp(-a**2)*besseli(0, a**2)/2 + exp(-a**2)*besseli(1, a**2)</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to $a$ and $b$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">marcumq</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">a*(-marcumq(m, a, b) + marcumq(m + 1, a, b))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">marcumq</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"go\">-a**(1 - m)*b**m*exp(-a**2/2 - b**2/2)*besseli(m - 1, a*b)</span>\n</code></pre>\n</div>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.bessel.marcumq, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.appellf1", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "appellf1", "kind": "class", "doc": "<p>This is the Appell hypergeometric function of two variables as:</p>\n\n<p>.. math ::\n    F_1(a,b_1,b_2,c,x,y) = \\sum_{m=0}^{\\infty} \\sum_{n=0}^{\\infty}\n    \\frac{(a)_{m+n} (b_1)_m (b_2)_n}{(c)_{m+n}}\n    \\frac{x^m y^n}{m! n!}.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">appellf1</span><span class=\"p\">,</span> <span class=\"n\">symbols</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;x y a b1 b2 c&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">appellf1</span><span class=\"p\">(</span><span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">6.</span><span class=\"p\">,</span> <span class=\"mf\">4.</span><span class=\"p\">,</span> <span class=\"mf\">5.</span><span class=\"p\">,</span> <span class=\"mf\">6.</span><span class=\"p\">)</span>\n<span class=\"go\">0.0063339426292673</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">appellf1</span><span class=\"p\">(</span><span class=\"mf\">12.</span><span class=\"p\">,</span> <span class=\"mf\">12.</span><span class=\"p\">,</span> <span class=\"mf\">6.</span><span class=\"p\">,</span> <span class=\"mf\">4.</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.12</span><span class=\"p\">)</span>\n<span class=\"go\">172870711.659936</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">appellf1</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"go\">appellf1(40, 2, 6, 4, 15, 60)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">appellf1</span><span class=\"p\">(</span><span class=\"mf\">20.</span><span class=\"p\">,</span> <span class=\"mf\">12.</span><span class=\"p\">,</span> <span class=\"mf\">10.</span><span class=\"p\">,</span> <span class=\"mf\">3.</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.12</span><span class=\"p\">)</span>\n<span class=\"go\">15605338197184.4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">appellf1</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">appellf1(40, 2, 6, 4, x, y)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">appellf1</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">appellf1(a, b1, b2, c, x, y)</span>\n</code></pre>\n</div>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.hyper.appellf1, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.legendre", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "legendre", "kind": "class", "doc": "<p><code>legendre(n, x)</code> gives the $n$th Legendre polynomial of $x$, $P_n(x)$</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Legendre polynomials are orthogonal on $[-1, 1]$ with respect to\nthe constant weight 1. They satisfy $P_n(1) = 1$ for all $n$; further,\n$P_n$ is odd for odd $n$ and even for even $n$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">legendre</span><span class=\"p\">,</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">legendre</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">legendre</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">legendre</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">3*x**2/2 - 1/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">legendre</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">legendre(n, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">legendre</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">n*(x*legendre(n, x) - legendre(n - 1, x))/(x**2 - 1)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>jacobi, gegenbauer,\nchebyshevt, chebyshevt_root, chebyshevu, chebyshevu_root,\nassoc_legendre,\nhermite,\nlaguerre, assoc_laguerre,\nsympy.polys.orthopolys.jacobi_poly\nsympy.polys.orthopolys.gegenbauer_poly\nsympy.polys.orthopolys.chebyshevt_poly\nsympy.polys.orthopolys.chebyshevu_poly\nsympy.polys.orthopolys.hermite_poly\nsympy.polys.orthopolys.legendre_poly\nsympy.polys.orthopolys.laguerre_poly</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.polynomials.legendre, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.assoc_legendre", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "assoc_legendre", "kind": "class", "doc": "<p><code>assoc_legendre(n, m, x)</code> gives $P_n^m(x)$, where $n$ and $m$ are\nthe degree and order or an expression which is related to the nth\norder Legendre polynomial, $P_n(x)$ in the following manner:</p>\n\n<p>$$P_n^m(x) = (-1)^m (1 - x^2)^{\\frac{m}{2}}\n           \\frac{\\mathrm{d}^m P_n(x)}{\\mathrm{d} x^m}$$</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>Associated Legendre polynomials are orthogonal on $[-1, 1]$ with:</p>\n\n<ul>\n<li>weight $= 1$            for the same $m$ and different $n$.</li>\n<li>weight $= \\frac{1}{1-x^2}$   for the same $n$ and different $m$.</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">assoc_legendre</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assoc_legendre</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assoc_legendre</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assoc_legendre</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-sqrt(1 - x**2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assoc_legendre</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">assoc_legendre(n, m, x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>jacobi, gegenbauer,\nchebyshevt, chebyshevt_root, chebyshevu, chebyshevu_root,\nlegendre,\nhermite,\nlaguerre, assoc_laguerre,\nsympy.polys.orthopolys.jacobi_poly\nsympy.polys.orthopolys.gegenbauer_poly\nsympy.polys.orthopolys.chebyshevt_poly\nsympy.polys.orthopolys.chebyshevu_poly\nsympy.polys.orthopolys.hermite_poly\nsympy.polys.orthopolys.legendre_poly\nsympy.polys.orthopolys.laguerre_poly</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.polynomials.assoc_legendre, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.hermite", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "hermite", "kind": "class", "doc": "<p><code>hermite(n, x)</code> gives the $n$th Hermite polynomial in $x$, $H_n(x)$</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Hermite polynomials are orthogonal on $(-\\infty, \\infty)$\nwith respect to the weight $\\exp\\left(-x^2\\right)$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">hermite</span><span class=\"p\">,</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hermite</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hermite</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hermite</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">4*x**2 - 2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hermite</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">hermite(n, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">hermite</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*n*hermite(n - 1, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hermite</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**n*hermite(n, x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>jacobi, gegenbauer,\nchebyshevt, chebyshevt_root, chebyshevu, chebyshevu_root,\nlegendre, assoc_legendre,\nlaguerre, assoc_laguerre,\nsympy.polys.orthopolys.jacobi_poly\nsympy.polys.orthopolys.gegenbauer_poly\nsympy.polys.orthopolys.chebyshevt_poly\nsympy.polys.orthopolys.chebyshevu_poly\nsympy.polys.orthopolys.hermite_poly\nsympy.polys.orthopolys.legendre_poly\nsympy.polys.orthopolys.laguerre_poly</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.polynomials.hermite, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.chebyshevt", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "chebyshevt", "kind": "class", "doc": "<p>Chebyshev polynomial of the first kind, $T_n(x)$.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p><code>chebyshevt(n, x)</code> gives the $n$th Chebyshev polynomial (of the first\nkind) in $x$, $T_n(x)$.</p>\n\n<p>The Chebyshev polynomials of the first kind are orthogonal on\n$[-1, 1]$ with respect to the weight $\\frac{1}{\\sqrt{1-x^2}}$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">chebyshevt</span><span class=\"p\">,</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevt</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevt</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*x**2 - 1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevt</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">chebyshevt(n, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevt</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**n*chebyshevt(n, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevt</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">chebyshevt(n, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevt</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">cos(pi*n/2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevt</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**n</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">chebyshevt</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">n*chebyshevu(n - 1, x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>jacobi, gegenbauer,\nchebyshevt_root, chebyshevu, chebyshevu_root,\nlegendre, assoc_legendre,\nhermite,\nlaguerre, assoc_laguerre,\nsympy.polys.orthopolys.jacobi_poly\nsympy.polys.orthopolys.gegenbauer_poly\nsympy.polys.orthopolys.chebyshevt_poly\nsympy.polys.orthopolys.chebyshevu_poly\nsympy.polys.orthopolys.hermite_poly\nsympy.polys.orthopolys.legendre_poly\nsympy.polys.orthopolys.laguerre_poly</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.polynomials.chebyshevt, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.chebyshevu", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "chebyshevu", "kind": "class", "doc": "<p>Chebyshev polynomial of the second kind, $U_n(x)$.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p><code>chebyshevu(n, x)</code> gives the $n$th Chebyshev polynomial of the second\nkind in x, $U_n(x)$.</p>\n\n<p>The Chebyshev polynomials of the second kind are orthogonal on\n$[-1, 1]$ with respect to the weight $\\sqrt{1-x^2}$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">chebyshevu</span><span class=\"p\">,</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevu</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevu</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevu</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">4*x**2 - 1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevu</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">chebyshevu(n, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevu</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**n*chebyshevu(n, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevu</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-chebyshevu(n - 2, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevu</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">cos(pi*n/2)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">chebyshevu</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">n + 1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">chebyshevu</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">(-x*chebyshevu(n, x) + (n + 1)*chebyshevt(n + 1, x))/(x**2 - 1)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>jacobi, gegenbauer,\nchebyshevt, chebyshevt_root, chebyshevu_root,\nlegendre, assoc_legendre,\nhermite,\nlaguerre, assoc_laguerre,\nsympy.polys.orthopolys.jacobi_poly\nsympy.polys.orthopolys.gegenbauer_poly\nsympy.polys.orthopolys.chebyshevt_poly\nsympy.polys.orthopolys.chebyshevu_poly\nsympy.polys.orthopolys.hermite_poly\nsympy.polys.orthopolys.legendre_poly\nsympy.polys.orthopolys.laguerre_poly</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.polynomials.chebyshevu, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.laguerre", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "laguerre", "kind": "class", "doc": "<p>Returns the $n$th Laguerre polynomial in $x$, $L_n(x)$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">laguerre</span><span class=\"p\">,</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">laguerre</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">laguerre</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1 - x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">laguerre</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">x**2/2 - 2*x + 1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">laguerre</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-x**3/6 + 3*x**2/2 - 3*x + 1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">laguerre</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">laguerre(n, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">laguerre</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-assoc_laguerre(n - 1, 1, x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>n : int\n    Degree of Laguerre polynomial. Must be <code>n \\ge 0</code>.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>jacobi, gegenbauer,\nchebyshevt, chebyshevt_root, chebyshevu, chebyshevu_root,\nlegendre, assoc_legendre,\nhermite,\nassoc_laguerre,\nsympy.polys.orthopolys.jacobi_poly\nsympy.polys.orthopolys.gegenbauer_poly\nsympy.polys.orthopolys.chebyshevt_poly\nsympy.polys.orthopolys.chebyshevu_poly\nsympy.polys.orthopolys.hermite_poly\nsympy.polys.orthopolys.legendre_poly\nsympy.polys.orthopolys.laguerre_poly</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.polynomials.laguerre, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.assoc_laguerre", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "assoc_laguerre", "kind": "class", "doc": "<p>Returns the $n$th generalized Laguerre polynomial in $x$, $L_n(x)$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">assoc_laguerre</span><span class=\"p\">,</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assoc_laguerre</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assoc_laguerre</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">a - x + 1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assoc_laguerre</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">a**2/2 + 3*a/2 + x**2/2 + x*(-a - 2) + 1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assoc_laguerre</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">a**3/6 + a**2 + 11*a/6 - x**3/6 + x**2*(a/2 + 3/2) +</span>\n<span class=\"go\">    x*(-a**2/2 - 5*a/2 - 3) + 1</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assoc_laguerre</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">binomial(a + n, a)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assoc_laguerre</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">assoc_laguerre(n, a, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">assoc_laguerre</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">laguerre(n, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">assoc_laguerre</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-assoc_laguerre(n - 1, a + 1, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">assoc_laguerre</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">Sum(assoc_laguerre(_k, a, x)/(-a + n), (_k, 0, n - 1))</span>\n</code></pre>\n</div>\n\n<h1 id=\"parameters\">Parameters</h1>\n\n<p>n : int\n    Degree of Laguerre polynomial. Must be <code>n \\ge 0</code>.</p>\n\n<p>alpha : Expr\n    Arbitrary expression. For <code>alpha=0</code> regular Laguerre\n    polynomials will be generated.</p>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>jacobi, gegenbauer,\nchebyshevt, chebyshevt_root, chebyshevu, chebyshevu_root,\nlegendre, assoc_legendre,\nhermite,\nlaguerre,\nsympy.polys.orthopolys.jacobi_poly\nsympy.polys.orthopolys.gegenbauer_poly\nsympy.polys.orthopolys.chebyshevt_poly\nsympy.polys.orthopolys.chebyshevu_poly\nsympy.polys.orthopolys.hermite_poly\nsympy.polys.orthopolys.legendre_poly\nsympy.polys.orthopolys.laguerre_poly</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.polynomials.assoc_laguerre, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.gegenbauer", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "gegenbauer", "kind": "class", "doc": "<p>Gegenbauer polynomial $C_n^{\\left(\\alpha\\right)}(x)$.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p><code>gegenbauer(n, alpha, x)</code> gives the $n$th Gegenbauer polynomial\nin $x$, $C_n^{\\left(\\alpha\\right)}(x)$.</p>\n\n<p>The Gegenbauer polynomials are orthogonal on $[-1, 1]$ with\nrespect to the weight $\\left(1-x^2\\right)^{\\alpha-\\frac{1}{2}}$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">gegenbauer</span><span class=\"p\">,</span> <span class=\"n\">conjugate</span><span class=\"p\">,</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gegenbauer</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gegenbauer</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*a*x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gegenbauer</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">-a + x**2*(2*a**2 + 2*a)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gegenbauer</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">x**3*(4*a**3/3 + 4*a**2 + 8*a/3) + x*(-2*a**2 - 2*a)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gegenbauer</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">gegenbauer(n, a, x)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gegenbauer</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**n*gegenbauer(n, a, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gegenbauer</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">2**n*sqrt(pi)*gamma(a + n/2)/(gamma(a)*gamma(1/2 - n/2)*gamma(n + 1))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gegenbauer</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">gamma(2*a + n)/(gamma(2*a)*gamma(n + 1))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">gegenbauer</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">gegenbauer(n, conjugate(a), conjugate(x))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">gegenbauer</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*a*gegenbauer(n - 1, a + 1, x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>jacobi,\nchebyshevt_root, chebyshevu, chebyshevu_root,\nlegendre, assoc_legendre,\nhermite,\nlaguerre, assoc_laguerre,\nsympy.polys.orthopolys.jacobi_poly\nsympy.polys.orthopolys.gegenbauer_poly\nsympy.polys.orthopolys.chebyshevt_poly\nsympy.polys.orthopolys.chebyshevu_poly\nsympy.polys.orthopolys.hermite_poly\nsympy.polys.orthopolys.legendre_poly\nsympy.polys.orthopolys.laguerre_poly</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.polynomials.gegenbauer, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.jacobi", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "jacobi", "kind": "class", "doc": "<p>Jacobi polynomial $P_n^{\\left(\\alpha, \\beta\\right)}(x)$.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p><code>jacobi(n, alpha, beta, x)</code> gives the $n$th Jacobi polynomial\nin $x$, $P_n^{\\left(\\alpha, \\beta\\right)}(x)$.</p>\n\n<p>The Jacobi polynomials are orthogonal on $[-1, 1]$ with respect\nto the weight $\\left(1-x\\right)^\\alpha \\left(1+x\\right)^\\beta$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">jacobi</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">conjugate</span><span class=\"p\">,</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">x</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">a/2 - b/2 + x*(a/2 + b/2 + 1)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">a**2/8 - a*b/4 - a/8 + b**2/8 - b/8 + x**2*(a**2/8 + a*b/4 + 7*a/8 + b**2/8 + 7*b/8 + 3/2) + x*(a**2/4 + 3*a/4 - b**2/4 - 3*b/4) - 1/2</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">jacobi(n, a, b, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">RisingFactorial(a + 1, n)*gegenbauer(n,</span>\n<span class=\"go\">    a + 1/2, x)/RisingFactorial(2*a + 1, n)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">legendre(n, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">RisingFactorial(3/2, n)*chebyshevu(n, x)/factorial(n + 1)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">S</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">RisingFactorial(1/2, n)*chebyshevt(n, x)/factorial(n)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**n*jacobi(n, b, a, x)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">gamma(a + n + 1)*hyper((-b - n, -n), (a + 1,), -1)/(2**n*factorial(n)*gamma(a + 1))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">RisingFactorial(a + 1, n)/factorial(n)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n<span class=\"go\">jacobi(n, conjugate(a), conjugate(b), conjugate(x))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">jacobi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">(a/2 + b/2 + n/2 + 1/2)*jacobi(n - 1, a + 1, b + 1, x)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>gegenbauer,\nchebyshevt_root, chebyshevu, chebyshevu_root,\nlegendre, assoc_legendre,\nhermite,\nlaguerre, assoc_laguerre,\nsympy.polys.orthopolys.jacobi_poly,\nsympy.polys.orthopolys.gegenbauer_poly\nsympy.polys.orthopolys.chebyshevt_poly\nsympy.polys.orthopolys.chebyshevu_poly\nsympy.polys.orthopolys.hermite_poly\nsympy.polys.orthopolys.legendre_poly\nsympy.polys.orthopolys.laguerre_poly</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.polynomials.jacobi, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.Ynm", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Ynm", "kind": "class", "doc": "<p>Spherical harmonics defined as</p>\n\n<p>$$Y_n^m(\\theta, \\varphi) := \\sqrt{\\frac{(2n+1)(n-m)!}{4\\pi(n+m)!}}\n                          \\exp(i m \\varphi)\n                          \\mathrm{P}_n^m\\left(\\cos(\\theta)\\right)$$</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p><code>Ynm()</code> gives the spherical harmonic function of order $n$ and $m$\nin $\\theta$ and $\\varphi$, $Y_n^m(\\theta, \\varphi)$. The four\nparameters are as follows: $n \\geq 0$ an integer and $m$ an integer\nsuch that $-n \\leq m \\leq n$ holds. The two angles are real-valued\nwith $\\theta \\in [0, \\pi]$ and $\\varphi \\in [0, 2\\pi]$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Ynm</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">simplify</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">m</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;theta&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;phi&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span>\n<span class=\"go\">Ynm(n, m, theta, phi)</span>\n</code></pre>\n</div>\n\n<p>Several symmetries are known, for the order:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span>\n<span class=\"go\">(-1)**m*exp(-2*I*m*phi)*Ynm(n, m, theta, phi)</span>\n</code></pre>\n</div>\n\n<p>As well as for the angles:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span>\n<span class=\"go\">Ynm(n, m, theta, phi)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n<span class=\"go\">exp(-2*I*m*phi)*Ynm(n, m, theta, phi)</span>\n</code></pre>\n</div>\n\n<p>For specific integers $n$ and $m$ we can evaluate the harmonics\nto more useful expressions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">1/(2*sqrt(pi))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">sqrt(6)*exp(-I*phi)*sin(theta)/(4*sqrt(pi))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">sqrt(3)*cos(theta)/(2*sqrt(pi))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">-sqrt(6)*exp(I*phi)*sin(theta)/(4*sqrt(pi))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">sqrt(30)*exp(-2*I*phi)*sin(theta)**2/(8*sqrt(pi))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">sqrt(30)*exp(-I*phi)*sin(2*theta)/(8*sqrt(pi))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">sqrt(5)*(3*cos(theta)**2 - 1)/(4*sqrt(pi))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">-sqrt(30)*exp(I*phi)*sin(2*theta)/(8*sqrt(pi))</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">sqrt(30)*exp(2*I*phi)*sin(theta)**2/(8*sqrt(pi))</span>\n</code></pre>\n</div>\n\n<p>We can differentiate the functions with respect\nto both angles:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Ynm</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">m</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;theta&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;phi&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">),</span> <span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"go\">m*cot(theta)*Ynm(n, m, theta, phi) + sqrt((-m + n)*(m + n + 1))*exp(-I*phi)*Ynm(n, m + 1, theta, phi)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">),</span> <span class=\"n\">phi</span><span class=\"p\">)</span>\n<span class=\"go\">I*m*Ynm(n, m, theta, phi)</span>\n</code></pre>\n</div>\n\n<p>Further we can compute the complex conjugation:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Ynm</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">m</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;theta&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;phi&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">))</span>\n<span class=\"go\">(-1)**(2*m)*exp(-2*I*m*phi)*Ynm(n, m, theta, phi)</span>\n</code></pre>\n</div>\n\n<p>To get back the well known expressions in spherical\ncoordinates, we use full expansion:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Ynm</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">expand_func</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">n</span><span class=\"p\">,</span><span class=\"n\">m</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;theta&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;phi&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expand_func</span><span class=\"p\">(</span><span class=\"n\">Ynm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">))</span>\n<span class=\"go\">sqrt((2*n + 1)*factorial(-m + n)/factorial(m + n))*exp(I*m*phi)*assoc_legendre(n, m, cos(theta))/(2*sqrt(pi))</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Ynm_c, Znm</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.spherical_harmonics.Ynm, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.Znm", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "Znm", "kind": "class", "doc": "<p>Real spherical harmonics defined as</p>\n\n<p>$$Z_n^m(\\theta, \\varphi) :=\n\\begin{cases}\n  \\frac{Y_n^m(\\theta, \\varphi) + \\overline{Y_n^m(\\theta, \\varphi)}}{\\sqrt{2}} &amp;\\quad m &gt; 0 \\\n  Y_n^m(\\theta, \\varphi) &amp;\\quad m = 0 \\\n  \\frac{Y_n^m(\\theta, \\varphi) - \\overline{Y_n^m(\\theta, \\varphi)}}{i \\sqrt{2}} &amp;\\quad m &lt; 0 \\\n\\end{cases}$$</p>\n\n<p>which gives in simplified form</p>\n\n<p>$$Z_n^m(\\theta, \\varphi) =\n\\begin{cases}\n  \\frac{Y_n^m(\\theta, \\varphi) + (-1)^m Y_n^{-m}(\\theta, \\varphi)}{\\sqrt{2}} &amp;\\quad m &gt; 0 \\\n  Y_n^m(\\theta, \\varphi) &amp;\\quad m = 0 \\\n  \\frac{Y_n^m(\\theta, \\varphi) - (-1)^m Y_n^{-m}(\\theta, \\varphi)}{i \\sqrt{2}} &amp;\\quad m &lt; 0 \\\n\\end{cases}$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">Znm</span><span class=\"p\">,</span> <span class=\"n\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">simplify</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;theta&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"s2\">&quot;phi&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Znm</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span>\n<span class=\"go\">Znm(n, m, theta, phi)</span>\n</code></pre>\n</div>\n\n<p>For specific integers n and m we can evaluate the harmonics\nto more useful expressions:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Znm</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">1/(2*sqrt(pi))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Znm</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">-sqrt(3)*sin(theta)*cos(phi)/(2*sqrt(pi))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">simplify</span><span class=\"p\">(</span><span class=\"n\">Znm</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">expand</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">-sqrt(15)*sin(2*theta)*cos(phi)/(4*sqrt(pi))</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>Ynm, Ynm_c</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.spherical_harmonics.Znm, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.elliptic_k", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "elliptic_k", "kind": "class", "doc": "<p>The complete elliptic integral of the first kind, defined by</p>\n\n<p>$$K(m) = F\\left(\\tfrac{\\pi}{2}\\middle| m\\right)$$</p>\n\n<p>where $F\\left(z\\middle| m\\right)$ is the Legendre incomplete\nelliptic integral of the first kind.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The function $K(m)$ is a single-valued function on the complex\nplane with branch cut along the interval $(1, \\infty)$.</p>\n\n<p>Note that our notation defines the incomplete elliptic integral\nin terms of the parameter $m$ instead of the elliptic modulus\n(eccentricity) $k$.\nIn this case, the parameter $m$ is defined as $m=k^2$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">elliptic_k</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">m</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_k</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_k</span><span class=\"p\">(</span><span class=\"mf\">1.0</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">1.50923695405127 + 0.625146415202697*I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_k</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2 + pi*m/8 + 9*pi*m**2/128 + O(m**3)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>elliptic_f</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.elliptic_integrals.elliptic_k, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.elliptic_f", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "elliptic_f", "kind": "class", "doc": "<p>The Legendre incomplete elliptic integral of the first\nkind, defined by</p>\n\n<p>$$F\\left(z\\middle| m\\right) =\\int_0^z \\frac{dt}{\\sqrt{1 - m \\sin^2 t}}$$</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function reduces to a complete elliptic integral of\nthe first kind, $K(m)$, when $z = \\pi/2$.</p>\n\n<p>Note that our notation defines the incomplete elliptic integral\nin terms of the parameter $m$ instead of the elliptic modulus\n(eccentricity) $k$.\nIn this case, the parameter $m$ is defined as $m=k^2$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">elliptic_f</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">m</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_f</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">z + z**5*(3*m**2/40 - m/30) + m*z**3/6 + O(z**6)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_f</span><span class=\"p\">(</span><span class=\"mf\">3.0</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">2.909449841483 + 1.74720545502474*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>elliptic_k</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.elliptic_integrals.elliptic_f, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.elliptic_e", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "elliptic_e", "kind": "class", "doc": "<p>Called with two arguments $z$ and $m$, evaluates the\nincomplete elliptic integral of the second kind, defined by</p>\n\n<p>$$E\\left(z\\middle| m\\right) = \\int_0^z \\sqrt{1 - m \\sin^2 t} dt$$</p>\n\n<p>Called with a single argument $m$, evaluates the Legendre complete\nelliptic integral of the second kind</p>\n\n<p>$$E(m) = E\\left(\\tfrac{\\pi}{2}\\middle| m\\right)$$</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The function $E(m)$ is a single-valued function on the complex\nplane with branch cut along the interval $(1, \\infty)$.</p>\n\n<p>Note that our notation defines the incomplete elliptic integral\nin terms of the parameter $m$ instead of the elliptic modulus\n(eccentricity) $k$.\nIn this case, the parameter $m$ is defined as $m=k^2$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">elliptic_e</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">m</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_e</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">z + z**5*(-m**2/40 + m/30) - m*z**3/6 + O(z**6)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_e</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2 - pi*m/8 - 3*pi*m**2/128 - 5*pi*m**3/512 + O(m**4)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_e</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">I</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">()</span>\n<span class=\"go\">1.55203744279187 + 0.290764986058437*I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_e</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_e</span><span class=\"p\">(</span><span class=\"mf\">2.0</span> <span class=\"o\">-</span> <span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">0.991052601328069 + 0.81879421395609*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.elliptic_integrals.elliptic_e, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.elliptic_pi", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "elliptic_pi", "kind": "class", "doc": "<p>Called with three arguments $n$, $z$ and $m$, evaluates the\nLegendre incomplete elliptic integral of the third kind, defined by</p>\n\n<p>$$\\Pi\\left(n; z\\middle| m\\right) = \\int_0^z \\frac{dt}{\\left(1 - n \\sin^2 t\\right) \\sqrt{1 - m \\sin^2 t}}$$</p>\n\n<p>Called with two arguments $n$ and $m$, evaluates the complete\nelliptic integral of the third kind:</p>\n\n<p>$$\\Pi\\left(n\\middle| m\\right) =\\Pi\\left(n; \\tfrac{\\pi}{2}\\middle| m\\right)$$</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>Note that our notation defines the incomplete elliptic integral\nin terms of the parameter $m$ instead of the elliptic modulus\n(eccentricity) $k$.\nIn this case, the parameter $m$ is defined as $m=k^2$.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">elliptic_pi</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_pi</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">z + z**3*(m/6 + n/3) + O(z**4)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_pi</span><span class=\"p\">(</span><span class=\"mf\">0.5</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span> <span class=\"o\">-</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">)</span>\n<span class=\"go\">2.50232379629182 - 0.760939574180767*I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_pi</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">pi/2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">elliptic_pi</span><span class=\"p\">(</span><span class=\"mf\">1.0</span> <span class=\"o\">-</span> <span class=\"n\">I</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"p\">)</span>\n<span class=\"go\">3.29136443417283 + 0.32555634906645*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.elliptic_integrals.elliptic_pi, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.beta", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "beta", "kind": "class", "doc": "<p>The beta integral is called the Eulerian integral of the first kind by\nLegendre:</p>\n\n<p>$$\\mathrm{B}(x,y)  \\int^{1}_{0} t^{x-1} (1-t)^{y-1} \\mathrm{d}t.$$</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>The Beta function or Euler's first integral is closely associated\nwith the gamma function. The Beta function is often used in probability\ntheory and mathematical statistics. It satisfies properties like:</p>\n\n<p>$$\\mathrm{B}(a,1) = \\frac{1}{a} \\\n\\mathrm{B}(a,b) = \\mathrm{B}(b,a)  \\\n\\mathrm{B}(a,b) = \\frac{\\Gamma(a) \\Gamma(b)}{\\Gamma(a+b)}$$</p>\n\n<p>Therefore for integral values of $a$ and $b$:</p>\n\n<p>$$\\mathrm{B} = \\frac{(a-1)! (b-1)!}{(a+b-1)!}$$</p>\n\n<p>A special case of the Beta function when <code>x = y</code> is the\nCentral Beta function. It satisfies properties like:</p>\n\n<p>$$\\mathrm{B}(x) = 2^{1 - 2x}\\mathrm{B}(x, \\frac{1}{2})\n\\mathrm{B}(x) = 2^{1 - 2x} cos(\\pi x) \\mathrm{B}(\\frac{1}{2} - x, x)\n\\mathrm{B}(x) = \\int_{0}^{1} \\frac{t^x}{(1 + t)^{2x}} dt\n\\mathrm{B}(x) = \\frac{2}{x} \\prod_{n = 1}^{\\infty} \\frac{n(n + 2x)}{(n + x)^2}$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">pi</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>\n</code></pre>\n</div>\n\n<p>The Beta function obeys the mirror symmetry:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">beta</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"go\">beta(conjugate(x), conjugate(y))</span>\n</code></pre>\n</div>\n\n<p>Differentiation with respect to both $x$ and $y$ is supported:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">diff</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">beta</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">(polygamma(0, x) - polygamma(0, x + y))*beta(x, y)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">beta</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">(polygamma(0, y) - polygamma(0, x + y))*beta(x, y)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">beta</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">2*(polygamma(0, x) - polygamma(0, 2*x))*beta(x, x)</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the Beta function to\narbitrary precision for any complex numbers x and y:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">beta</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beta</span><span class=\"p\">(</span><span class=\"n\">pi</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"go\">0.02671848900111377452242355235388489324562</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beta</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"go\">-0.2112723729365330143 - 0.7655283165378005676*I</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>gamma: Gamma function.\nuppergamma: Upper incomplete gamma function.\nlowergamma: Lower incomplete gamma function.\npolygamma: Polygamma function.\nloggamma: Log Gamma function.\ndigamma: Digamma function.\ntrigamma: Trigamma function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.beta_functions.beta, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.mathieus", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "mathieus", "kind": "class", "doc": "<p>The Mathieu Sine function $S(a,q,z)$.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is one solution of the Mathieu differential equation:</p>\n\n<p>.. math ::\n    y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0</p>\n\n<p>The other solution is the Mathieu Cosine function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span><span class=\"p\">,</span> <span class=\"n\">mathieus</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mathieus</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">mathieus(a, q, z)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mathieus</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">sin(sqrt(a)*z)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">mathieus</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">mathieusprime(a, q, z)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>mathieuc: Mathieu cosine function.\nmathieusprime: Derivative of Mathieu sine function.\nmathieucprime: Derivative of Mathieu cosine function.</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.mathieu_functions.mathieus, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.mathieuc", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "mathieuc", "kind": "class", "doc": "<p>The Mathieu Cosine function $C(a,q,z)$.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is one solution of the Mathieu differential equation:</p>\n\n<p>.. math ::\n    y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0</p>\n\n<p>The other solution is the Mathieu Sine function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span><span class=\"p\">,</span> <span class=\"n\">mathieuc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mathieuc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">mathieuc(a, q, z)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mathieuc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">cos(sqrt(a)*z)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">mathieuc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">mathieucprime(a, q, z)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>mathieus: Mathieu sine function\nmathieusprime: Derivative of Mathieu sine function\nmathieucprime: Derivative of Mathieu cosine function</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.mathieu_functions.mathieuc, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.mathieusprime", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "mathieusprime", "kind": "class", "doc": "<p>The derivative $S^{\\prime}(a,q,z)$ of the Mathieu Sine function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is one solution of the Mathieu differential equation:</p>\n\n<p>.. math ::\n    y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0</p>\n\n<p>The other solution is the Mathieu Cosine function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span><span class=\"p\">,</span> <span class=\"n\">mathieusprime</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mathieusprime</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">mathieusprime(a, q, z)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mathieusprime</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">sqrt(a)*cos(sqrt(a)*z)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">mathieusprime</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">(-a + 2*q*cos(2*z))*mathieus(a, q, z)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>mathieus: Mathieu sine function\nmathieuc: Mathieu cosine function\nmathieucprime: Derivative of Mathieu cosine function</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.mathieu_functions.mathieusprime, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.mathieucprime", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "mathieucprime", "kind": "class", "doc": "<p>The derivative $C^{\\prime}(a,q,z)$ of the Mathieu Cosine function.</p>\n\n<h1 id=\"explanation\">Explanation</h1>\n\n<p>This function is one solution of the Mathieu differential equation:</p>\n\n<p>.. math ::\n    y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0</p>\n\n<p>The other solution is the Mathieu Sine function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">diff</span><span class=\"p\">,</span> <span class=\"n\">mathieucprime</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mathieucprime</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">mathieucprime(a, q, z)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">mathieucprime</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">-sqrt(a)*sin(sqrt(a)*z)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"n\">mathieucprime</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"go\">(-a + 2*q*cos(2*z))*mathieuc(a, q, z)</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>mathieus: Mathieu sine function\nmathieuc: Mathieu cosine function\nmathieusprime: Derivative of Mathieu sine function</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.mathieu_functions.mathieucprime, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.riemann_xi", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "riemann_xi", "kind": "class", "doc": "<p>Riemann Xi function.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<p>The Riemann Xi function is closely related to the Riemann zeta function.\nThe zeros of Riemann Xi function are precisely the non-trivial zeros\nof the zeta function.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">riemann_xi</span><span class=\"p\">,</span> <span class=\"n\">zeta</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy.abc</span> <span class=\"kn\">import</span> <span class=\"n\">s</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">riemann_xi</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">zeta</span><span class=\"p\">)</span>\n<span class=\"go\">s*(s - 1)*gamma(s/2)*zeta(s)/(2*pi**(s/2))</span>\n</code></pre>\n</div>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.zeta_functions.riemann_xi, EqnFunction"}, {"fullname": "algebra_with_sympy.algebraic_equation.betainc", "modulename": "algebra_with_sympy.algebraic_equation", "qualname": "betainc", "kind": "class", "doc": "<p>The Generalized Incomplete Beta function is defined as</p>\n\n<p>$$\\mathrm{B}_{(x_1, x_2)}(a, b) = \\int_{x_1}^{x_2} t^{a - 1} (1 - t)^{b - 1} dt$$</p>\n\n<p>The Incomplete Beta function is a special case\nof the Generalized Incomplete Beta function :</p>\n\n<p>$$\\mathrm{B}_z (a, b) = \\mathrm{B}_{(0, z)}(a, b)$$</p>\n\n<p>The Incomplete Beta function satisfies :</p>\n\n<p>$$\\mathrm{B}_z (a, b) = (-1)^a \\mathrm{B}_{\\frac{z}{z - 1}} (a, 1 - a - b)$$</p>\n\n<p>The Beta function is a special case of the Incomplete Beta function :</p>\n\n<p>$$\\mathrm{B}(a, b) = \\mathrm{B}_{1}(a, b)$$</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">betainc</span><span class=\"p\">,</span> <span class=\"n\">symbols</span><span class=\"p\">,</span> <span class=\"n\">conjugate</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"s1\">&#39;a b x x1 x2&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The Generalized Incomplete Beta function is given by:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">betainc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">)</span>\n<span class=\"go\">betainc(a, b, x1, x2)</span>\n</code></pre>\n</div>\n\n<p>The Incomplete Beta function can be obtained as follows:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">betainc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">betainc(a, b, 0, x)</span>\n</code></pre>\n</div>\n\n<p>The Incomplete Beta function obeys the mirror symmetry:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">conjugate</span><span class=\"p\">(</span><span class=\"n\">betainc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">))</span>\n<span class=\"go\">betainc(conjugate(a), conjugate(b), conjugate(x1), conjugate(x2))</span>\n</code></pre>\n</div>\n\n<p>We can numerically evaluate the Incomplete Beta function to\narbitrary precision for any complex numbers a, b, x1 and x2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">betainc</span><span class=\"p\">,</span> <span class=\"n\">I</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">betainc</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"go\">56.08333333</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">betainc</span><span class=\"p\">(</span><span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">I</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">evalf</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"go\">0.2241657956955709603655887 + 0.3619619242700451992411724*I</span>\n</code></pre>\n</div>\n\n<p>The Generalized Incomplete Beta function can be expressed\nin terms of the Generalized Hypergeometric function.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sympy</span> <span class=\"kn\">import</span> <span class=\"n\">hyper</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">betainc</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rewrite</span><span class=\"p\">(</span><span class=\"n\">hyper</span><span class=\"p\">)</span>\n<span class=\"go\">(-x1**a*hyper((a, 1 - b), (a + 1,), x1) + x2**a*hyper((a, 1 - b), (a + 1,), x2))/a</span>\n</code></pre>\n</div>\n\n<h1 id=\"see-also\">See Also</h1>\n\n<p>beta: Beta function\nhyper: Generalized Hypergeometric function</p>\n\n<h1 id=\"references\">References</h1>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "sympy.functions.special.beta_functions.betainc, EqnFunction"}, {"fullname": "algebra_with_sympy.preparser", "modulename": "algebra_with_sympy.preparser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "algebra_with_sympy.preparser.algebra_with_sympy_preparser", "modulename": "algebra_with_sympy.preparser", "qualname": "algebra_with_sympy_preparser", "kind": "function", "doc": "<p>In IPython compatible environments (Jupyter, IPython, etc...) this supports\na special compact input method for equations.</p>\n\n<p>The syntax supported is <code>equation_name =@ equation.lhs = equation.rhs</code>,\nwhere <code>equation_name</code> is a valid Python name that can be used to refer to\nthe equation later. <code>equation.lhs</code> is the left-hand side of the equation\nand <code>equation.rhs</code> is the right-hand side of the equation. Each side of the\nequation must parse into a valid Sympy expression.</p>\n\n<p><strong>Note</strong>: This does not support line continuation. Long equations should be\nbuilt by combining expressions using names short enough to do this on one\nline. The alternative is to use <code>equation_name = Eqn(long ...\nexpressions ... with ... multiple ... lines)</code>.</p>\n\n<p><strong>Note</strong>: If the <code>equation_name</code> is omitted the equation will be formed,\nbut it will not be assigned to a name that can be used to refer to it\nlater. You may be able to access it through one of the special IPython\nunderscore names. This is not recommended.</p>\n\n<p><strong>THIS FUNCTION IS USED BY THE IPYTHON ENVIRONMENT TO PREPARSE THE INPUT\nBEFORE IT IS PASSED TO THE PYTHON INTERPRETER. IT IS NOT MEANT TO BE USED\nDIRECTLY BY A USER</strong></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lines</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "algebra_with_sympy.version", "modulename": "algebra_with_sympy.version", "kind": "module", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();